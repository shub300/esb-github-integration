<?php

namespace App\Http\Controllers\Brightpearl;

use App\Helper\Api\BrightpearlApi;
use App\Helper\Api\CronHelper;
use App\Helper\Api\WoocommerceApi;
use App\Helper\ConnectionHelper;
use App\Helper\FieldMappingHelper;
use App\Helper\IntegrationCommonHelper;
use App\Helper\Logger;
use App\Helper\MainModel;
use App\Helper\WorkflowSnippet;
use App\Http\Controllers\Controller;
use App\Models\Enum\PlatformRecordType;
use App\Models\Enum\PlatformStatus;
use App\Models\PlatformAccountAdditionalInfo;
use App\Models\PlatformRetryQuery;
use App\Models\PlatformCustomer;
use App\Models\PlatformDataMapping;
use App\Models\PlatformInvoice;
use App\Models\PlatformKitChildProductQuantity;
use App\Models\PlatformObject;
use App\Models\PlatformObjectData;
use App\Models\PlatformObjectDataAdditionalInformation;
use App\Models\PlatformOrder;
use App\Models\PlatformOrderAdditionalInformation;
use App\Models\PlatformOrderLine;
use App\Models\PlatformOrderShipment;
use App\Models\PlatformOrderShipmentLine;
use App\Models\PlatformOrderTransaction;
use App\Models\PlatformOrderAddress;
use App\Models\PlatformProduct;
use App\Models\PlatformProductInventory;
use App\Models\PlatformProductOption;
use App\Models\PlatformUrl;
use App\Models\SyncLog;
use App\Models\PlatformReceiveWebhook;
use Illuminate\Http\Request;
use Illuminate\Support\Facades\Auth;
use Illuminate\Support\Facades\Config;
use Illuminate\Support\Facades\DB;
use Illuminate\Support\Facades\Lang;
use Illuminate\Support\Facades\Log;
use Illuminate\Support\Facades\Session;
use Illuminate\Support\Facades\Storage;
use Illuminate\Support\Facades\Validator;
use DateTime;
use App\Models\EsRegionalTimeZone;
use DateTimeZone;
use App\Models\PlatformInventoryTrail;
use App\Models\UserIntegration;

class BrightPearlApiController extends Controller
{
    /**
     * Create a new controller instance.
     *
     * @return void
     */
    public $wfsnip, $mobj, $bp, $helper, $platformId, $map, $log, $platformUrl, $platformOrderShipment, $cronHelper, $integrationCommonHelper;
    public static $myPlatform = 'brightpearl';

    public function __construct()
    {
        $this->wfsnip = new WorkflowSnippet();
        $this->mobj = new MainModel();
        $this->bp = new BrightpearlApi;
        $this->log = new Logger();
        $this->map = new FieldMappingHelper();
        $this->helper = new ConnectionHelper;
        $this->platformUrl = new PlatformUrl();
        $this->platformOrderShipment = new PlatformOrderShipment();
        $this->integrationCommonHelper = new IntegrationCommonHelper();
        $this->cronHelper = new CronHelper();
        $this->platformId = $this->helper->getPlatformIdByName(self::$myPlatform);
    }

    /* Receive Product /create/update/delete webhook from BP */
    public function ReceiveProductWebhook(Request $request, $userIntegrationId)
    {
        // Log::info( "ReceiveProductWebhook: ".$request." userIntegrationId: ".$userIntegrationId );
        try {
            $mainArr = [];
            if ($request->isMethod('post')) {
                $body = $request->getContent();
                $result_data = json_decode($body, 1);
                // Log::info( "ReceiveProductWebhook: Result Data: ".json_encode( $result_data ) );

                if (isset($result_data['fullEvent']) && $result_data['fullEvent']) {

                    $fullEvent = $result_data['fullEvent'];

                    // Avoid product modified webhook
                    if ($fullEvent == "product.modified.price-modified" && in_array($userIntegrationId, [152, 158, 144, 208, 455, 459])) {
                        //do nothing
                    } else if (($fullEvent == "product.modified" || $fullEvent == "product.modified.price-modified") && in_array($userIntegrationId, [204,  91, 92, 97, 144, 158, 168, 416, 242, 278, 208, 152, 205, 185, 198, 155])) { // Remove 80 later  204 // check 205 & 185
                        return true;
                    } else if ($fullEvent != "product.modified" && $fullEvent != "product.created" && $fullEvent != "product.destroyed") {
                        // Log::info($userIntegrationId . ' not modified return->' . $fullEvent);
                        return true;
                    }
                } else { // If no fulfill event came
                    return true;
                }

                $integration = $this->map->getUserIntegrationDetailsById($userIntegrationId, self::$myPlatform);

                if ($integration) {

                    if ($result_data && isset($result_data['id'])) {
                        $product_ids = $result_data['id'];
                        $fullEvent = $result_data['fullEvent'];

                        $arr = explode(",", $product_ids);
                        $mainArr = [];
                        foreach ($arr as $val) {
                            if (strpos($val, "-")) {
                                $break_dash = explode("-", $val);
                                $range_ids = range($break_dash[0], $break_dash[1]);
                                foreach ($range_ids as $key) {
                                    if (!$this->map->getIntegProductById($userIntegrationId, $key, $fullEvent, 'brightpearl')) {
                                        array_push($mainArr, (string)$key);
                                    }
                                }
                            } else {
                                if (!$this->map->getIntegProductById($userIntegrationId, $val, $fullEvent, 'brightpearl')) {
                                    array_push($mainArr, (string)$val);
                                }
                            }
                        }

                        $mainArr = array_unique($mainArr);

                        if (!empty($mainArr)) {
                            /* if duplicate ids found for same integration then update the same record*/
                            $platform_products = $productResponse = $primaryIdQuery = DB::table('platform_product')->select('id', 'api_product_id', 'product_sync_status', 'linked_id')->where(['user_integration_id' => $userIntegrationId, 'platform_id' => $this->platformId])->whereIn('api_product_id', $mainArr);

                            if ($fullEvent == "product.modified" || $fullEvent == "product.created" || $fullEvent == "product.modified.price-modified") {
                                $api_product_ids = $productResponse->pluck('api_product_id')->toArray();

                                $platforms = DB::table('platform_accounts')->join('platform_lookup', 'platform_accounts.platform_id', '=', 'platform_lookup.id')
                                    ->select('platform_lookup.platform_id')
                                    ->whereIn('platform_accounts.id', [$integration->selected_sc_account_id, $integration->selected_dc_account_id])
                                    ->pluck('platform_lookup.platform_id')->toArray();

                                if (count($platforms) == 2 && (isset(Config::get('apisettings.PlatformCheckProductTwoWaySyncExistInBP')[$platforms[0]]) || isset(Config::get('apisettings.PlatformCheckProductTwoWaySyncExistInBP')[$platforms[1]]))) {
                                    $processedProducts = $platform_products->where('product_sync_status', '!=', 'Pending')->get();
                                    //loop back issue solve
                                    $product_object_id = $this->helper->getObjectId('product');

                                    $update_product_pending = [];
                                    $linked_product = [];
                                    $map_linked_product = [];
                                    foreach ($processedProducts as $processedProduct) {
                                        if ($processedProduct->linked_id) {
                                            $linked_product[] = $processedProduct->linked_id;
                                            $map_linked_product[$processedProduct->linked_id] = $processedProduct->id;
                                        } else {
                                            $update_product_pending[] = $processedProduct->id;
                                        }
                                    }

                                    if (count($linked_product)) {
                                        $sync_logs = SyncLog::select('id', 'record_id', 'sync_status', 'updated_at')->whereIn('record_id', $linked_product)->where('platform_object_id', $product_object_id)->get();
                                        foreach ($sync_logs as $sync_log) {
                                            if ($sync_log->sync_status == 'success' && (strtotime(date('Y-m-d H:i:s')) - strtotime($sync_log->updated_at)) > 10) {
                                                $update_product_pending[] = $map_linked_product[$sync_log->record_id];
                                            } elseif ($sync_log->sync_status != 'success') {
                                                $update_product_pending[] = $map_linked_product[$sync_log->record_id];
                                            }
                                        }
                                    }

                                    if (count($update_product_pending)) {
                                        DB::table('platform_product')->whereIn('id', $update_product_pending)
                                            ->update(['product_sync_status' => 'Pending']);
                                    }
                                } else {
                                    $primaryIdPluck = $primaryIdQuery->where('product_sync_status', '!=', 'Pending')->pluck('id')->toArray();

                                    // $processedProducts = $platform_products->where('product_sync_status', '!=', 'Pending')->count();
                                    // if ($processedProducts) {
                                    //     $platform_products->where('product_sync_status', '!=', 'Pending')
                                    //         ->update(['product_sync_status' => 'Pending']);
                                    // }
                                    if (count($primaryIdPluck)) {
                                        //update product if only product_sync_status is not equal to "Pending"  based on primary id
                                        PlatformProduct::whereIn('id', $primaryIdPluck)->update(['product_sync_status' => 'Pending']);
                                    }
                                }

                                $diffArray = array_diff($mainArr, $api_product_ids);
                                if (!empty($diffArray)) {
                                    foreach ($diffArray as $product_id) {
                                        $platform_product = PlatformProduct::select('id')->where(['user_integration_id' => $userIntegrationId, 'platform_id' => $this->platformId, 'api_product_id' => (string)$product_id])->first();
                                        if (is_null($platform_product)) {
                                            $this->mobj->makeInsert('platform_product', ['user_id' => $integration->user_id, 'platform_id' => $this->platformId, 'user_integration_id' => $userIntegrationId, 'api_product_id' => $product_id, 'product_sync_status' => 'Pending']);
                                        }
                                    }
                                }
                            } elseif ($fullEvent == "product.destroyed") {
                                $platform_product_ids = $productResponse->pluck('id')->toArray();

                                /* For destroyed webhook */
                                $productResponse->update(['product_sync_status' => "Inactive", 'is_deleted' => 1]);

                                PlatformProduct::where(['user_integration_id' => $userIntegrationId])->whereIn('linked_id', $platform_product_ids)
                                    ->update(['linked_id' => 0]);
                                // $platform_product_ids=implode(',',$platform_product_ids);
                                // $sql="UPDATE IGNORE platform_product SET linked_id = 0 where user_integration_id={$userIntegrationId} and linked_id in ({$platform_product_ids})";
                                // DB::update($sql);

                            }
                        }
                    }
                }
            }
        } catch (\Exception $e) {
            Log::error($userIntegrationId . " -> BrightPearlApiController -> ReceiveProductWebhook -> " . $e->getLine() . " -> " . $e->getMessage());
        }

        return true;
    }

    /* Update Duplicate Product as deleted=1 where linked id is null or 0 */
    private function updateDuplicateProduct($primary_ids)
    {
        if ($primary_ids) {
            PlatformProduct::whereIn('id', $primary_ids)->update(['is_deleted' => 1]);
        }
    }
    /* Process product info And Get Info update in Table */
    public function ProcessProductInformation($userId = null, $userIntegrationId = null, $sync_status = "Pending", $selected_IdentMapVal, $ufound = null, $supplierFilter, $primarySupplierIdFilter, $syncBundleKitChildProductQuantity = false)
    {
        $return_response = false;
        try {
            $limit = 200;

            if (!isset($ufound)) {
                $ufound = $this->mobj->getPlatformAccountByUserIntegration($userIntegrationId, $this->platformId, ['access_token', 'platform_id', 'id', 'user_id', 'api_domain', 'account_name', 'app_id', 'app_secret']);
            }

            $customObjectId = $this->helper->getObjectId('product');
            if ($ufound && $this->platformId) {
                if (isset($ufound->platform_id) && $ufound->platform_id == $this->platformId) {
                    $list = $this->mobj->getResultByConditions('platform_product', [
                        //'user_id' => $userId,
                        'user_integration_id' => $userIntegrationId,
                        'platform_id' => $this->platformId,
                        'product_sync_status' => $sync_status,
                        'is_deleted' => 0,
                    ], ['api_product_id'], ['api_product_id' => 'asc'], $limit);
                    $list = $list->pluck("api_product_id")->toArray();

                    if (!empty($list) && count($list) > 0) {
                        $uarray = array_unique($list);
                        sort($uarray); // sort array in asc order
                        $ProductIDs = implode(",", $uarray);
                        $response = $this->GetProduct($ProductIDs, $userIntegrationId);

                        if (!empty($response) && isset($response['response']) && is_array($response['response'])) {
                            $products = $response['response'];
                            $this->CreateOrUpdateProductAndDetailsInDB($userId, $userIntegrationId, $ufound, $products, $supplierFilter, $primarySupplierIdFilter, $selected_IdentMapVal, $syncBundleKitChildProductQuantity, $customObjectId);
                            $return_response = true;
                        } else {
                            $error = $this->bp->handleResponseError($response);
                            $return_response = isset($error) ? $error : "API Error";
                        }
                    }
                }
            }
        } catch (\Exception $e) {
            Log::error($e->getMessage());
            $return_response = $e->getMessage();
        }
        return $return_response;
    }

    public function CreateOrUpdateProductAndDetailsInDB($userId, $userIntegrationId, $ufound, $products, $supplierFilter, $primarySupplierIdFilter, $selected_IdentMapVal, $syncBundleKitChildProductQuantity, $customObjectId, $destination_platform_id = NULL, $source_platform_id = NULL)
    {

        $priceArr = [];
        $allow_save = 1;
        foreach ($products as $val) {

            //check status of p
            $status = null;
            if (isset($val['status'])) {
                $status = $val['status'];
                //Filter Brightpearl Live product if added in config
                if (isset(\Config::get('apisettings.acceptLiveProductsInBp')[$destination_platform_id]) or isset(\Config::get('apisettings.acceptLiveProductsInBp')[$source_platform_id])) {
                    if ($status != 'LIVE') {
                        continue;
                    }
                }
            }

            $productSynStatus = "Ready";
            $id = $val['id'];
            //if supplierFilter True
            if ($supplierFilter) {
                //if primary supplier Id exist & == selected supplierId
                if (isset($val['primarySupplierId']) && ($val['primarySupplierId'] == $primarySupplierIdFilter)) {
                    $allow_save = 1;
                } else {
                    $allow_save = 0;
                }
            }
            if ($allow_save) {
                /* if sku is empty we can not accept - 20-01-2021 -awadhesh */
                if (isset($val['identity']['sku']) && !empty($val['identity']['sku']) && !is_null($val['identity']['sku'])) {
                    $sku = $name = $isbn = $ean = $upc = $mpn = $barcode = $brandId =  $description = $stock_track = $width = $weight = $volume = $lenght = $height = $categories_ids = $taxcode_ids = $product_type_ids = $primarySupplierId = $shortdescription = null;
                    $taxable = 0;
                    $variations = false;
                    if (!empty($val['identity']['sku'])) {
                        $sku = $val['identity']['sku'];
                    }
                    if (!empty($val['salesChannels'][0]['productName'])) {
                        $name = $val['salesChannels'][0]['productName'];
                    }

                    if (isset($val['identity']['isbn'])) {
                        $isbn = $val['identity']['isbn'];
                    }
                    if (isset($val['identity']['ean'])) {
                        $ean = $val['identity']['ean'];
                    }
                    if (isset($val['identity']['upc'])) {
                        $upc = $val['identity']['upc'];
                    }
                    if (isset($val['identity']['mpn'])) {
                        $mpn = $val['identity']['mpn'];
                    }
                    if (isset($val['identity']['barcode'])) {
                        $barcode = $val['identity']['barcode'];
                    }

                    if (isset($val['brandId'])) {
                        $brandId = $val['brandId'];
                    }


                    if (isset($val['salesChannels'][0]['description']['text'])) {
                        $description = $val['salesChannels'][0]['description']['text'];
                    }
                    /* if bundle products have child's */

                    if (isset($val['composition']['bundle'])) {
                        $bundle = $val['composition']['bundle'];
                    }

                    if (isset($val['stock']['stockTracked'])) {
                        $stock_track = $val['stock']['stockTracked'];
                    }
                    if (isset($val['stock']['dimensions']['width'])) {
                        $width = $val['stock']['dimensions']['width']; //width
                    }
                    if (isset($val['stock']['dimensions']['length'])) {
                        $lenght = $val['stock']['dimensions']['length']; //lenght

                    }
                    if (isset($val['stock']['weight']['magnitude'])) {
                        $weight = $val['stock']['weight']['magnitude']; //weight

                    }

                    if (isset($val['stock']['dimensions']['volume'])) {
                        $volume = $val['stock']['dimensions']['volume']; //volume

                    }
                    if (isset($val['stock']['dimensions']['height'])) {
                        $height = $val['stock']['dimensions']['height']; //height

                    }

                    if (isset($val['salesChannels'][0]['categories'])) {
                        //categories_ids
                        foreach ($val['salesChannels'][0]['categories'] as $key => $category) {
                            if (isset($category['categoryCode'])) {
                                $categories_ids .= $category['categoryCode'] . ',';
                            }
                        }
                        $categories_ids = rtrim($categories_ids, ",");
                    }
                    if (isset($val['financialDetails']['taxCode'])) {
                        $taxcode_ids = $val['financialDetails']['taxCode']['id']; //categories_ids

                    }
                    if (isset($val['financialDetails']['taxable'])) {
                        $taxable = $val['financialDetails']['taxable'] ? 1 : 0;
                    }
                    if (isset($val['productTypeId'])) {
                        $product_type_ids = $val['productTypeId']; //product_type_ids

                    }
                    if (isset($val['primarySupplierId'])) {
                        $primarySupplierId = $val['primarySupplierId'];
                    }
                    if (isset($val['salesChannels'][0]['shortDescription']['text'])) {
                        $shortdescription = $val['salesChannels'][0]['shortDescription']['text'];
                    }
                    if (!empty($val['variations'])) {
                        $variations = true;
                    }

                    $fields = array(
                        'user_id' => $userId,
                        'user_integration_id' => $userIntegrationId,
                        'platform_id' => $ufound->platform_id,
                        'api_product_id' => $id,
                        'sku' => $sku,
                        'product_name' => $name,
                        'isbn' => $isbn,
                        'ean' => $ean,
                        'upc' => $upc,
                        'mpn' => $mpn,
                        'barcode' => $barcode,
                        'product_status' => $status,
                        'brand_id' => $brandId,
                        'description' => $description,
                        'bundle' => $bundle,
                        'stock_track' => $stock_track,
                        'product_sync_status' => $productSynStatus,
                        'weight' => $weight,
                        'category_id' => $categories_ids,
                        'has_variations' => $variations,
                        'api_group_id' => @$val['productGroupId'],
                        'is_deleted' => 0,
                    );
                    $AttributeData = [
                        'lenght' => $lenght,
                        'height' => $height,
                        'width' => $width,
                        'volume' => $volume,
                        'taxcode_ids' => $taxcode_ids,
                        'taxable' => $taxable,
                        'product_type_ids' => $product_type_ids,
                        'primary_supplier_id' => $primarySupplierId,
                        'shortdescription' => $shortdescription,
                    ];

                    $findProduct = PlatformProduct::where([
                        //'user_id' => $userId,
                        'user_integration_id' => $userIntegrationId,
                        'platform_id' => $ufound->platform_id,
                        'api_product_id' => (string)$id,
                    ])->get();

                    $platform_product_id = null;
                    if (count($findProduct) > 0) {
                        $duplicateProducts = [];
                        foreach ($findProduct as $key => $item) {
                            if ($key == 0) {
                                $this->mobj->makeUpdate('platform_product', $fields, [
                                    'id' => $item->id,
                                ]);
                                $platform_product_id = $item->id;
                            } else {
                                $duplicateProducts[] = $item->id;
                            }
                        }

                        /* Set Duplicate as Deleted */
                        $this->updateDuplicateProduct($duplicateProducts);

                        $AttributeData['platform_product_id'] = $platform_product_id;
                        $this->CreateOrUpdateProductAttributes($platform_product_id, $AttributeData);
                        $priceArr[$platform_product_id] = $id;
                    } else {
                        $productLinkId = $this->mobj->makeInsertGetId('platform_product', $fields);
                        $AttributeData['platform_product_id'] = $productLinkId;
                        $this->CreateOrUpdateProductAttributes($productLinkId, $AttributeData);
                        $priceArr[$productLinkId] = $id;
                        $platform_product_id = $productLinkId;
                    }
                    /* If we have child products */
                    if ($bundle) {
                        $this->StoreBundleChildProducts($platform_product_id, $userId, $userIntegrationId, $val, $syncBundleKitChildProductQuantity);
                    }
                    /* ---------end we have child products--------- */
                    /* This is for product options */
                    if ($platform_product_id) {
                        if (!empty($val['variations']) && is_array($val['variations'])) {
                            /* Set Status=0 */
                            PlatformProductOption::where('platform_product_id', $platform_product_id)->update(['status' => 0]);
                            foreach ($val['variations'] as $option) {
                                $options = ['api_option_id' => $option['optionId'], 'api_option_value_id' => $option['optionValueId'], 'option_name' => $option['optionName'], 'option_value' => $option['optionValue'], 'platform_product_id' => $platform_product_id, 'status' => 1];

                                $optionFind = PlatformProductOption::select('id')->where([['api_option_id', '=', $option['optionId']], ['api_option_value_id', '=', $option['optionValueId']], ['platform_product_id', '=', $platform_product_id]])->first();
                                if ($optionFind) {
                                    $optionFind->option_value = $option['optionValue'];
                                    $optionFind->option_name = $option['optionName'];
                                    $optionFind->status = 1;
                                    $optionFind->save();
                                } else {
                                    PlatformProductOption::insert($options);
                                }
                            }
                        }
                    }
                    /* ---product options--- */
                    $this->mobj->makeUpdate('platform_custom_field_values', ['status' => 0], ['record_id' => $platform_product_id, 'user_integration_id' => $userIntegrationId, 'platform_id' => $this->platformId]);
                    /** save product custom fields */
                    if (!empty($val['customFields']) && isset($val['customFields'])) {
                        $this->GetStoreProductCustomFields($platform_product_id, $userId, $userIntegrationId, $val, $customObjectId);
                    }
                } else {
                    PlatformProduct::where(['user_integration_id' => $userIntegrationId, 'platform_id' => $this->platformId, 'api_product_id' => (string)$id])
                        ->update(['product_sync_status' => 'Inactive']);
                }
            }
        } //END of foreach
        if (!empty($priceArr)) {

            //test log
            // Storage::disk('local')->append('chunk_product_for_inventory.txt', 'Bp-Webhook  CreateOrUpdateProductPriceList call ' . ' time: ' . date('Y-m-d H:i:s') . ' selected_IdentMapVal - ' . $selected_IdentMapVal . ' priceArr - ' . json_encode($priceArr));

            /* Insert update logic for product price */
            $this->CreateOrUpdateProductPriceList($userId, $userIntegrationId, $priceArr, "pricelist", $ufound, $selected_IdentMapVal);
        }
    }

    /* Receive Order shipment webhook from BP */
    public function ReceiveShipmentWebhook(Request $request, $userIntegrationId)
    {
        $mainArr = $InsertData = [];
        if ($request->isMethod('post')) {
            $body = $request->getContent();
            /* Decode Json */
            $result_data = json_decode($body, 1);

            //remove this later and destroy webhook //esb-live integration ids
            if (isset($result_data['fullEvent']) && $result_data['fullEvent'] == 'goods-out-note.created' && in_array($userIntegrationId, [91, 98, 129, 101, 204, 234, 172, 159, 160, 161, 162, 164, 165, 166, 167, 168, 169, 170, 171, 173, 186, 187, 233, 232, 251, 256, 275, 293, 422, 427, 484, 464, 465, 466, 467, 468, 471, 472, 473, 470, 476, 478, 479, 480, 482])) {
                return true;
            }

            $EventIDs = ["GET_SHIPMENT", "GET_GOODSOUTNOTECREATED", "GET_TRANSFEREDGOODSOUTNOTE", "GET_TRANSFEREDGOODSOUTNOTECREATED", "GET_SHIPMENTONCREATE"];
            $integration = $this->map->getUserIntegrationDetailsById($userIntegrationId, self::$myPlatform);
            if ($integration) {
                $user_workflow_rule = DB::table('user_workflow_rule as ur')->select('e.event_id', 'pld.platform_id')
                    ->join('platform_workflow_rule as pr', 'ur.platform_workflow_rule_id', '=', 'pr.id')
                    ->join('platform_events as e', 'pr.source_event_id', '=', 'e.id')
                    ->join('platform_events as pde', 'pr.destination_event_id', '=', 'pde.id')
                    ->join('platform_lookup as pld', 'pld.id', '=', 'pde.platform_id')
                    ->where('pr.status', 1)
                    ->where('ur.status', 1)
                    ->where('e.status', 1)
                    // ->where('ur.user_id', $integration->user_id)
                    ->where('ur.user_integration_id', $userIntegrationId);

                if ($user_workflow_rule->count() > 0) {
                    $user_work_flow = $user_workflow_rule->pluck('e.event_id')->toArray();
                    /* Check whether shipment is ON or OFF */
                    if ($user_work_flow) {
                        /* Check whether product sync or order is ON or OFF */
                        $findEvents = array_intersect($EventIDs, $user_work_flow);

                        // Log::info( "ReceiveShipmentWebhook: findEvents: ".json_encode( $findEvents ) );
                        if (!empty($findEvents)) {

                            $destination_platform_ids = $user_workflow_rule->pluck('pld.platform_id')->toArray();

                            $eventAndDestinationArr = [];
                            for ($i = 0; $i < count($user_work_flow); $i++) {
                                $eventAndDestinationArr[$user_work_flow[$i]] = $destination_platform_ids[$i];
                            }

                            $DestinationPlatformName = null;
                            foreach ($findEvents as $e) {
                                if (array_key_exists($e, $eventAndDestinationArr)) {
                                    $DestinationPlatformName = $eventAndDestinationArr[$e];
                                    break;
                                }
                            }

                            $body = $request->getContent();
                            /* Decode Json */
                            $result_data = json_decode($body, 1);

                            // Log::info( "ReceiveShipmentWebhook: result_data: ".json_encode( $result_data ) );
                            if ($result_data && isset($result_data['id'])) {
                                $arr = explode(",", $result_data['id']);
                                $mainArr = $InsertData = [];
                                foreach ($arr as $val) {
                                    if (strpos($val, "-")) {
                                        $break_dash = explode("-", $val);
                                        $range_ids = range($break_dash[0], $break_dash[1]);
                                        foreach ($range_ids as $key) {
                                            array_push($mainArr, (string)$key);
                                        }
                                    } else {
                                        array_push($mainArr, (string)$val);
                                    }
                                }

                                if ($result_data['fullEvent'] == 'goods-out-note.destroyed') {
                                    $mainArr = array_unique($mainArr);
                                    if (!empty($mainArr)) {
                                        $mainArr = array_unique($mainArr);
                                        /* Get order ids for deleted shipment */
                                        $query = PlatformOrderShipment::whereIn('shipment_id', $mainArr)->whereNotNull('platform_order_id')->where(['platform_id' => $this->platformId, 'user_integration_id' => $userIntegrationId]);

                                        $platform_order_ids = $query->select('platform_order_id')->pluck('platform_order_id')->toArray();
                                        if ($platform_order_ids) {
                                            //Update Deleted Shipment Row
                                            $ready_platform_order_shipment_ids = PlatformOrderShipment::select('id')->whereIn('platform_order_id', $platform_order_ids)->pluck('id')->toArray();
                                            if (count($ready_platform_order_shipment_ids)) {
                                                DB::table('platform_order_shipments')->whereIn('id', $ready_platform_order_shipment_ids)->update(['sync_status' => 'Ready']);
                                            }

                                            PlatformOrder::whereIn('id', $platform_order_ids)
                                                ->update(['is_deleted' => 1, 'sync_status' => 'Ready', 'shipment_status' => 'Ready', 'order_updated_at' => date('Y-m-d H:i:s'), 'api_updated_at' => date('Y-m-d H:i:s')]);
                                        }

                                        //delete unprocessed shipment
                                        $delete_platform_order_shipment_ids = DB::table('platform_order_shipments')->select('id')->whereIn('shipment_id', $mainArr)->whereNull('platform_order_id')->where(['platform_id' => $this->platformId, 'user_integration_id' => $userIntegrationId, 'sync_status' => 'Pending'])->pluck('id')->toArray();
                                        if (count($delete_platform_order_shipment_ids)) {
                                            DB::table('platform_order_shipments')->whereIn('id', $delete_platform_order_shipment_ids)->delete();
                                        }
                                    }
                                } elseif ($result_data['fullEvent'] == 'drop-ship-note.modified.shipped') {
                                    $mainArr = array_unique($mainArr);
                                    if (!empty($mainArr)) {
                                        $mainArr = array_unique($mainArr);
                                        /* Set Delete if duplicate ids found for same integration*/
                                        DB::table('platform_order_shipments')->where(['user_integration_id' => $userIntegrationId, 'platform_id' => $this->platformId, 'type' => 'DropShipment'])->whereIn('shipment_id', $mainArr)->delete();

                                        /* Prepare data for insert */
                                        foreach ($mainArr as $drop_ship_id) {
                                            array_push($InsertData, ['user_id' => $integration->user_id, 'platform_id' => $this->platformId, 'user_integration_id' => $userIntegrationId, 'shipment_id' => $drop_ship_id, 'sync_status' => 'Pending', 'type' => 'DropShipment']);
                                        }

                                        if (!empty($InsertData)) {
                                            $this->mobj->makeInsert('platform_order_shipments', $InsertData);
                                        }
                                    }
                                } else {

                                    //log shipment update webhook
                                    // Log::channel('webhook')->info("ShipOrderDetailBP - userID=" . $integration->user_id . "  UserIntegration=" . $userIntegrationId . " Created Date : " . date('Y-m-d H:i:s') . " Json=" . json_encode($result_data). " DestinationPlatformName" . $DestinationPlatformName);

                                    $mainArr = array_unique($mainArr);
                                    if (!empty($mainArr)) {
                                        $mainArr = array_unique($mainArr);
                                        if (isset(\Config::get('apisettings.preventDelAndAllowUpdateOnShipmentWhInBP')[$DestinationPlatformName])) {
                                            $existShipmentIds = [];
                                            $findshipments = PlatformOrderShipment::where(['platform_id' => $this->platformId, 'user_integration_id' => $userIntegrationId])->whereIn('shipment_id', $mainArr)->get();
                                            foreach ($findshipments as $findshipment) {
                                                $existShipmentIds[] = $findshipment->shipment_id;
                                                if ($findshipment->webhook_event != $result_data['fullEvent']) {
                                                    $findshipment->webhook_event = $result_data['fullEvent'];
                                                    $findshipment->sync_status = 'Pending';
                                                    $findshipment->save();
                                                }
                                            }

                                            if (!empty($existShipmentIds)) {
                                                $mainArr = array_diff($mainArr, $existShipmentIds); //returns the values in the first array that are not present in second array
                                            }

                                            $InsertData =  $this->prepareShipmentDataToInsert($mainArr, $integration->user_id, $this->platformId, $userIntegrationId, $result_data['fullEvent']);
                                        } else {
                                            $delete_platform_order_shipment_ids = DB::table('platform_order_shipments')->select('id')->whereIn('shipment_id', $mainArr)->where(['user_integration_id' => $userIntegrationId, 'platform_id' => $this->platformId])->pluck('id')->toArray();
                                            /* Set Delete if duplicate ids found for same integration*/
                                            if (count($delete_platform_order_shipment_ids)) {
                                                DB::table('platform_order_shipments')->whereIn('id', $delete_platform_order_shipment_ids)->delete();
                                            }

                                            $InsertData = $this->prepareShipmentDataToInsert($mainArr, $integration->user_id, $this->platformId, $userIntegrationId, $result_data['fullEvent']);
                                        }

                                        if (!empty($InsertData)) {
                                            $this->mobj->makeInsert('platform_order_shipments', $InsertData);
                                        }
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return true;
    }

    /* Prepare data for insert */
    public function prepareShipmentDataToInsert(array $mainArr, $user_id, $platformId, $userIntegrationId, $webhook_event)
    {
        $InsertData = [];
        foreach ($mainArr as $goods_id) {
            array_push($InsertData, ['user_id' => $user_id, 'platform_id' => $platformId, 'user_integration_id' => $userIntegrationId, 'shipment_id' => $goods_id, 'sync_status' => "Pending", 'webhook_event' => $webhook_event]);
        }
        return $InsertData;
    }

    /* Find Order ID in order table */
    public function FindOrderID($OrderID = null, $userId = null, $PlatformId = null, $userIntegrationId = null)
    {
        $platform_order = $this->mobj->getFirstResultByConditions('platform_order', ['api_order_id' => (string)$OrderID, 'user_integration_id' => $userIntegrationId, 'platform_id' => $PlatformId], ['id']);
        if ($platform_order) {
            return $platform_order->id;
        }

        return false;
    }

    /* Process Shipment Good Note ID And Get Info update in Table */
    public function ProcessShipmentInfomation($userId = null, $SourcePlatformName = null, $userIntegrationId = null, $sync_status = "Pending")
    {
        $return_response = false;
        try {

            $ufound = $this->mobj->getPlatformAccountByUserIntegration($userIntegrationId, $this->platformId, ['access_token', 'platform_id', 'id', 'user_id', 'api_domain', 'account_name', 'app_id', 'app_secret']);
            if ($ufound && $this->platformId) {
                $SourcePlatformId = $this->helper->getPlatformIdByName($SourcePlatformName);
                $SourceUfound = $this->mobj->getPlatformAccountByUserIntegration($userIntegrationId, $SourcePlatformId, ['app_id', 'platform_id', 'id']);

                if (isset($ufound->platform_id) && $ufound->platform_id == $this->platformId && isset($SourceUfound->platform_id)) {
                    $list = $this->mobj->getResultByConditions('platform_order_shipments', ['platform_id' => $this->platformId, 'user_integration_id' => $userIntegrationId, 'sync_status' => $sync_status], ['shipment_id'], ['shipment_id' => 'asc'], 200);
                    $list = $list->pluck("shipment_id")->toArray();
                    if (!empty($list) && count($list) > 0) {
                        $GoodsIDs = implode(",", $list);
                        $response = $this->GetGoodsOutNotes($GoodsIDs, $userIntegrationId);
                        if (!empty($response) && isset($response['response']) && is_array($response['response'])) {
                            $deleteRow = $orderIds = [];
                            foreach ($response['response'] as $key => $value) {
                                $OrderPrimary = $this->FindOrderID($value['orderId'], $userId, $SourceUfound->platform_id, $userIntegrationId);
                                if ($OrderPrimary) {
                                    /* Store Order IDs for checking order status */
                                    array_push($orderIds, $value['orderId']);
                                    $List = [
                                        'user_id' => $userId,
                                        'platform_id' => $ufound->platform_id,
                                        'user_integration_id' => $userIntegrationId,
                                        'sync_status' => "Ready",
                                        'order_id' => $value['orderId'],
                                        'warehouse_id' => $value['warehouseId'],
                                        'shipment_transfer' => $value['transfer'],
                                        'shipment_status' => serialize($value['status']),
                                        'boxes' => isset($value['shipping']['boxes']) ? $value['shipping']['boxes'] : null,
                                        'tracking_info' => isset($value['shipping']['reference']) ? $value['shipping']['reference'] : null,
                                        'shipping_method' => isset($value['shipping']['shippingMethodId']) ? $value['shipping']['shippingMethodId'] : null,

                                        'created_on' => $value['createdOn'],
                                        'weight' => isset($value['shipping']['weight']) ? $value['shipping']['weight'] : null,
                                        'created_by' => $value['createdBy'],
                                        'tracking_url' => isset($value['labelUri']) ? $value['labelUri'] : null,
                                        'platform_order_id' => $OrderPrimary,
                                    ];
                                    $this->mobj->makeUpdate('platform_order_shipments', $List, ['user_id' => $userId, 'platform_id' => $this->platformId, 'user_integration_id' => $userIntegrationId, 'shipment_id' => $key, 'sync_status' => "Pending"]);

                                    $lastId = $this->mobj->getFirstResultByConditions('platform_order_shipments', ['shipment_id' => (string)$key, 'platform_id' => $this->platformId, 'user_integration_id' => $userIntegrationId], ['id']);
                                    if ($lastId) {
                                        $Items = [];
                                        foreach ($value['orderRows'] as $ikey => $ivalue) {
                                            foreach ($ivalue as $isubkey => $isubvalue) {
                                                array_push($Items, [
                                                    'platform_order_shipment_id' => $lastId->id,
                                                    'row_id' => $ikey,
                                                    'product_id' => $isubvalue['productId'],
                                                    'location_id' => $isubvalue['locationId'],
                                                    'quantity' => $isubvalue['quantity'],
                                                    'user_batch_reference' => isset($isubvalue['userBatchReference']) ? $isubvalue['userBatchReference'] : null,
                                                ]);
                                            }
                                        }

                                        if (!empty($Items)) {
                                            $this->mobj->makeInsert('platform_order_shipment_lines', $Items);
                                        }
                                    }
                                } else {
                                    /* push unused record shipment id */
                                    array_push($deleteRow, (string)$key);
                                }
                            }

                            if (!empty($deleteRow)) {

                                /* Delete unused record if not match with order */
                                DB::table('platform_order_shipments')->where([['platform_id', '=', $this->platformId], ['user_integration_id', '=', $userIntegrationId]])->where(
                                    function ($query) {
                                        return $query
                                            ->where('sync_status', '=', "Pending")
                                            ->orWhere('sync_status', '=', "Failed");
                                    }
                                )->whereIn('shipment_id', $deleteRow)->delete();
                            }
                            if (!empty($orderIds)) {
                                $orderIds = array_unique($orderIds);
                                sort($orderIds);
                                $orderIds = implode(",", $orderIds);
                                sleep(1);
                                $response = $this->GetOrderDetails($orderIds, $userIntegrationId, $ufound);
                                // Log::channel('webhook')->info("ShipOrderDetailBP - userID=" . $userId . "  UserIntegration=" . $userIntegrationId . " Created Date : " . date('Y-m-d H:i:s') . " Json=" . json_encode($response));
                                if (isset($response['response']) && !empty($response['response']) && is_array($response['response'])) {
                                    foreach ($response['response'] as $key => $value) {
                                        if ($value['shippingStatusCode'] == "ASS") {
                                            $status = "Ready";
                                        } else if ($value['shippingStatusCode'] == "SPS") {
                                            $status = "Partial";
                                        } else if ($value['shippingStatusCode'] == "SNS") {
                                            $status = "Pending";
                                        } else if ($value['shippingStatusCode'] == "NST") {
                                            $status = "Failed";
                                        }
                                        $this->mobj->makeUpdate('platform_order', ['shipment_status' => $status], [
                                            'user_id' => $userId,
                                            'platform_id' => $SourceUfound->platform_id,
                                            'user_integration_id' => $userIntegrationId,
                                            'order_type' => "SO",
                                            'api_order_id' => $value['id'],
                                        ]);
                                    }
                                }
                            }
                            $return_response = true;
                        } else {
                            $error = $this->bp->handleResponseError($response);
                            $return_response = isset($error) ? $error : "API Error";
                        }
                    }
                }
            }
        } catch (\Exception $e) {
            Log::error($e->getMessage());
            $return_response = $e->getMessage();
        }
        return $return_response;
    }

    /* Receive inventory webhook handling from BP */
    public function ReceiveInventoryWebhook(Request $request, $userIntegrationId)
    {
        // Log::info( "ReceiveInventoryWebhook: ".$request." userIntegrationId: ".$userIntegrationId );
        try {

            $this->mobj->AddMemory();
            if ($request->isMethod('post')) {
                $mainArr = [];
                $integration = $this->mobj->getFirstResultByConditions('user_integrations', ['id' => $userIntegrationId], ['user_id', 'platform_integration_id', 'selected_sc_account_id', 'selected_dc_account_id'], []);
                if ($integration) {
                    $body = $request->getContent();
                    /*Decode Json*/
                    $result_data = json_decode($body, 1);
                    // Log::info( "ReceiveInventoryWebhook: findEvents: ".json_encode( $result_data ) );
                    if ($result_data && isset($result_data['id'])) {
                        if (strpos($result_data['id'], ',') !== false) {
                            $arrdata = explode(',', $result_data['id']); // multiple ids
                            foreach ($arrdata as $rowid) {
                                if (strpos($rowid, '-') !== false) {
                                    $arr = explode('-', $rowid); // multiple ids
                                    for ($i = $arr[0]; $i <= $arr[1]; $i++) {
                                        $mainArr[] = (string)$i;
                                    }
                                } else {
                                    $mainArr[] = (string)$rowid;
                                }
                            }
                        } elseif (strpos($result_data['id'], '-') !== false) {
                            $arr = explode('-', $result_data['id']); // multiple ids
                            for ($i = $arr[0]; $i <= $arr[1]; $i++) {
                                $mainArr[] = $i;
                            }
                        } else {
                            $mainArr = array($result_data['id']);
                        }

                        $api_product_ids = array_unique($mainArr);
                        if (!empty($api_product_ids)) {
                            $products = PlatformProduct::where(['user_integration_id' => $userIntegrationId, 'platform_id' => $this->platformId])->whereIn('api_product_id', $api_product_ids)->where('inventory_sync_status', '!=', 'Pending')->pluck('id')->toArray();
                            if (count($products)) {
                                PlatformProduct::whereIn('id', $products)->update(['inventory_sync_status' => 'Pending']);
                            }
                        }
                    }
                }
            }
        } catch (\Exception $e) {
            Log::error($userIntegrationId . " -> BrightPearlApiController -> ReceiveInventoryWebhook -> " . $e->getLine() . " -> " . $e->getMessage());
        }

        return true;
    }

    /* Receive order status update webhook to get invoice data from BP. Invoice details comes inside order info, no separate api is available to get sales invoice */
    public function ReceiveInvoiceWebhook(Request $request, $userIntegrationId)
    {
        // Log::info( "ReceiveInvoiceWebhook: ".$request." userIntegrationId: ".$userIntegrationId );
        $this->mobj->AddMemory();
        if ($request->isMethod('post')) {
            $mainArr = [];
            $EventID = "GET_INVOICE";
            $user_work_flow = [];

            $integration = $this->map->getUserIntegrationDetailsById($userIntegrationId, self::$myPlatform);
            if ($integration) {
                $userId = $integration->user_id;
                $selectFields = ['e.event_id', 'ur.user_id', 'ur.status'];
                $user_work_flow = $this->map->getUserIntegWorkFlow($userIntegrationId, $EventID, $selectFields, self::$myPlatform);

                if (isset($user_work_flow[$EventID])) {
                    $userId = $user_work_flow[$EventID]['user_id'];
                    // print_r($user_work_flow);exit;
                    // Log::info( "ReceiveInvoiceWebhook Total Q:".$q->count() );
                    if ($user_work_flow[$EventID]['status'] == 1) {
                        /* Check whether shipment is ON or OFF */
                        // Log::info( "ReceiveInvoiceWebhook: INArr: ".in_array($EventID, $user_work_flow) );
                        $body = $request->getContent();
                        /* Decode Json */
                        $result_data = json_decode($body, 1);
                        // Log::channel('webhook')->info("Integration -" . $userIntegrationId . " Order Invoice Status Changed Webhook Created Date : " . date('Y-m-d H:i:s', strtotime($result_data['raisedOn'])) . " Hook Range: " . $result_data['id']);
                        // Log::info( "ReceiveInvoiceWebhook: result Data: ".json_encode( $result_data ) );
                        if ($result_data && isset($result_data['id'])) {
                            if (strpos(@$result_data['id'], ',') !== false) {
                                $arrdata = explode(',', @$result_data['id']); // multiple ids
                                foreach ($arrdata as $rowid) {
                                    if (strpos($rowid, '-') !== false) {
                                        $arr = explode('-', $rowid); // multiple ids
                                        for ($i = $arr[0]; $i <= $arr[1]; $i++) {
                                            $mainArr[] = $i;
                                        }
                                    } else {
                                        $mainArr[] = $rowid;
                                    }
                                }
                            } elseif (strpos(@$result_data['id'], '-') !== false) {
                                $arr = explode('-', @$result_data['id']); // multiple ids
                                for ($i = $arr[0]; $i <= $arr[1]; $i++) {
                                    $mainArr[] = $i;
                                }
                            } else {
                                $mainArr = array(@$result_data['id']);
                            }

                            if (!empty($mainArr)) {
                                $mainArr = array_unique($mainArr);
                                foreach ($mainArr as $order_id) {
                                    $find = $this->mobj->getFirstResultByConditions('platform_order', ['platform_id' => $this->platformId, 'user_integration_id' => $userIntegrationId, 'api_order_id' => (string)$order_id, 'invoice_sync_status' => null], ['id']);
                                    if ($find) {
                                        $updateData = ['user_id' => $userId, 'platform_id' => $this->platformId, 'user_integration_id' => $userIntegrationId, 'invoice_sync_status' => 'Pending'];
                                        $this->mobj->makeUpdate('platform_order', $updateData, ['id' => $find->id]);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }
        return true;
    }

    /* Get Sales Order Modified By Order Status */
    public function GetSalesOrderModifiedByOrderStatus($userId = null, $userIntegrationId = null, $is_initial_sync)
    {
        $result = true;
        try {
            //initial sync flag is only for webhook setup (One time)
            if ($is_initial_sync == 1) {
                $attempt = 1; //custom flag to decide weather create or delete webhook, $attempt = 1 is create webhook
                $this->CreateOrDeleteWebhook($userId, $userIntegrationId, ['modified_order_status'], $attempt);
                return $result;
            }

            return $result;
        } catch (\Exception $e) {
            Log::error($userIntegrationId . " -> BrightPearlApiController -> GetSalesOrderModifiedByOrderStatus -> " . $e->getLine() . " -> " . $e->getMessage());

            return $e->getMessage();
        }
    }

    /* Get sales invoice */
    public function GetPendingInvoice($userId = null, $userIntegrationId = null, $is_initial_sync)
    {
        $result = true;
        try {
            //initial sync flag is only for webhook setup (One time)
            if ($is_initial_sync == 1) {
                $attempt = 1; //custom flag to decide weather create or delete webhook
                $this->CreateOrDeleteWebhook($userId, $userIntegrationId, ['invoice'], $attempt);
                return $result;
            }

            $ufound = $this->mobj->getPlatformAccountByUserIntegration($userIntegrationId, $this->platformId, ['access_token', 'platform_id', 'id', 'user_id', 'api_domain', 'account_name', 'app_id', 'app_secret']);
            if ($ufound && $this->platformId) {
                if (isset($ufound->platform_id) && $ufound->platform_id == $this->platformId) {
                    //////////////////////////////////////get sales order for invoice details
                    $pending_invoice = $this->mobj->getResultByConditions('platform_order', ['platform_id' => $ufound->platform_id, 'user_integration_id' => $userIntegrationId, 'invoice_sync_status' => 'Pending'], ['api_order_id'], ['created_at' => 'asc'], 50);

                    $order_array = json_decode(json_encode($pending_invoice), true);
                    // dd($order_array);
                    // break;

                    $order_ids = [];
                    if (!empty($order_array)) {
                        foreach ($order_array as $prods) {
                            $order_ids[] = $prods['api_order_id'];
                        }

                        $unique = array_unique($order_ids);
                        sort($unique);
                        $oids = implode(',', $unique);

                        //get sales order using multiple ids
                        $response = $this->bp->GetOrder($ufound, $url = null, $oids, 'normal');
                        if ($order = json_decode($response->getBody(), true)) {
                            if (isset($order['response']) && (is_array($order['response']))) {
                                foreach ($order['response'] as $o => $od) {
                                    //process only if order status is invoice, we can use closed_at for invoiced confirmation in bp
                                    if ($od['orderStatus']['name'] == 'Invoiced' && !empty($od['invoices'][0]['invoiceReference'])) {
                                        $find = $this->mobj->getFirstResultByConditions('platform_order', ['platform_id' => $ufound->platform_id, 'user_integration_id' => $userIntegrationId, 'api_order_id' => (string)$od['id']], ['id']);

                                        //since bp does not return much data related to invoice so we will pick additional data from order to insert in invoice table.
                                        $insertData = [
                                            'user_id' => $userId,
                                            'platform_id' => $this->platformId,
                                            'user_integration_id' => $userIntegrationId,
                                            'platform_order_id' => isset($find->id) ? $find->id : 0,
                                            'invoice_code' => @$od['invoices'][0]['invoiceReference'],
                                            'ref_number' => $od['id'],
                                            'order_doc_number' => $od['id'],
                                            'due_date' => @$od['invoices']['dueDate'],
                                            'invoice_date' => $od['closedOn'],
                                            'total_amt' => $od['totalValue']['total'],
                                            'sync_status' => 'Ready', //this is individual status for one to many invoice case, main status is in order table
                                        ];

                                        $findInvoice = $this->mobj->getFirstResultByConditions('platform_invoice', ['platform_id' => $ufound->platform_id, 'user_integration_id' => $userIntegrationId, 'invoice_code' => $od['invoices'][0]['invoiceReference']], ['id']);
                                        if (!$findInvoice) {
                                            $this->mobj->makeInsert('platform_invoice', $insertData);
                                        }

                                        $get_account_config = $this->mobj->getFirstResultByConditions('platform_account_addtional_information', ['account_id' => $ufound->id, 'user_integration_id' => $userIntegrationId], ['account_discount_nominal_code', 'account_shipping_nominal_code', 'account_giftcard_nominal_code']);

                                        //store order line items
                                        $platform_order = $this->mobj->getFirstResultByConditions('platform_order', ['platform_id' => $ufound->platform_id, 'user_integration_id' => $userIntegrationId, 'api_order_id' => (string)$od['id']], ['id']);

                                        if (count($od['orderRows']) > 0) {
                                            foreach ($od['orderRows'] as $or => $lineitem) {
                                                $arr_order_line = array();
                                                $arr_order_line['platform_order_id'] = $platform_order->id;
                                                $arr_order_line['api_order_line_id'] = $or;
                                                $arr_order_line['product_name'] = @$lineitem['productName'];
                                                $arr_order_line['api_product_id'] = @$lineitem['productId'];
                                                $arr_order_line['sku'] = @$lineitem['productSku'];
                                                $arr_order_line['qty'] = @$lineitem['quantity']['magnitude'];
                                                $arr_order_line['total'] = @$lineitem['rowValue']['rowNet']['value'] + @$lineitem['rowValue']['rowTax']['value'];
                                                $arr_order_line['subtotal'] = @$lineitem['rowValue']['rowNet']['value'];
                                                $arr_order_line['subtotal_tax'] = @$lineitem['rowValue']['rowTax']['value'];

                                                if (isset($arr_order_line['nominalCode'])) {
                                                    if ($get_account_config->account_shipping_nominal_code == $arr_order_line['nominalCode']) {
                                                        $arr_order_line['row_type'] = 'SHIPPING';
                                                    } elseif ($get_account_config->account_discount_nominal_code == $arr_order_line['nominalCode']) {
                                                        $arr_order_line['row_type'] = 'DISCOUNT';
                                                    } else {
                                                        $arr_order_line['row_type'] = 'ITEM';
                                                    }
                                                } else {
                                                    $arr_order_line['row_type'] = 'ITEM';
                                                }

                                                $ct_order_line = $this->mobj->getCountsByConditions('platform_order_line', ['platform_order_id' => $platform_order->id, 'api_order_line_id' => $or]);

                                                if ($ct_order_line > 0) {
                                                    $this->mobj->makeUpdate('platform_order_line', $arr_order_line, ['platform_order_id' => $platform_order->id, 'api_order_line_id' => $or]);
                                                } else {
                                                    $this->mobj->makeInsert('platform_order_line', $arr_order_line);
                                                }
                                            }
                                        }

                                        //store invoice information and update order status = invoiced, invoice sync status to Ready
                                        //old code
                                        // DB::table('platform_order')->where(['platform_id' => $ufound->platform_id, 'user_integration_id' => $userIntegrationId])->where('api_order_id', $od['id'])->update(['order_status' => 'Invoiced', 'invoice_sync_status' => 'Ready', 'currency' => $od['currency']['orderCurrencyCode']]);

                                        $find_order =  DB::table('platform_order')->where(['platform_id' => $ufound->platform_id, 'user_integration_id' => $userIntegrationId, 'api_order_id' => (string)$od['id']])->select('id')->first();
                                        if ($find_order) {
                                            DB::table('platform_order')->where('id', $find_order->id)->update(['order_status' => 'Invoiced', 'invoice_sync_status' => 'Ready', 'currency' => $od['currency']['orderCurrencyCode']]);
                                        }
                                    } else {

                                        //if status not invoiced then set back to null so that it can update in next webhook

                                        //old code
                                        // DB::table('platform_order')->where(['platform_id' => $ufound->platform_id, 'user_integration_id' => $userIntegrationId])
                                        // ->where('api_order_id', $od['id'])->update(['invoice_sync_status' => null]);

                                        $find_order =  DB::table('platform_order')->where(['platform_id' => $ufound->platform_id, 'user_integration_id' => $userIntegrationId, 'api_order_id' => (string)$od['id']])->select('id')->first();
                                        if ($find_order) {
                                            DB::table('platform_order')->where('id', $find_order->id)->update(['invoice_sync_status' => null]);
                                        }
                                    }
                                }
                            } else {
                                $error = $this->bp->handleResponseError($order);
                                $result = isset($error) ? $error : "API Error";
                            }
                        }
                    } else {
                        $result = true;
                    }

                    return $result;
                }
            }
        } catch (\Exception $e) {
            Log::error($e->getMessage());
            // echo $e->getMessage();
            return $e->getMessage();
        }
    }

    /* Get Update Product Table with condition for inventory */
    public function GetUpdateProductForInventory($userId = null, $userIntegrationId, $case = null, $productIds = [], $backup_call_set_ready_product_ids = [])
    {
        $return = false;
        $q = PlatformProduct::where(['user_integration_id' => $userIntegrationId, 'platform_id' => $this->platformId]);
        if ($case == "SET-INACTIVE") {
            $q->where('bundle', 0)->where('stock_track', 0)->where('is_deleted', 0);
            $updateStatus = 'Inactive';
        } else if ($case == "GET-WRONG-PRODUCT-COUNT") {
            return $q->where('bundle', 0)->where('stock_track', 0)->where('is_deleted', 0)->where('inventory_sync_status', '!=', 'Inactive')->count();
            $updateStatus = 'Inactive';
        } else if ($case == "SET-INACTIVE-BY-ID") {
            $q->whereIn('id', $productIds);
            $updateStatus = 'Inactive';
        } else if ($case == "SET-READY") {
            if (count($backup_call_set_ready_product_ids)) { // check product ids to READY
                $q2 = $q->whereIn('id', $backup_call_set_ready_product_ids);
                $updateStatus = 'Ready';
                $q2->update(['inventory_sync_status' => $updateStatus, 'updated_at' => date("Y-m-d H:i:s")]); //make Ready also updating updated_at for next call
            }
            if (count($productIds)) {
                $q->whereIn('id', $productIds)->update(['updated_at' => date("Y-m-d H:i:s")]); //updating updated_at for next call
            }
            return true;
        } else if ($case == "SET-PENDING") {
            $q->whereIn('id', $productIds);
            $updateStatus = 'Pending';
        } else if ($case == "SET-PENDING-BY-ID") {
            $q->whereIn('id', $productIds);
            $updateStatus = 'Pending';
        } else if ($case == "PENDING-COUNT") {
            $q->where('is_deleted', 0)->where('inventory_sync_status', "Pending");
            $return = true;
        } else if ($case == "RETURN-PRIMARY-IDS") {
            return $q->where('is_deleted', 0)->whereIn('api_product_id', $productIds)->pluck('id')->toArray();
        }
        if (isset($case) || !empty($productIds)) {
            if ($return) {
                return $q->count();
            } else {
                return $q->update(['inventory_sync_status' => $updateStatus]);
            }
        }
    }

    /* GET INVENTORY/STOCK BY BUNDLE/NON-BUNDLE PRODUCTS */
    public function GetProductInventory($userId = null, $userIntegrationId = null, $is_initial_sync = 0, $ufound, $type = "NON-BUNDLE", $is_backup_call = 0)
    {
        $result = false;
        /* Manipulate counter as per initial sync value */
        $non_bundle_counter = 2;
        $bundle_counter = 20;
        if ($is_initial_sync == 1) {
            /* when initial sync is set=1 */
            $non_bundle_counter = 5; //for non bundle product
            $bundle_counter = 30; //for bundle product
        }
        if ($type == "NON-BUNDLE") {
            /*--GET NON-BUNDLE PRODUCT API CALL--*/
            $SetBundlePendingInDB = false; //This variable is use for Get update bundle products as pending in DB
            $icounter = 1;
            do {
                if ($icounter <= $non_bundle_counter) {
                    $result = true;
                    if ($is_backup_call == 1) {
                        $process_products =  DB::table('platform_product')->where(['platform_id' => $this->platformId, 'user_integration_id' => $userIntegrationId, 'bundle' => 0, 'stock_track' => 1, 'is_deleted' => 0])
                            ->whereIn('inventory_sync_status', ['Synced', 'Failed'])
                            ->select('api_product_id', 'parent_product_id', 'id')
                            ->orderBy('updated_at', 'asc')->limit(50)->get();
                    } else {
                        $process_products = $this->mobj->getResultByConditions('platform_product', ['platform_id' => $this->platformId, 'user_integration_id' => $userIntegrationId, 'inventory_sync_status' => 'Pending', 'bundle' => 0, 'stock_track' => 1, 'is_deleted' => 0], ['api_product_id', 'parent_product_id', 'id'], ['updated_at' => 'asc'], 50);
                    }


                    $product_array = json_decode(json_encode($process_products), true);

                    $product_ids = $bundle_product_ids = $memo = [];

                    if (!empty($product_array)) {
                        foreach ($product_array as $prods) {

                            if ($prods['parent_product_id'] != null && $prods['parent_product_id'] != "0" && !empty($prods['parent_product_id'])) {
                                $SetBundlePendingInDB = true;
                                $arr = explode(",", $prods['parent_product_id']);
                                $bundle_product_ids = array_merge($bundle_product_ids, $arr);
                            }
                            if (isset($product_ids[$prods['api_product_id']])) {

                                $product_ids[$prods['api_product_id']] = $product_ids[$prods['api_product_id']];
                            } else {
                                if (isset($prods['id'])) {
                                    $product_ids[$prods['api_product_id']] = $prods['id'];
                                }
                            }
                        }

                        $product_key_ids = array_keys($product_ids);

                        $unique = array_unique($product_key_ids);
                        sort($unique);
                        $pids = implode(',', $unique);

                        if ($is_initial_sync == 0) {
                            if ($SetBundlePendingInDB) { //If we found bundle items ids to update in DB as Pending
                                if (!empty($bundle_product_ids)) {
                                    $unique = array_unique($bundle_product_ids);
                                    $unique = array_filter($unique);
                                    $this->GetUpdateProductForInventory($userId, $userIntegrationId, "SET-PENDING-BY-ID", $unique);
                                }
                            }
                        }

                        //get inventory api calls
                        $is_bundle_item = 0;
                        $response = $this->bp->GetInventory($ufound, $pids, $is_bundle_item);

                        if ($product = json_decode($response->getBody(), true)) {
                            if (isset($product['response']) && is_array($product['response'])) {

                                //store onhand qty to inventory table
                                $product_ids_to_be_updated = $this->StoreUpdateInventoryData($userId, $userIntegrationId, $product, $product_ids, $is_backup_call);

                                $filter_values = array_filter($product_ids_to_be_updated['product_ids']);
                                $backup_call_set_ready_product_ids = array_filter($product_ids_to_be_updated['backup_call_set_ready_product_ids']);
                                $this->GetUpdateProductForInventory($userId, $userIntegrationId, "SET-READY", $filter_values, $backup_call_set_ready_product_ids);
                            } else {

                                $error = $this->bp->handleResponseError($product);
                                $result = isset($error) ? $error : "API Error";
                            }
                        }

                        if ($is_initial_sync == 0) {
                            if (!$SetBundlePendingInDB) { //If we found bundle items ids to update in DB as Pending

                                //If no parent_product_id set found
                                $bundle_data = $this->bp->GetBundleInfo($ufound, $pids);
                                if ($bproduct = json_decode($bundle_data->getBody(), true)) {
                                    if (isset($bproduct['response']) && is_array($bproduct['response'])) {
                                        $parent_bundle_product_ids = [];
                                        foreach ($bproduct['response'] as $bundle) {
                                            foreach ($bundle['bundles'] as $bid) {
                                                if (isset($bid['id'])) {
                                                    $parent_bundle_product_ids[] = $bid['id'];
                                                }
                                            }
                                        }
                                        if (!empty($parent_bundle_product_ids)) {
                                            $parent_bundle_product_ids = $this->GetUpdateProductForInventory($userId, $userIntegrationId, "RETURN-PRIMARY-IDS", $parent_bundle_product_ids); //This method return primary ids of  product table based on api_product_id
                                            $this->GetUpdateProductForInventory($userId, $userIntegrationId, "SET-PENDING", $parent_bundle_product_ids);
                                        }
                                    } else {

                                        $error = $this->bp->handleResponseError($bproduct);
                                        $result = isset($error) ? $error : "API Error";
                                    }
                                }
                            }
                        }
                    } else {
                        $result = true;
                        break;
                    }

                    $icounter++;
                } else {
                    //manual error msg to keep initial sync flag to 0 and process further data in next crons until its not completed
                    $result = 'Get pending inventory chunks processing';
                    break;
                }
            } while (!empty($product_array));
            /*--END GET NON-BUNDLE PRODUCT API CALL--*/
        } else if ($type == "BUNDLE") {
            /*--BUNDLE PRODUCT API CALL--*/
            $jcounter = 1;
            do {

                if ($jcounter <= $bundle_counter) {
                    $result = true;
                    //Call One By One Product because of bundle product

                    if ($is_backup_call == 1) {
                        $process_products =  DB::table('platform_product')->where(['platform_id' => $this->platformId, 'user_integration_id' => $userIntegrationId, 'bundle' => 1, 'is_deleted' => 0])
                            ->whereIn('inventory_sync_status', ['Synced', 'Failed'])
                            ->select('api_product_id', 'id')
                            ->orderBy('updated_at', 'asc')->limit(1)->get();
                    } else {
                        $process_products = $this->mobj->getResultByConditions('platform_product', ['platform_id' => $ufound->platform_id, 'user_integration_id' => $userIntegrationId, 'inventory_sync_status' => 'Pending', 'bundle' => 1, 'is_deleted' => 0], ['api_product_id', 'id'], ['updated_at' => 'asc'], 1);
                    }


                    $product_array = json_decode(json_encode($process_products), true);

                    $product_ids = [];
                    if (!empty($product_array)) {
                        foreach ($product_array as $prods) {
                            if (isset($product_ids[$prods['api_product_id']])) {
                                $product_ids[$prods['api_product_id']] = $product_ids[$prods['api_product_id']];
                            } else {
                                $product_ids[$prods['api_product_id']] = $prods['id'];
                            }
                        }

                        $product_key_ids = array_keys($product_ids);
                        $unique = array_unique($product_key_ids);
                        sort($unique);
                        $pids = implode(',', $unique);

                        //get inventory api calls
                        $is_bundle_item = 1;
                        $response = $this->bp->GetInventory($ufound, $pids, $is_bundle_item);

                        if ($product = json_decode($response->getBody(), true)) {

                            if (isset($product['response']) && is_array($product['response'])) {

                                //store onhand qty to db
                                $product_ids_to_be_updated = $this->StoreUpdateInventoryData($userId, $userIntegrationId, $product, $product_ids, $is_backup_call);

                                $backup_call_set_ready_product_ids = $product_ids_to_be_updated['backup_call_set_ready_product_ids'];
                                $this->GetUpdateProductForInventory($userId, $userIntegrationId, "SET-READY", $product_ids_to_be_updated['product_ids'], $backup_call_set_ready_product_ids);
                            } else {
                                if (isset($product['errors']) && isset($product['errors'][0]['code']) && $product['errors'][0]['code'] == "WHSC-097") { // if inventory not found for bundle and not non track product //"None of the bundled products are stock tracked."
                                    if (isset($product_ids[$pids])) {

                                        $this->GetUpdateProductForInventory($userId, $userIntegrationId, "SET-INACTIVE-BY-ID", [$product_ids[$pids]]);
                                    }
                                } else {

                                    $error = $this->bp->handleResponseError($product);
                                    $result = isset($error) ? $error : "API Error";
                                }
                            }
                        }
                        // }
                    } else {
                        $result = true;
                        break;
                    }

                    $jcounter++;
                } else {
                    //manual error msg to keep initial sync flag to 0 and process further data in next crons until its not completed
                    $result = 'Get pending inventory chunks processing';
                    break;
                }

                // break;
            } while (!empty($product_array));

            /*--END BUNDLE PRODUCT API CALL--*/
        }
        return $result;
    }

    /* Get Webhooks to Set Pending Inventory */
    public function SetPendingInventoryStatus($user_id = null, $user_integration_id = null, $is_initial_sync = 0)
    {
        $this->mobj->AddMemory();
        try {
            if (!$is_initial_sync) {
                $account = $this->mobj->getPlatformAccountByUserIntegration($user_integration_id, $this->platformId, ['access_token', 'platform_id', 'id', 'user_id', 'api_domain', 'account_name', 'app_id', 'app_secret', 'user_id']);
                if ($account && $this->platformId) {
                    $webhook_values = PlatformReceiveWebhook::select('id', 'webhook_data', 'status')->where(['user_integration_id' => $user_integration_id, 'platform_id' => $this->platformId, 'type' => 'INVENTORY', 'status' => 0])->get();
                    if ($webhook_values) {
                        foreach ($webhook_values as $key => $data) {
                            $unserialize_array = unserialize($data->webhook_data);
                            $product_ids = "'" . implode("','", $unserialize_array) . "'";
                            if ($product_ids) {
                                PlatformProduct::where(['user_integration_id' => $user_integration_id, 'platform_id' => $this->platformId])->where('inventory_sync_status', '!=', 'Pending')->whereIn('api_product_id' . [$product_ids])->update(['inventory_sync_status' => 'Pending']);
                            }
                            $data->status = 1;
                            $data->save();
                        }
                    }
                    return true;
                }
            }
        } catch (\Exception $e) {
            Log::error("here" . $e->getMessage());
            return $e->getMessage();
        }
    }

    /* function for store bundle and non bundle inventory data */
    public function GetPendingInventory($userId = null, $userIntegrationId = null, $is_initial_sync = 0, $is_backup_call = 0, $source_platform_name = null, $destination_platform_name = null)
    {
        $this->mobj->AddMemory();
        try {

            $accessControl = app('App\Utility\PlatformConfig')->accessControl($source_platform_name, $destination_platform_name);
            if ($accessControl['status'] == true) {
                $accesResult =  app('App\Http\Controllers\Brightpearl\BrightpearlServices')->accessParentIngData($userIntegrationId, $userId, 'PRODUCT', $source_platform_name, $this->platformId, $accessControl['action']);
                if ($accesResult == true || !is_bool($accesResult)) {
                    return $accesResult;
                }
            }

            if ($is_initial_sync == 1) {
                $attempt = 1; //custom flag to decide weather create or delete webhook
                $this->CreateOrDeleteWebhook($userId, $userIntegrationId, ['inventory'], $attempt);
            }
            $account = $this->mobj->getPlatformAccountByUserIntegration($userIntegrationId, $this->platformId, ['access_token', 'platform_id', 'id', 'user_id', 'api_domain', 'account_name', 'app_id', 'app_secret', 'user_id']);
            if ($account && $this->platformId) {
                /* SET Inactive Product If any non-bundle product is set as non-track product and then this will not come for api call */
                if ($this->GetUpdateProductForInventory($userId, $userIntegrationId, "GET-WRONG-PRODUCT-COUNT") > 0) {
                    $this->GetUpdateProductForInventory($userId, $userIntegrationId, "SET-INACTIVE");
                }
                /*--GET NON-BUNDLE PRODUCT API CALL--*/
                $result = $this->GetProductInventory($userId, $userIntegrationId, $is_initial_sync, $account, "NON-BUNDLE", $is_backup_call);
                /*--BUNDLE PRODUCT API CALL--*/
                $result = $this->GetProductInventory($userId, $userIntegrationId, $is_initial_sync, $account, "BUNDLE", $is_backup_call);

                /*  if ($is_initial_sync == 0) { //uncomment this method if you have any issue for bundle product inventory
                    //search bundle manually updated inventory with date range. time diff value getting from event cron run time.
                    $this->ProcessManuallyUpdatedBundleInventory($userId, $userIntegrationId);
                    } */

                //return true if all pending data converted to Ready
                $pending_inventory_count = $this->GetUpdateProductForInventory($userId, $userIntegrationId, "PENDING-COUNT");
                if ($pending_inventory_count == 0) {
                    $result = true;
                }
                return $result;
            }
        } catch (\Exception $e) {
            Log::error("here" . $e->getMessage());
            return $e->getMessage();
        }
    }

    public function ProcessManuallyUpdatedBundleInventory($userId = null, $userIntegrationId = null)
    {
        try {
            $result = false;
            $ufound = $this->mobj->getPlatformAccountByUserIntegration($userIntegrationId, $this->platformId, ['access_token', 'platform_id', 'id', 'user_id', 'api_domain', 'account_name', 'app_id', 'app_secret']);

            if ($ufound && $this->platformId) {
                if (isset($ufound->platform_id) && $ufound->platform_id == $this->platformId) {

                    $gettimezone = $this->mobj->getFirstResultByConditions('platform_account_addtional_information', ['account_id' => $ufound->id, 'user_integration_id' => $userIntegrationId], ['account_timezone']);

                    if ($gettimezone) {
                        date_default_timezone_set($gettimezone->account_timezone);
                    }

                    $get_cron_time = $this->mobj->getFirstResultByConditions('platform_events', ['platform_id' => $ufound->platform_id, 'event_id' => 'GET_INVENTORY'], ['run_in_min']);
                    if ($get_cron_time) {
                        $time_diff = $get_cron_time->run_in_min;
                    } else {
                        $time_diff = 10; //minute
                    }

                    $currentTime = time();
                    $hoursToSubtract = 1;
                    $timeToSubtract = ($hoursToSubtract * $time_diff * 60);
                    $timeInPast = $currentTime - $timeToSubtract;

                    $to_date = date('c', $currentTime);
                    $from_date = date('c', $timeInPast);
                    $getproductdata = $this->bp->SearchBundleInventoryUpdate($ufound, $url = null, $from_date, $to_date);
                    // dd($product = json_decode($getproductdata->getBody()));
                    $items_ids = array();
                    // if($getproductdata->getStatusCode() == 200 || $getproductdata->getStatusCode() == 201){
                    if ($product = json_decode($getproductdata->getBody(), true)) {
                        if (isset($product['response']['results']) && is_array($product['response']['results'])) {

                            foreach ($product['response']['results'] as $val) {
                                if (isset($val[0])) {
                                    $items_ids[] = $val[0];
                                }
                            }
                            $result = true;
                        } else {

                            // $res = json_decode($getproductdata->getBody(), true);
                            // $result = (isset($res['response'])) ? $res['response'] : json_encode($res);
                            $error = $this->bp->handleResponseError($product);
                            $result = isset($error) ? $error : "API Error";
                        }
                    }
                    // }

                    // dd($items_ids);

                    if (!empty($items_ids)) {
                        $this->GetUpdateProductForInventory($userId, $userIntegrationId, "SET-PENDING", $items_ids);
                    }
                }

                return $result;
            }
        } catch (\Exception $e) {
            Log::error($e->getMessage());
            return $e->getMessage();
        }
    }

    /* Store Inventory In Table  */
    public function StoreUpdateInventoryData($userId = null, $userIntegrationId = null, $product = [], $product_primary_ids = [], $is_backup_call = 0)
    {

        $inventory = $product['response'];
        $product_ids = [];   //array of product ids to update updated_at
        $backup_call_set_ready_product_ids = []; //array of product ids to set Ready
        try {
            foreach ($inventory as $pr => $inv) {
                $set_ready = 1;
                $allow_in_product_ids = 1; //flag to maintain product ids either on $product_ids[] or $backup_call_set_ready_product_ids[]
                $product_id = $pr;
                $push = [];
                if (isset($product_primary_ids[$product_id])) { //find product primary id by api_product_id
                    $primary_id = $product_primary_ids[$product_id];
                    if (!empty($inv['warehouses'])) {

                        foreach ($inv['warehouses'] as $wrh => $wrow) {
                            $warehouse_id = $wrh;
                            $push[] = $warehouse_id;

                            $find = PlatformProductInventory::select('id', 'user_id', 'user_integration_id', 'platform_id', 'platform_product_id', 'api_product_id', 'api_warehouse_id', 'quantity', 'created_at', 'updated_at')->where([
                                // ['user_id', '=', $userId],
                                ['platform_id', '=', $this->platformId],
                                ['user_integration_id', '=', $userIntegrationId],
                                ['api_warehouse_id', '=', $warehouse_id],
                            ])->where(function ($query) use ($primary_id, $product_id) {
                                $query->where('platform_product_id', '=', $primary_id)
                                    ->orWhere('api_product_id', '=', (string)$product_id);
                            })->first();

                            if ($find) {
                                $old_quantity = $find->quantity;
                                $set_ready = ($old_quantity !=  @$wrow['onHand']) ? 1 : 0; //check quantity is changed or not
                                if ($set_ready || $is_backup_call == 0) {
                                    $backup_call_set_ready_product_ids[] = $primary_id; // push product id for set Ready
                                    $allow_in_product_ids = 0; //false flag to disallow products in $product_ids[]

                                    /* Update Attributes */
                                    $find->api_product_id = $product_id;
                                    $find->platform_product_id = $product_primary_ids[$product_id];
                                    $find->api_warehouse_id = $warehouse_id;
                                    $find->quantity = @$wrow['onHand'];
                                    $find->created_at = date('Y-m-d H:i:s');
                                    $find->updated_at = date('Y-m-d H:i:s');
                                    $find->save();
                                }
                            } else {
                                $InsertData = [
                                    'user_id' => $userId,
                                    'platform_id' => $this->platformId,
                                    'user_integration_id' => $userIntegrationId,
                                    'api_product_id' => $product_id,
                                    'platform_product_id' => $product_primary_ids[$product_id],
                                    'api_warehouse_id' => $warehouse_id,
                                    'quantity' => @$wrow['onHand'],
                                    'created_at' => date('Y-m-d H:i:s'),
                                    'updated_at' => date('Y-m-d H:i:s'),
                                ];

                                PlatformProductInventory::insert($InsertData);
                                //$this->mobj->makeInsert('platform_product_inventory', $InsertData);
                                $backup_call_set_ready_product_ids[] = $primary_id; // push product id for set Ready
                                $allow_in_product_ids = 0; //false flag to disallow products in $product_ids[]
                            }

                            if ($allow_in_product_ids) {
                                $product_ids[] = $primary_id; // push product id if old qty and @$wrow['onHand'] qty is equal to update updated_at
                            }
                        }

                        //if (!empty($push)) {
                        /* Update qty=0 if warehouse not found */
                        PlatformProductInventory::where([['platform_id', '=', $this->platformId], ['user_integration_id', '=', $userIntegrationId]])->where(function ($query) use ($primary_id, $product_id) {
                            $query->where('platform_product_id', '=', $primary_id)
                                ->orWhere('api_product_id', '=', (string)$product_id);
                        })->whereNotIn('api_warehouse_id', $push)->update(['quantity' => 0]);
                        //}
                    } else {

                        //if warehouses empty then set inventory to 0 and warehouse id will be null
                        $find = PlatformProductInventory::select('id', 'user_id', 'user_integration_id', 'platform_id', 'platform_product_id', 'api_product_id', 'api_warehouse_id', 'quantity', 'created_at', 'updated_at')->where([
                            //['user_id', '=', $userId],
                            ['platform_id', '=', $this->platformId],
                            ['user_integration_id', '=', $userIntegrationId],
                        ])->where(function ($query) use ($primary_id, $product_id) {
                            $query->where('platform_product_id', '=', $primary_id)
                                ->orWhere('api_product_id', '=', (string)$product_id);
                        })->pluck('id')->toArray();

                        if (!empty($find)) {
                            PlatformProductInventory::whereIn('id', $find)->update(["quantity" => 0]);
                        } else {
                            $InsertData = [
                                'user_id' => $userId,
                                'platform_id' => $this->platformId,
                                'user_integration_id' => $userIntegrationId,
                                'api_product_id' => $product_id,
                                'platform_product_id' => $product_primary_ids[$product_id],
                                'quantity' => 0,
                                'created_at' => date('Y-m-d H:i:s'),
                                'updated_at' => date('Y-m-d H:i:s'),
                            ];

                            PlatformProductInventory::insert($InsertData);
                        }

                        $backup_call_set_ready_product_ids[] = $primary_id; //push product id to SET-READY

                    }
                }
            }

            return array('product_ids' => array_unique($product_ids), 'error' => '', 'backup_call_set_ready_product_ids' => array_unique($backup_call_set_ready_product_ids));
        } catch (\Exception $e) {
            // Log::error('GET BP INVENTORY ERROR - Userid >>' . $userId . ' user int >>' . $userIntegrationId . ' Msg >>' . $e->getMessage());
            return array('product_ids' => array_unique($product_ids), 'error' => $e->getMessage(), 'backup_call_set_ready_product_ids' => array_unique($backup_call_set_ready_product_ids));
        }
    }

    /* Initial BP Auth */
    public function InitiateBPAuth(Request $request)
    {
        $platform = 'brightpearl';
        return view("pages.apiauth.brightpearl_auth", compact('platform'));
    }

    // function to check whether a BrightPearl account is already in use or not.
    public function checkExistingConnectedAc($platform_id, $account_name)
    {
        $obj_existing = $this->mobj->getFirstResultByConditions('platform_accounts', ['platform_id' => $platform_id, 'account_name' => $account_name], ['user_id']);
        if ($obj_existing) {
            return true;
        } else {
            return false;
        }
    }

    /* Redirect BP Auth */
    public function ConnectBPOauth(Request $request)
    {
        if ($request->isMethod('post')) {
            $validator = Validator::make($request->all(), [
                'account_id' => 'required',
            ]);

            if ($this->mobj->checkHtmlTags($request->all())) {
                return back()->with('error', Lang::get('tags.validate'));
            }

            if ($validator->fails()) {
                return back()->withErrors($validator);
            } else {
                $account_id = trim($request->account_id);
                $user_data = Auth::user();
                $userID = $user_data->id;
                $isAllowed = $this->mobj->getFirstResultByConditions('platform_api_app', ['platform_id' => $this->platformId], ['app_ref', 'client_id', 'client_secret']);
                // to check whether given account is already in use or not.
                $checkExistingAc = $this->checkExistingConnectedAc($this->platformId, $account_id);
                if ($checkExistingAc) {
                    return back()->with('error', 'Given details are already in use, Try with other details.');
                }
                if ($isAllowed && $this->platformId) {
                    $client_id = $this->mobj->encrypt_decrypt($isAllowed->client_id, 'decrypt');
                    $client_secret = $this->mobj->encrypt_decrypt($isAllowed->client_secret, 'decrypt');
                    $redirect_url = $this->mobj->makeUrlHttpsForProd(url('/RedirectHandlerBp'));
                    $state_i = $userID . "-" . $account_id;
                    if (!$account_id) {
                        return back()->with('error', 'Account not found.');
                        //$this->mobj->ThrowErrorAndExit("Account id not found</h3><br>");
                    }
                    if ($client_id && $client_secret) {
                        $url = Config::get('apiconfig.BpOauthUrl') . "/authorize/" . $account_id . "?response_type=code&client_id=" . $client_id . "&redirect_uri=" . $redirect_url . "&state=" . $state_i;

                        return redirect($url);
                    } else {
                        Session::put('auth_msg', 'App config not found');
                        echo '<script>window.close();</script>';
                    }
                } else {
                    $this->mobj->ThrowErrorAndExit('Authentication Error<br><a href="javascript:window.close();"</a>');
                }
            }
        }
    }

    /* Get Token */
    public function RedirectHandlerBp(Request $request)
    {
        if (isset($request->code)) {

            $record = $this->mobj->getFirstResultByConditions('platform_api_app', ['platform_id' => $this->platformId], ['app_ref', 'client_id', 'client_secret']);
            if ($record && $this->platformId) {
                $code = $request->code;
                $client_id = $this->mobj->encrypt_decrypt($record->client_id, 'decrypt');
                $client_secret = $this->mobj->encrypt_decrypt($record->client_secret, 'decrypt');
                $redirect_url = $this->mobj->makeUrlHttpsForProd(url('/RedirectHandlerBp'));
                $state = $request->state;
                $state_arr = explode('-', $state);
                if (isset($state_arr[0]) && isset($state_arr[1])) {
                    // Valid request
                    $userId = $state_arr[0];
                    $AccountCode = $state_arr[1]; // Account Code
                    if (isset($state_arr[0]) && isset($state_arr[1])) {
                        $curl_post_data = array(
                            'client_id' => $client_id,
                            'client_secret' => $client_secret,
                            'code' => $code,
                            'grant_type' => 'authorization_code',
                            'redirect_uri' => $redirect_url,
                        );
                        $service_url = Config::get('apiconfig.BpOauthUrl') . '/token/' . $AccountCode;

                        $headers = ['Content-Type' => 'application/x-www-form-urlencoded'];

                        $response = $this->mobj->makeRequest('POST', $service_url, $curl_post_data, $headers, 'http');
                        if (json_decode($response->getBody(), true)) {
                            if ($decode_val = json_decode($response->getBody(), true)) {
                                if (isset($decode_val['access_token'])) {
                                    $OauthData = [
                                        'access_token' => $this->mobj->encrypt_decrypt($decode_val['access_token']),
                                        'refresh_token' => $this->mobj->encrypt_decrypt($decode_val['refresh_token']),
                                        'installation_instance_id' => $decode_val['installation_instance_id'],
                                        'api_domain' => $decode_val['api_domain'],
                                        'token_type' => $decode_val['token_type'],
                                        'expires_in' => $decode_val['expires_in'],
                                        'account_name' => $AccountCode,
                                        'user_id' => $userId,
                                        'app_id' => $this->mobj->encrypt_decrypt($client_id), //app_reference
                                        'app_secret' => $record->app_ref, //dev_reference
                                        'platform_id' => $this->platformId,
                                        'token_refresh_time' => time(),
                                    ];

                                    $ufound = DB::table('platform_accounts')->where([
                                        'user_id' => $userId,
                                        'platform_id' => $this->platformId, 'account_name' => $AccountCode,
                                    ])->first();

                                    if ($ufound) {
                                        $res_n = DB::table('platform_accounts')->where('id', '=', $ufound->id)->update(
                                            $OauthData
                                        );
                                    } else {
                                        $OauthData['user_id'] = $userId;
                                        DB::table('platform_accounts')->insert(
                                            $OauthData
                                        );
                                    }
                                } else { // When Token not found
                                    // $ufound = DB::table('platform_accounts')->where([
                                    //     'user_id'=>$userId,
                                    //     'platform_id'=>$this->platformId, 'account_name'=>$AccountCode
                                    // ])->first();
                                    // if ($ufound) {
                                    //     $res_n = DB::table('platform_accounts')->where('id', '=', $ufound->id)->update([
                                    //         'access_token'=>null,
                                    //     ]);
                                    // }
                                    if (isset($decode_val['error_description'])) {
                                        $error = $decode_val['error_description'];
                                    } else {
                                        $error = "Something went wrong in your account";
                                    }
                                    echo '<script>alert("' . $error . '");window.close();</script>';
                                }
                            }
                            echo '<script>window.close();</script>';
                        } else {
                            $this->mobj->ThrowErrorAndExit('Authentication Error<br><a href="javascript:window.close();"</a>');
                        }
                    }
                }
            }
        } else { // When code not received from BP
            $this->mobj->ThrowErrorAndExit('Authentication Error<br><a href="javascript:window.close();"</a>');
        }
    }

    /* Refresh token */
    public function RefreshTokens($ID)
    {
        date_default_timezone_set('UTC');

        $return_response = false;
        $account = [];

        try {
            $findApp = $this->mobj->getFirstResultByConditions('platform_api_app', ['platform_id' => $this->platformId]);
            if ($findApp && $this->platformId) {
                $accDetail = $this->mobj->getFirstResultByConditions('platform_accounts', ['id' => $ID], ['id', 'user_id', 'platform_id', 'token_refresh_time', 'refresh_token', 'expires_in', 'account_name', 'app_id', 'app_secret', 'env_type', 'access_token']);
                if ($accDetail) {
                    $curl_post_data = ['client_id' => $this->mobj->encrypt_decrypt($findApp->client_id, 'decrypt'), 'client_secret' => $this->mobj->encrypt_decrypt($findApp->client_secret, 'decrypt'), 'refresh_token' => $this->mobj->encrypt_decrypt($accDetail->refresh_token, 'decrypt'), 'grant_type' => 'refresh_token'];

                    $response = $this->bp->RefreshToken($accDetail, null, $curl_post_data);

                    if ($resData = json_decode($response->getBody(), true)) {
                        $res = $resData;

                        if (!isset($res['errors']) && isset($res['access_token'])) {
                            $account = [
                                'access_token' => $this->mobj->encrypt_decrypt($res['access_token']),
                                'app_secret' => $findApp->app_ref, //dev_ref for brightpearl
                                'app_id' => $findApp->client_id, //app_ref for brightpearl
                            ];
                            // Log::info("Bright Pearl Access Token: " . $res['access_token']);
                            $this->mobj->makeUpdate('platform_accounts', ['access_token' => $this->mobj->encrypt_decrypt($res['access_token']), 'expires_in' => $res['expires_in'], 'refresh_token' => $this->mobj->encrypt_decrypt($res['refresh_token']), 'token_refresh_time' => time()], ['id' => $ID]);
                            $return_response = true;
                        } else {
                            $error = $this->bp->handleResponseError($res);
                            $return_response = isset($error) ? $error : "API Error";
                        }
                    } else {
                        $return_response = "API Error";
                    }
                }
            }
        } catch (\Exception $e) {
            Log::error($ID . ' - BrightPearlApiController - RefreshTokens - ' . $e->getMessage());
            $return_response = $e->getMessage();
        }

        return ['response' => $return_response, 'account' => $account];
    }

    /* Order fulfillment status GET */
    public function GetOrderFullmentStatus($OrderID, $userIntegrationId)
    {
        try {
            $ufound = $this->mobj->getPlatformAccountByUserIntegration($userIntegrationId, $this->platformId, ['access_token', 'platform_id', 'id', 'user_id', 'api_domain', 'account_name', 'app_id', 'app_secret']);
            if ($ufound && $this->platformId) {
                if (isset($ufound->platform_id) && $ufound->platform_id == $this->platformId) { //for only BP integration
                    $response = $this->bp->GetOrderFullmentStatus($ufound, null, $OrderID);
                    if ($order = json_decode($response->getBody(), true)) {
                        return $order;
                    }
                    return false;
                }
            }
        } catch (\Exception $e) {
            Log::error($e->getMessage());
            return false;
        }
    }

    /* Get Warehouse */
    public function GetWarehouse($userId = null, $userIntegrationId = null, $attempt)
    {
        $return_response = false;
        try {
            $ufound = $this->mobj->getPlatformAccountByUserIntegration($userIntegrationId, $this->platformId, ['access_token', 'platform_id', 'id', 'user_id', 'api_domain', 'account_name', 'app_id', 'app_secret']);
            if ($ufound && $attempt == 1) {
                //To pull new and updated warehouse from BP
                $response = $this->bp->GetWarehouse($ufound, true);
                if ($warehouses = json_decode($response->getBody(), true)) {
                    if (!empty($warehouses) && isset($warehouses['response']) && is_array($warehouses['response'])) {
                        $warehouseList = [];
                        $objectId = $this->helper->getObjectId("warehouse");

                        if (isset($objectId)) {
                            // update users integration warehouse status to 0.
                            $this->mobj->makeUpdate('platform_object_data', ['status' => 0], ['user_id' => $userId, 'user_integration_id' => $userIntegrationId, 'platform_id' => $ufound->platform_id, 'platform_object_id' => $objectId]);

                            foreach ($warehouses['response'] as $value) {
                                $warehouseList = ['user_id' => $userId, 'platform_id' => $ufound->platform_id, 'user_integration_id' => $userIntegrationId, 'name' => $value['name'], 'api_id' => $value['id'], 'api_code' => $value['typeCode'], 'status' => 1, 'platform_object_id' => $objectId];

                                $findPayment = $this->mobj->getFirstResultByConditions('platform_object_data', ['user_integration_id' => $userIntegrationId, 'platform_id' => $ufound->platform_id, 'platform_object_id' => $objectId, 'api_id' => $value['id']], ['id']);
                                if ($findPayment) {
                                    $this->mobj->makeUpdate('platform_object_data', $warehouseList, ['id' => $findPayment->id]);
                                    $wareId = $findPayment->id;
                                } else {
                                    $findPayment = $this->mobj->makeInsertGetId('platform_object_data', $warehouseList);
                                    $wareId = $findPayment;
                                }

                                if ($value['address']['addressId']) {
                                    //to store the address id of the warehouse in the platform_object_data_additional_information
                                    $address = PlatformObjectDataAdditionalInformation::where(['user_integration_id' => $userIntegrationId, 'platform_object_data_id' => $wareId])->first();
                                    if ($address) {
                                        //check if the warehouse data is already there
                                        $address->api_address_id = $value['address']['addressId'];
                                        $address->address1 = @$value['address']['streetAddress'];
                                        $address->city = @$value['address']['city'];
                                        $address->state = @$value['address']['state'];
                                        $address->country = @$value['address']['countryIsoCode2'];
                                        $address->postal_code = @$value['address']['postcode'];
                                        $address->save();
                                    } else {
                                        PlatformObjectDataAdditionalInformation::create(['user_integration_id' => $userIntegrationId, 'platform_object_data_id' => $wareId, 'api_address_id' => $value['address']['addressId'], 'address1' => @$value['address']['streetAddress'], 'city' => @$value['address']['city'], 'state' => @$value['address']['state'], 'country' => @$value['address']['countryIsoCode2'], 'postal_code' => @$value['address']['postcode']]);
                                    }
                                }
                            }
                            $return_response = true;
                        }
                    } else {
                        $error = $this->bp->handleResponseError($warehouses);
                        $return_response = isset($error) ? $error : "API Error";
                    }
                } else {
                    $return_response = "API Error";
                }
            }
        } catch (\Exception $e) {
            Log::error($userIntegrationId . ' - BrightPearlApiController - GetWarehouse - ' . $e->getMessage());
            $return_response = $e->getMessage();
        }
        return $return_response;
    }

    /* Get LeadSource */
    public function GetLeadSources($userId = null, $userIntegrationId = null, $attempt)
    {
        $return_response = false;
        try {

            $ufound = $this->mobj->getPlatformAccountByUserIntegration($userIntegrationId, $this->platformId, ['access_token', 'platform_id', 'id', 'user_id', 'api_domain', 'account_name', 'app_id', 'app_secret']);

            if ($ufound && $this->platformId) {

                if (isset($ufound->platform_id) && $ufound->platform_id == $this->platformId) {
                    //for only BP integration

                    if ($attempt == 1) { // To pull new and updated lead source from BP

                        $response = $this->bp->GetLeadSources($ufound, true);

                        if ($leadSource = json_decode($response->getBody(), true)) {

                            if (!empty($leadSource) && isset($leadSource['response']) && is_array($leadSource['response'])) {
                                $leadSourceList = [];
                                $objectId = $this->helper->getObjectId("lead");

                                if (isset($objectId)) {
                                    // update users integration leadsource status to 0.
                                    $this->mobj->makeUpdate('platform_object_data', ['status' => 0], ['user_id' => $userId, 'user_integration_id' => $userIntegrationId, 'platform_id' => $ufound->platform_id, 'platform_object_id' => $objectId]);

                                    foreach ($leadSource['response'] as $key => $value) {
                                        $leadSourceList = ['user_id' => $userId, 'platform_id' => $ufound->platform_id, 'user_integration_id' => $userIntegrationId, 'name' => $value['name'], 'api_id' => $value['id'], 'api_code' => $value['ownerId'], 'status' => 1, 'platform_object_id' => $objectId];

                                        $findLeadSource = $this->mobj->getFirstResultByConditions('platform_object_data', [
                                            //'user_id' => $userId,
                                            'user_integration_id' => $userIntegrationId,
                                            'platform_id' => $ufound->platform_id,
                                            'platform_object_id' => $objectId,
                                            'api_id' => $value['id'],
                                        ], ['id']);
                                        if ($findLeadSource) {
                                            $this->mobj->makeUpdate(
                                                'platform_object_data',
                                                $leadSourceList,
                                                ['id' => $findLeadSource->id]
                                            );
                                        } else {

                                            $this->mobj->makeInsert('platform_object_data', $leadSourceList);
                                        }
                                    }
                                    $return_response = true;
                                }
                            } else {

                                $error = $this->bp->handleResponseError($leadSource);
                                $return_response = isset($error) ? $error : "API Error";
                            }
                        } else {
                            $return_response = "API Error";
                        }
                    }
                }
            }
        } catch (\Exception $e) {
            Log::error($e->getMessage());
            $return_response = $e->getMessage();
        }
        return $return_response;
    }

    /* Get Projects */
    public function GetProjects($userId = null, $userIntegrationId = null, $attempt)
    {
        $return_response = false;
        try {

            $ufound = $this->mobj->getPlatformAccountByUserIntegration($userIntegrationId, $this->platformId, ['access_token', 'platform_id', 'id', 'user_id', 'api_domain', 'account_name', 'app_id', 'app_secret']);

            if ($ufound && $this->platformId) {
                if (isset($ufound->platform_id) && $ufound->platform_id == $this->platformId) { //for only BP integration

                    if ($attempt == 1) { // To pull new and updated project from BP

                        $response = $this->bp->GetProjects($ufound, true);

                        if ($project = json_decode($response->getBody(), true)) {

                            if (!empty($project) && isset($project['response']) && is_array($project['response'])) {
                                $projectList = [];
                                $objectId = $this->helper->getObjectId("project");

                                if (isset($objectId)) {
                                    // update users integration project status to 0.
                                    $this->mobj->makeUpdate('platform_object_data', ['status' => 0], ['user_id' => $userId, 'user_integration_id' => $userIntegrationId, 'platform_id' => $ufound->platform_id, 'platform_object_id' => $objectId]);
                                    foreach ($project['response'] as $key => $value) {

                                        $projectList = ['user_id' => $userId, 'platform_id' => $ufound->platform_id, 'user_integration_id' => $userIntegrationId, 'name' => $value['name'], 'api_id' => $value['projectId'], 'status' => 1, 'platform_object_id' => $objectId];

                                        $findProject = $this->mobj->getFirstResultByConditions('platform_object_data', [
                                            //'user_id' => $userId,
                                            'user_integration_id' => $userIntegrationId,
                                            'platform_id' => $ufound->platform_id,
                                            'platform_object_id' => $objectId,
                                            'api_id' => $value['projectId'],
                                        ], ['id']);
                                        if ($findProject) {
                                            $this->mobj->makeUpdate(
                                                'platform_object_data',
                                                $projectList,
                                                ['id' => $findProject->id]
                                            );
                                        } else {
                                            $this->mobj->makeInsert('platform_object_data', $projectList);
                                        }
                                    }
                                    $return_response = true;
                                }
                            } else {
                                if (isset($project['errors']) && is_array($project['errors'])) {
                                    $error = $this->bp->handleResponseError($project);
                                    if ($error == "No projects to return") {
                                        $return_response = true;
                                    } else {
                                        $return_response = isset($error) ? $error : "API Error";
                                    }
                                } else {
                                    $error = $this->bp->handleResponseError($project);
                                    $return_response = isset($error) ? $error : "API Error";
                                }
                            }
                        } else {
                            $return_response = "API Error";
                        }
                    }
                }
            }
        } catch (\Exception $e) {
            Log::error($e->getMessage());
            $return_response = $e->getMessage();
        }
        return $return_response;
    }

    /* Get Channels */
    public function GetChannels($userId = null, $userIntegrationId = null, $attempt)
    {
        $return_response = false;
        try {

            $ufound = $this->mobj->getPlatformAccountByUserIntegration($userIntegrationId, $this->platformId, ['access_token', 'platform_id', 'id', 'user_id', 'api_domain', 'account_name', 'app_id', 'app_secret']);
            if ($ufound && $this->platformId) {
                if (isset($ufound->platform_id) && $ufound->platform_id == $this->platformId) { //for only BP integration

                    if ($attempt == 1) { // To pull new and updated channels from BP

                        $response = $this->bp->GetChannels($ufound, true);
                        if ($channels = json_decode($response->getBody(), true)) {

                            if (!empty($channels) && isset($channels['response']) && is_array($channels['response'])) {
                                $channelsList = [];

                                $objectId = $this->helper->getObjectId("channel");

                                if (isset($objectId)) {
                                    // update users integration channels status to 0.
                                    $this->mobj->makeUpdate('platform_object_data', ['status' => 0], ['user_id' => $userId, 'user_integration_id' => $userIntegrationId, 'platform_id' => $ufound->platform_id, 'platform_object_id' => $objectId]);
                                    foreach ($channels['response'] as $key => $value) {

                                        $channelsList = ['user_id' => $userId, 'platform_id' => $ufound->platform_id, 'user_integration_id' => $userIntegrationId, 'name' => $value['name'], 'api_id' => $value['id'], 'api_code' => $value['channelTypeId'], 'status' => 1, 'platform_object_id' => $objectId];

                                        $findChannels = $this->mobj->getFirstResultByConditions('platform_object_data', [
                                            //'user_id' => $userId,
                                            'user_integration_id' => $userIntegrationId,
                                            'platform_id' => $ufound->platform_id,
                                            'platform_object_id' => $objectId,
                                            'api_id' => $value['id'],
                                        ], ['id']);
                                        if ($findChannels) {
                                            $this->mobj->makeUpdate(
                                                'platform_object_data',
                                                $channelsList,
                                                ['id' => $findChannels->id]
                                            );
                                        } else {
                                            $this->mobj->makeInsert('platform_object_data', $channelsList);
                                        }
                                    }
                                    $return_response = true;
                                }
                            } else {

                                $error = $this->bp->handleResponseError($channels);
                                $return_response = isset($error) ? $error : "API Error";
                            }
                        } else {
                            $return_response = "API Error";
                        }
                    }
                }
            }
        } catch (\Exception $e) {
            Log::error($e->getMessage());
            $return_response = $e->getMessage();
        }
        return $return_response;
    }

    /* Get TaxCode */
    public function GetTaxCodes($userId = null, $userIntegrationId = null, $attempt)
    {
        $return_response = false;
        try {

            $ufound = $this->mobj->getPlatformAccountByUserIntegration($userIntegrationId, $this->platformId, ['access_token', 'platform_id', 'id', 'user_id', 'api_domain', 'account_name', 'app_id', 'app_secret']);
            if ($ufound && $this->platformId) {
                if (isset($ufound->platform_id) && $ufound->platform_id == $this->platformId) { //for only BP integration

                    if ($attempt == 1) { // To pull new and updated tax code from BP

                        $response = $this->bp->GetTaxCodes($ufound, true);
                        if ($taxCode = json_decode($response->getBody(), true)) {

                            if (!empty($taxCode) && isset($taxCode['response']) && is_array($taxCode['response'])) {
                                $taxCodeList = [];

                                $objectId = $this->helper->getObjectId("taxcode");

                                if (isset($objectId)) {
                                    // update users integration taxcode status to 0.
                                    $this->mobj->makeUpdate('platform_object_data', ['status' => 0], ['user_id' => $userId, 'user_integration_id' => $userIntegrationId, 'platform_id' => $ufound->platform_id, 'platform_object_id' => $objectId]);
                                    foreach ($taxCode['response'] as $key => $value) {
                                        $taxCodeList = ['user_id' => $userId, 'platform_id' => $ufound->platform_id, 'user_integration_id' => $userIntegrationId, 'name' => $value['description'], 'api_id' => $value['id'], 'api_code' => $value['code'], 'status' => 1, 'platform_object_id' => $objectId];

                                        $findTaxCode = $this->mobj->getFirstResultByConditions('platform_object_data', [
                                            //'user_id' => $userId,
                                            'user_integration_id' => $userIntegrationId,
                                            'platform_id' => $ufound->platform_id,
                                            'platform_object_id' => $objectId,
                                            'api_id' => $value['id'],

                                        ], ['id']);
                                        if ($findTaxCode) {
                                            $this->mobj->makeUpdate(
                                                'platform_object_data',
                                                $taxCodeList,
                                                ['id' => $findTaxCode->id]
                                            );
                                        } else {

                                            $this->mobj->makeInsert('platform_object_data', $taxCodeList);
                                        }
                                    }
                                    $return_response = true;
                                }
                            } else {

                                $error = $this->bp->handleResponseError($taxCode);
                                $return_response = isset($error) ? $error : "API Error";
                            }
                        } else {
                            $return_response = "API Error";
                        }
                    }
                }
            }
        } catch (\Exception $e) {
            Log::error($e->getMessage());
            $return_response = $e->getMessage();
        }
        return $return_response;
    }

    /* Get Shipping Method */
    public function GetShippingMethods($userId = null, $userIntegrationId = null, $attempt)
    {
        $return_response = false;
        try {

            $ufound = $this->mobj->getPlatformAccountByUserIntegration($userIntegrationId, $this->platformId, ['access_token', 'platform_id', 'id', 'user_id', 'api_domain', 'account_name', 'app_id', 'app_secret']);
            if ($ufound && $this->platformId) {
                if (isset($ufound->platform_id) && $ufound->platform_id == $this->platformId) { //for only BP integration
                    if ($attempt == 1) { // To pull new and updated tax code from BP
                        $response = $this->bp->GetShippingMethods($ufound, true);

                        if ($shipping = json_decode($response->getBody(), true)) {
                            if (!empty($shipping) && isset($shipping['response']) && is_array($shipping['response'])) {

                                $shippingList = [];

                                $objectId = $this->helper->getObjectId("shipping_method");

                                if (isset($objectId)) {
                                    // update users integration shipping method status to 0.
                                    $this->mobj->makeUpdate('platform_object_data', ['status' => 0], ['user_id' => $userId, 'user_integration_id' => $userIntegrationId, 'platform_id' => $ufound->platform_id, 'platform_object_id' => $objectId]);
                                    foreach ($shipping['response'] as $key => $value) {
                                        $shippingList = ['user_id' => $userId, 'platform_id' => $ufound->platform_id, 'user_integration_id' => $userIntegrationId, 'name' => $value['name'], 'api_id' => $value['id'], 'api_code' => $value['methodType'], 'status' => 1, 'platform_object_id' => $objectId];

                                        $findShipping = $this->mobj->getFirstResultByConditions('platform_object_data', [
                                            //'user_id' => $userId,
                                            'user_integration_id' => $userIntegrationId,
                                            'platform_id' => $ufound->platform_id,
                                            'platform_object_id' => $objectId,
                                            'api_id' => $value['id'],
                                        ], ['id']);
                                        if ($findShipping) {
                                            $this->mobj->makeUpdate(
                                                'platform_object_data',
                                                $shippingList,
                                                ['id' => $findShipping->id]
                                            );
                                        } else {
                                            $this->mobj->makeInsert('platform_object_data', $shippingList);
                                        }
                                    }
                                    $return_response = true;
                                }
                            } else {

                                $error = $this->bp->handleResponseError($shipping);
                                $return_response = isset($error) ? $error : "API Error";
                            }
                        } else {
                            $return_response = "API Error";
                        }
                    }
                }
            }
        } catch (\Exception $e) {
            Log::error($e->getMessage());
            $return_response = $e->getMessage();
        }
        return $return_response;
    }

    /* Get Payment Method */
    public function GetPaymentMethods($userId = null, $userIntegrationId = null, $attempt)
    {
        $return_response = false;
        try {

            $ufound = $this->mobj->getPlatformAccountByUserIntegration($userIntegrationId, $this->platformId, ['access_token', 'platform_id', 'id', 'user_id', 'api_domain', 'account_name', 'app_id', 'app_secret']);
            if ($ufound && $this->platformId) {
                if (isset($ufound->platform_id) && $ufound->platform_id == $this->platformId) { //for only BP integration
                    if ($attempt == 1) { // To pull new and updated tax code from BP
                        $response = $this->bp->GetPaymentMethods($ufound, true);
                        if ($payment = json_decode($response->getBody(), true)) {
                            if (!empty($payment) && isset($payment['response']) && is_array($payment['response'])) {
                                $paymentList = [];

                                $objectId = $this->helper->getObjectId("payment");

                                if (isset($objectId)) {
                                    // update users integration payment method status to 0.
                                    $this->mobj->makeUpdate('platform_object_data', ['status' => 0], ['user_id' => $userId, 'user_integration_id' => $userIntegrationId, 'platform_id' => $ufound->platform_id, 'platform_object_id' => $objectId]);

                                    foreach ($payment['response'] as $key => $value) {
                                        $paymentList = ['user_id' => $userId, 'platform_id' => $ufound->platform_id, 'user_integration_id' => $userIntegrationId, 'name' => $value['name'], 'api_id' => $value['id'], 'api_code' => $value['code'], 'status' => 1, 'platform_object_id' => $objectId];
                                        $findPayment = $this->mobj->getFirstResultByConditions('platform_object_data', [
                                            //'user_id' => $userId,
                                            'user_integration_id' => $userIntegrationId,
                                            'platform_id' => $ufound->platform_id,
                                            'platform_object_id' => $objectId,
                                            'api_id' => $value['id'],
                                        ], ['id']);
                                        if ($findPayment) {
                                            $this->mobj->makeUpdate(
                                                'platform_object_data',
                                                $paymentList,
                                                ['id' => $findPayment->id]
                                            );
                                        } else {
                                            $this->mobj->makeInsert('platform_object_data', $paymentList);
                                        }
                                    }
                                    $return_response = true;
                                }
                            } else {

                                $error = $this->bp->handleResponseError($payment);
                                $return_response = isset($error) ? $error : "API Error";
                            }
                        } else {
                            $return_response = "API Error";
                        }
                    }
                }
            }
        } catch (\Exception $e) {
            Log::error($e->getMessage());
            $return_response = $e->getMessage();
        }
        return $return_response;
    }

    /* Get PriceList Method */
    public function GetPriceList($userId = null, $userIntegrationId = null, $attempt)
    {
        $return_response = false;
        try {

            $ufound = $this->mobj->getPlatformAccountByUserIntegration($userIntegrationId, $this->platformId, ['access_token', 'platform_id', 'id', 'user_id', 'api_domain', 'account_name', 'app_id', 'app_secret']);
            if ($ufound && $this->platformId) {
                if (isset($ufound->platform_id) && $ufound->platform_id == $this->platformId) { //for only BP integration
                    if ($attempt == 1) { // To pull new and updated tax code from BP
                        $response = $this->bp->GetPriceList($ufound, true);
                        if ($price = json_decode($response->getBody(), true)) {
                            if (!empty($price) && isset($price['response']) && is_array($price['response'])) {
                                $priceList = [];

                                $objectId = $this->helper->getObjectId("pricelist");

                                if (isset($objectId)) {
                                    // update users integration price list status to 0.
                                    $this->mobj->makeUpdate('platform_object_data', ['status' => 0], ['user_id' => $userId, 'user_integration_id' => $userIntegrationId, 'platform_id' => $ufound->platform_id, 'platform_object_id' => $objectId]);

                                    foreach ($price['response'] as $key => $value) {
                                        $arrayData = serialize([
                                            "currencyCode" => isset($value['currencyCode']) ? $value['currencyCode'] : null,
                                            "currencySymbol" => isset($value['currencySymbol']) ? $value['currencySymbol'] : null,
                                            "currencyId" => isset($value['currencyId']) ? $value['currencyCode'] : null,
                                            "priceListTypeCode" => isset($value['priceListTypeCode']) ? $value['priceListTypeCode'] : null,
                                            "gross" => $value['gross'],
                                        ]);
                                        $priceList = ['user_id' => $userId, 'platform_id' => $ufound->platform_id, 'user_integration_id' => $userIntegrationId, 'name' => isset($value['name']['text']) ? $value['name']['text'] : null, 'api_id' => $value['id'], 'api_code' => $value['code'], 'description' => null, 'status' => 1, 'platform_object_id' => $objectId];
                                        $findPriceList = $this->mobj->getFirstResultByConditions('platform_object_data', [
                                            //'user_id' => $userId,
                                            'user_integration_id' => $userIntegrationId,
                                            'platform_id' => $ufound->platform_id,
                                            'platform_object_id' => $objectId,
                                            'api_id' => $value['id'],
                                        ], ['id']);
                                        if ($findPriceList) {
                                            $this->mobj->makeUpdate(
                                                'platform_object_data',
                                                $priceList,
                                                ['id' => $findPriceList->id]
                                            );
                                        } else {
                                            $this->mobj->makeInsert('platform_object_data', $priceList);
                                        }
                                    }
                                    $return_response = true;
                                }
                            } else {

                                $error = $this->bp->handleResponseError($price);
                                $return_response = isset($error) ? $error : "API Error";
                            }
                        } else {
                            $return_response = "API Error";
                        }
                    }
                }
            }
        } catch (\Exception $e) {
            Log::error($e->getMessage());
            $return_response = $e->getMessage();
        }
        return $return_response;
    }

    /* Get Order Status  */
    public function GetOrderStatus($userId = null, $userIntegrationId = null, $attempt)
    {
        $return_response = false;
        try {

            $ufound = $this->mobj->getPlatformAccountByUserIntegration($userIntegrationId, $this->platformId, ['access_token', 'platform_id', 'id', 'user_id', 'api_domain', 'account_name', 'app_id', 'app_secret']);
            if ($ufound && $this->platformId) {
                if (isset($ufound->platform_id) && $ufound->platform_id == $this->platformId) { //for only BP integration
                    if ($attempt == 1) { // To pull new and updated order status from BP
                        $response = $this->bp->GetOrderStatus($ufound, true);
                        if ($order = json_decode($response->getBody(), true)) {
                            if (!empty($order) && isset($order['response']) && is_array($order['response'])) {
                                $orderStatusList = [];

                                $objectId = $this->helper->getObjectId("order_status");

                                if (isset($objectId)) {
                                    // update users integration Order status  status to 0.
                                    $this->mobj->makeUpdate('platform_object_data', ['status' => 0], ['user_id' => $userId, 'user_integration_id' => $userIntegrationId, 'platform_id' => $ufound->platform_id, 'platform_object_id' => $objectId]);
                                    foreach ($order['response'] as $key => $value) {

                                        $orderStatusList = [
                                            'user_id' => $userId, 'platform_id' => $ufound->platform_id, 'user_integration_id' => $userIntegrationId, 'name' => $value['name'], 'api_id' => $value['statusId'],
                                            'api_code' => $value['orderTypeCode'],
                                            'status' => 1,
                                            'platform_object_id' => $objectId,
                                        ];
                                        $findStatus = $this->mobj->getFirstResultByConditions('platform_object_data', [
                                            //'user_id' => $userId,
                                            'user_integration_id' => $userIntegrationId,
                                            'platform_id' => $ufound->platform_id,
                                            'platform_object_id' => $objectId,
                                            'api_id' => $value['statusId'],
                                        ], ['id']);
                                        if ($findStatus) {
                                            $this->mobj->makeUpdate(
                                                'platform_object_data',
                                                $orderStatusList,
                                                ['id' => $findStatus->id]
                                            );
                                        } else {
                                            $this->mobj->makeInsert('platform_object_data', $orderStatusList);
                                        }
                                    }
                                    $return_response = true;
                                }
                            } else {

                                $error = $this->bp->handleResponseError($order);
                                $return_response = isset($error) ? $error : "API Error";
                            }
                        } else {
                            $return_response = "API Error";
                        }
                    }
                }
            }
        } catch (\Exception $e) {
            Log::error($e->getMessage());
            $return_response = $e->getMessage();
        }
        return $return_response;
    }

    /* Get Product Types */
    public function GetProductTypes($userId = null, $userIntegrationId = null, $attempt)
    {
        $return_response = false;
        try {

            $ufound = $this->mobj->getPlatformAccountByUserIntegration($userIntegrationId, $this->platformId, ['access_token', 'platform_id', 'id', 'user_id', 'api_domain', 'account_name', 'app_id', 'app_secret']);
            if ($ufound && $this->platformId) {
                if (isset($ufound->platform_id) && $ufound->platform_id == $this->platformId) { //for only BP integration

                    if ($attempt == 1) { // To pull new and updated product type from BP

                        $response = $this->bp->GetProductType($ufound);
                        if ($result = json_decode($response->getBody(), true)) {

                            if (!empty($result) && isset($result['response']) && is_array($result['response'])) {
                                $List = [];

                                $objectId = $this->helper->getObjectId("get_product_type");

                                if (isset($objectId)) {
                                    // update users integration taxcode status to 0.
                                    $this->mobj->makeUpdate('platform_object_data', ['status' => 0], ['user_id' => $userId, 'user_integration_id' => $userIntegrationId, 'platform_id' => $ufound->platform_id, 'platform_object_id' => $objectId]);
                                    foreach ($result['response'] as $key => $value) {
                                        $List = [
                                            'user_id' => $userId, 'platform_id' => $ufound->platform_id, 'user_integration_id' => $userIntegrationId,
                                            'name' => $value['name'],
                                            'api_id' => $value['id'],
                                            'status' => 1,
                                            'platform_object_id' => $objectId,
                                        ];

                                        $find = $this->mobj->getFirstResultByConditions('platform_object_data', [
                                            //'user_id' => $userId,
                                            'user_integration_id' => $userIntegrationId,
                                            'platform_id' => $ufound->platform_id,
                                            'platform_object_id' => $objectId,
                                            'api_id' => $value['id'],

                                        ], ['id']);
                                        if ($find) {
                                            $this->mobj->makeUpdate(
                                                'platform_object_data',
                                                $List,
                                                ['id' => $find->id]
                                            );
                                        } else {

                                            $this->mobj->makeInsert('platform_object_data', $List);
                                        }
                                    }
                                    $return_response = true;
                                }
                            } else {

                                $error = $this->bp->handleResponseError($result);
                                $return_response = isset($error) ? $error : "API Error";
                            }
                        } else {
                            $return_response = "API Error";
                        }
                    }
                }
            }
        } catch (\Exception $e) {
            Log::error($e->getMessage());
            $return_response = $e->getMessage();
        }
        return $return_response;
    }

    /* Get Categories  */
    public function GetCategories($userId = null, $userIntegrationId = null, $is_initial_syn = 0)
    {
        $return_response = false;
        try {
            $ufound = $this->mobj->getPlatformAccountByUserIntegration($userIntegrationId, $this->platformId, ['access_token', 'platform_id', 'id', 'user_id', 'api_domain', 'account_name', 'app_id', 'app_secret']);
            if ($ufound && $this->platformId) {
                if (isset($ufound->platform_id) && $ufound->platform_id == $this->platformId) { //for only BP integration
                    if ($is_initial_syn == 1 || $is_initial_syn == 0) { // To pull new and updated order status from BP
                        $response = $this->bp->GetCategories($ufound, true);
                        if ($result = json_decode($response->getBody(), true)) {

                            if (!empty($result) && isset($result['response']) && is_array($result['response'])) {
                                $List = [];

                                $objectId = $this->helper->getObjectId("category");
                                if (isset($objectId)) {
                                    // update users integration categories status to 0.
                                    // $this->mobj->makeUpdate('platform_object_data', ['status'=>0], ['user_id'=>$userId, 'user_integration_id'=>$userIntegrationId,  'platform_id'=>$ufound->platform_id, 'platform_object_id'=>$objectId]);

                                    foreach ($result['response'] as $key => $value) {
                                        if (!isset($value['error'])) {

                                            $List = [
                                                'user_id' => $userId,
                                                'platform_id' => $ufound->platform_id,
                                                'user_integration_id' => $userIntegrationId,
                                                'name' => $value['name'],
                                                'api_id' => $value['id'],
                                                'api_code' => $value['parentId'],
                                                'description' => isset($value['description']['text']) ? $value['description']['text'] : null,
                                                'status' => 1,
                                                'platform_object_id' => $objectId,
                                            ];

                                            $findtaxcode = $this->mobj->getFirstResultByConditions('platform_object_data', [
                                                //'user_id' => $userId,
                                                'user_integration_id' => $userIntegrationId,
                                                'platform_id' => $ufound->platform_id,
                                                'platform_object_id' => $objectId,
                                                'api_id' => $value['id'],
                                            ], ['id']);
                                            if ($findtaxcode) {
                                                $this->mobj->makeUpdate(
                                                    'platform_object_data',
                                                    $List,
                                                    ['id' => $findtaxcode->id]
                                                );
                                            } else {
                                                $this->mobj->makeInsert('platform_object_data', $List);
                                            }
                                        }
                                    }
                                    $return_response = true;
                                }
                            } else {

                                $error = $this->bp->handleResponseError($result);
                                $return_response = isset($error) ? $error : "API Error";
                            }
                        } else {
                            $return_response = "API Error";
                        }
                    }
                }
            }
        } catch (\Exception $e) {
            Log::error($e->getMessage());
            $return_response = $e->getMessage();
        }
        return $return_response;
    }

    /* Get Brightpearl Account Information */
    public function GetAccountAdditionInformation($userId = null, $userIntegrationId = null, $attempt)
    {
        $return_response = false;
        try {

            $ufound = $this->mobj->getPlatformAccountByUserIntegration($userIntegrationId, $this->platformId, ['access_token', 'platform_id', 'id', 'user_id', 'api_domain', 'account_name', 'app_id', 'app_secret']);
            if ($ufound && $this->platformId) {
                if (isset($ufound->platform_id) && $ufound->platform_id == $this->platformId) { //for only BP integration
                    if ($attempt == 1) { // To pull new and updated account info from BP
                        $response = $this->bp->GetAccountAdditionInformation($ufound, true);
                        if ($account = json_decode($response->getBody(), true)) {
                            if (!empty($account) && isset($account['response']) && is_array($account['response'])) {
                                $accountData = isset($account['response']['configuration']) ? $account['response']['configuration'] : null;
                                if ($accountData) {

                                    $fields = [
                                        'account_id' => $ufound->id, 'user_integration_id' => $userIntegrationId,
                                        'account_currency_code' => isset($accountData['baseCurrencyCode']) ? $accountData['baseCurrencyCode'] : null,
                                        'account_product_lenght_unit' => isset($accountData['productLengthUnit']) ? $accountData['productLengthUnit'] : null,
                                        'account_product_weight_unit' => isset($accountData['productWeightUnit']) ? $accountData['productWeightUnit'] : null,
                                        'account_shipping_nominal_code' => isset($accountData['shippingNominalCode']) ? $accountData['shippingNominalCode'] : null,
                                        'account_discount_nominal_code' => isset($accountData['discountNominalCode']) ? $accountData['discountNominalCode'] : null,
                                        'account_sale_nominal_code' => isset($accountData['salesNominalCode']) ? $accountData['salesNominalCode'] : null,
                                        'account_purchase_nominal_code' => isset($accountData['purchaseNominalCode']) ? $accountData['purchaseNominalCode'] : null,
                                        'account_timezone' => isset($accountData['timeZone']) ? $accountData['timeZone'] : null,
                                        'account_giftcard_nominal_code' => isset($accountData['defaultGiftCardNominalCode']) ? $accountData['defaultGiftCardNominalCode'] : null,
                                        'account_tax_scheme' => isset($accountData['account_tax_scheme']) ? $accountData['account_tax_scheme'] : null,
                                    ];

                                    $findAccount = $this->mobj->getFirstResultByConditions('platform_account_addtional_information', [
                                        'account_id' => $ufound->id,
                                        'user_integration_id' => $userIntegrationId,
                                    ], ['id']);

                                    if ($findAccount) {
                                        $this->mobj->makeUpdate('platform_account_addtional_information', $fields, ['id' => $findAccount->id]);
                                    } else {

                                        $this->mobj->makeInsert('platform_account_addtional_information', $fields);
                                    }
                                    $return_response = true;
                                }
                            } else {
                                $error = $this->bp->handleResponseError($account);
                                $return_response = isset($error) ? $error : "API Error";
                            }
                        } else {
                            $return_response = "API Error";
                        }
                    }
                }
            }
        } catch (\Exception $e) {
            Log::error($e->getMessage());
            $return_response = $e->getMessage();
        }
        return $return_response;
    }

    /* Get Store Product */
    public function GetProducts($userId = null, $userIntegrationId = null, $attempt, $Initial = 0, $destination_platform_id = null, $source_platform_id = null)
    {
        $return_response = false;
        try {

            $accessControl = app('App\Utility\PlatformConfig')->accessControl($source_platform_id, $destination_platform_id);
            if ($accessControl['status'] == true) {
                $accesResult =  app('App\Http\Controllers\Brightpearl\BrightpearlServices')->accessParentIngData($userIntegrationId, $userId, 'PRODUCT', $source_platform_id, $this->platformId, $accessControl['action']);
                if ($accesResult == true || !is_bool($accesResult)) {
                    return $accesResult;
                }
            }

            $supplierFilter = false;
            $primarySupplierIdFilter = null;
            //get Supplier default Mapping
            $supplierObjId = $this->helper->getObjectId('supplierlist');
            $primarySupplierIdFilter = $this->map->getMappedApiIdByObjectId($userIntegrationId, $supplierObjId);
            if ($primarySupplierIdFilter) {
                $supplierFilter = true;
            }

            //get selected IdentityMapping
            $selected_IdentMapVal = "";
            $product_identity_obj_id = $this->helper->getObjectId('product_identity');
            $maping_data = $this->map->getMappedField($userIntegrationId, '', $product_identity_obj_id);
            if ($maping_data) {
                if ($maping_data['destination_platform_id'] == 'brightpearl') {
                    $selected_IdentMapVal = $maping_data['destination_field_name'];
                } else {
                    $selected_IdentMapVal = $maping_data['source_field_name'];
                }
            }
            $bundleKitChildProductQuantity = $this->map->getMappedDataByName($userIntegrationId, null, "bundle_kit_child_product_quantity", ['custom_data'], "default");
            $syncBundleKitChildProductQuantity = false;
            if (isset($bundleKitChildProductQuantity->custom_data)) {
                $syncBundleKitChildProductQuantity = true;
            }

            //test log
            // if ($userIntegrationId == "152" || $userIntegrationId == "158" || $userIntegrationId == "144" || $userIntegrationId == "208") {
            //     Storage::disk('local')->append('chunk_product_for_inventory.txt', 'GetProducts ' . ' time: ' . date('Y-m-d H:i:s') . ' selected_IdentMapVal - ' . $selected_IdentMapVal . ' userIntegrationId - ' . $userIntegrationId . ' supplierFilter - ' . $supplierFilter);
            // }

            $ufound = $this->mobj->getPlatformAccountByUserIntegration($userIntegrationId, $this->platformId, ['access_token', 'platform_id', 'id', 'user_id', 'api_domain', 'account_name', 'app_id', 'app_secret']);
            if ($ufound && $this->platformId) {
                if (isset($ufound->platform_id) && $ufound->platform_id == $this->platformId) { //for only BP integration
                    if ($attempt == 1 && $Initial == 1) { // To pull products url from BP
                        /* Create Product Webhook */
                        $this->CreateOrDeleteWebhook($userId, $userIntegrationId, ['product'], 1);

                        $response = $this->bp->GetProductsUrls($ufound, true);

                        if ($products = json_decode($response->getBody(), true)) {

                            if (!empty($products) && isset($products['response']['getUris']) && is_array($products['response']['getUris'])) {
                                $urls = [];
                                foreach ($products['response']['getUris'] as $key => $value) {
                                    $findProduct = PlatformUrl::select('id')->where([['user_integration_id', '=', $userIntegrationId], ['platform_id', '=', $ufound->platform_id], ['url', '=', $value], ['url_name', '=', 'products']])->first();

                                    if (!$findProduct) {
                                        $urls[] = ['url' => $value, 'user_id' => $userId, 'platform_id' => $ufound->platform_id, 'user_integration_id' => $userIntegrationId, 'url_name' => 'products'];
                                    }
                                }
                                if (!empty($urls)) {
                                    $this->mobj->makeInsert('platform_urls', $urls);
                                }
                                $return_response = true;
                            } else {
                                $error = $this->bp->handleResponseError($products);
                                $return_response = isset($error) ? $error : "API Error";
                            }
                        } else {
                            $return_response = "API Error";
                        }
                    } elseif ($attempt == 2 && $Initial == 1) { // To pull products from BP passing urls

                        $chunkOfUrls = $this->mobj->getResultByConditions('platform_urls', ['status' => 0, 'platform_id' => $ufound->platform_id, 'user_integration_id' => $userIntegrationId, 'url_name' => 'products'], ['id', 'url'], ['created_at' => 'asc'], 5);

                        $customObjectId = $this->helper->getObjectId('product');

                        if (count($chunkOfUrls) > 0) {
                            foreach ($chunkOfUrls as $url) {
                                $response = $this->bp->GetProducts($ufound, $url->url);

                                if ($product = json_decode($response->getBody(), true)) {

                                    if (isset($product['response']) && is_array($product['response'])) {
                                        $products = $product['response'];

                                        $this->CreateOrUpdateProductAndDetailsInDB($userId, $userIntegrationId, $ufound, $products, $supplierFilter, $primarySupplierIdFilter, $selected_IdentMapVal, $syncBundleKitChildProductQuantity, $customObjectId, $destination_platform_id, $source_platform_id);

                                        $this->mobj->makeUpdate('platform_urls', ['status' => 1], ['id' => $url->id]);
                                    } else {
                                        /* If any error set status=1 and skip that url */
                                        $return_response = $this->bp->handleResponseError($product);
                                        $this->mobj->makeUpdate('platform_urls', ['status' => 1, 'response' => $return_response], ['id' => $url->id]);
                                        continue;
                                    }
                                } else {
                                    /* If any error or empty response */
                                    $error = $this->bp->handleResponseError($product);
                                    $return_response = isset($error) ? $error : "API Error";
                                    continue;
                                }
                            }
                            $return_response = count($chunkOfUrls) . "- array chunks processed";
                        } else {
                            $return_response = true;
                        }
                    } elseif ($attempt == 3 && $Initial == 0) { // To pull update or new products from BP

                        $customObjectId = $this->helper->getObjectId('product');

                        $product_process_limit = 50;

                        $process_productIds = [];

                        $product_backup_url =  $this->platformUrl->where(['user_integration_id' => $userIntegrationId, 'platform_id' => $ufound->platform_id, 'url_name' => 'product_backup_lasttime'])->select('id', 'url')->first();

                        $end_t = urlencode(now()->format('c'));

                        $old_live_backup_url = '';
                        $old_discon_backup_url = '';

                        if (isset($product_backup_url->url) && $product_backup_url->url) {
                            $start_t = explode('|', $product_backup_url->url);
                            $live_product_search_time_range = (isset($start_t[1]) &&  $start_t[1]) ?  '&updatedOn=' . urlencode($start_t[1]) . '/' . $end_t : null; //$start_t[1] ==> last live product updatedOn
                            $discon_product_search_time_range = (isset($start_t[3]) && $start_t[3]) ? '&updatedOn=' . urlencode($start_t[3]) . '/' . $end_t : null; //$start_t[3] ==> last discontinued product updatedOn

                            $old_live_backup_url = (isset($start_t[1]) &&  $start_t[1]) ? $start_t[1] : '';
                            $old_discon_backup_url = (isset($start_t[3]) &&  $start_t[3]) ? $start_t[3] : '';
                        }

                        if (isset($live_product_search_time_range) && $live_product_search_time_range) {
                            $live_product_url = "product-search?columns=productId,updatedOn$live_product_search_time_range&sort=updatedOn.ASC&productStatus=Live&pageSize=$product_process_limit"; ///Live
                        } else {
                            $live_product_url = "product-search?columns=productId,updatedOn&sort=updatedOn.ASC&productStatus=Live&pageSize=$product_process_limit"; ///Live
                        }

                        $response1  = $this->bp->GetProducts($ufound, $live_product_url, 'search');

                        $live_product_res = $this->processProductIDs($response1);


                        $live_backup_url = isset($live_product_res['backup_url']) && $live_product_res['backup_url'] ? $live_product_res['backup_url'] :  $old_live_backup_url;
                        if (isset($live_product_res['productIDs']) && is_array($live_product_res['productIDs'])) {
                            $process_productIds = array_merge($process_productIds, $live_product_res['productIDs']);
                        } else {
                            $return_response = $live_product_res;
                        }

                        $discon_backup_url = "";
                        //Filter Brightpearl Live product if added in config
                        if (!isset(\Config::get('apisettings.acceptLiveProductsInBp')[$destination_platform_id]) && !isset(\Config::get('apisettings.acceptLiveProductsInBp')[$source_platform_id])) {

                            if (isset($discon_product_search_time_range) && $discon_product_search_time_range) {
                                $discon_product_url = "product-search?columns=productId,updatedOn$discon_product_search_time_range&sort=updatedOn.ASC&productStatus=Discontinued&pageSize=$product_process_limit"; ///Discontinued
                            } else {
                                $discon_product_url = "product-search?columns=productId,updatedOn&sort=updatedOn.ASC&productStatus=Discontinued&pageSize=$product_process_limit"; ///Discontinued
                            }
                            $response2 = $this->bp->GetProducts($ufound, $discon_product_url, 'search');


                            $discon_product_res = $this->processProductIDs($response2);

                            $discon_backup_url = isset($discon_product_res['backup_url']) && $discon_product_res['backup_url'] ? $discon_product_res['backup_url'] : $old_discon_backup_url;
                            if (isset($discon_product_res['productIDs']) && is_array($discon_product_res['productIDs'])) {
                                $process_productIds = array_merge($process_productIds, $discon_product_res['productIDs']);
                            } else {
                                $return_response = $live_product_res;
                            }
                        }


                        $backup_url = 'Live|' . $live_backup_url;
                        $backup_url .= '|Discon|' . $discon_backup_url;


                        //start to save product_backup_lasttime
                        if (!$product_backup_url) {
                            $this->platformUrl->insert(['user_id' => $userId, 'platform_id' => $ufound->platform_id, 'user_integration_id' => $userIntegrationId, 'url' => $backup_url, 'url_name' => 'product_backup_lasttime', 'status' => 1]);
                        } else {
                            $product_backup_url->update(['url' => $backup_url]);
                        }
                        //end to save product_backup_lasttime

                        if (!empty($process_productIds) && count($process_productIds) > 0) {

                            $uproductIdsArr = array_unique($process_productIds);
                            sort($uproductIdsArr);
                            $productIDs = implode(",", $uproductIdsArr);
                            $url = "product/{$productIDs}";

                            $response = $this->bp->GetProducts($ufound, $url);

                            if ($product = json_decode($response->getBody(), true)) {

                                if (isset($product['response']) && is_array($product['response'])) {
                                    $products = $product['response'];

                                    $this->CreateOrUpdateProductAndDetailsInDB($userId, $userIntegrationId, $ufound, $products, $supplierFilter, $primarySupplierIdFilter, $selected_IdentMapVal, $syncBundleKitChildProductQuantity, $customObjectId);

                                    $return_response = true;
                                } else {
                                    $return_response = isset($product['response']) ? $product['response'] : "API error";
                                }
                            } else {
                                $return_response = "API Error";
                            }
                        }
                    } else if ($attempt == 4 && $Initial == 0) { // To process the product detail by getting via webhooks

                        $return_response = $this->ProcessProductInformation($userId, $userIntegrationId, "Pending", $selected_IdentMapVal, $ufound, $supplierFilter, $primarySupplierIdFilter, $syncBundleKitChildProductQuantity);
                    }
                }
            }
        } catch (\Exception $e) {
            Log::error($e->getMessage());
            $return_response = $e->getMessage();
        }
        return $return_response;
    }

    public function processProductIDs($response)
    {
        $productIDs = [];
        $backup_url = '';
        if ($product = json_decode($response->getBody(), true)) {
            if (isset($product['response']['results']) && is_array($product['response']['results'])) {
                $products = $product['response']['results'];
                if (!empty($products)) {
                    foreach ($products as $key => $val) {
                        $backup_url =  $val[1]; //last product updatedOn
                        $productIDs[] = $val[0];
                    }
                }
                $return_response = ['backup_url' => $backup_url, 'productIDs' => $productIDs];
            } else {
                $error = $this->bp->handleResponseError($product);
                $return_response = isset($error) ? $error : "API Error";
            }
        } else {
            $return_response = "API Error";
        }
        return $return_response;
    }

    /* Get Store Product Custom Fields */
    public function GetStoreProductCustomFields($custom_product_id, $userId, $userIntegrationId, $product, $customObjectId = null)
    {
        $customFields = $product['customFields'];
        if (isset($customObjectId)) {
            $customObjectId = $this->helper->getObjectId('product');
        }

        foreach ($customFields as $code => $customField) {
            $findRecord = $this->mobj->getFirstResultByConditions('platform_fields', ['platform_id' => $this->platformId, 'user_integration_id' => $userIntegrationId, 'field_type' => 'custom', 'name' => $code, 'platform_object_id' => $customObjectId, 'status' => 1], ['id']);

            if (!empty($findRecord->id)) {
                $customFieldValue = '';
                if (is_array($customField)) {
                    $customFieldValue = @$customField['value'];
                } else {
                    $customFieldValue = $customField;
                }

                $fields = array('platform_field_id' => $findRecord->id, 'user_integration_id' => $userIntegrationId, 'platform_id' => $this->platformId, 'field_value' => $customFieldValue, 'record_id' => $custom_product_id, 'status' => 1);

                $findRecord = $this->mobj->getFirstResultByConditions('platform_custom_field_values', ['record_id' => $custom_product_id, 'platform_field_id' => $findRecord->id, 'user_integration_id' => $userIntegrationId, 'platform_id' => $this->platformId], ['id']);
                if (!empty($findRecord->id)) {
                    $this->mobj->makeUpdate('platform_custom_field_values', $fields, ['id' => $findRecord->id]);
                } else {
                    $this->mobj->makeInsert('platform_custom_field_values', $fields);
                }
            }
        }
    }

    /* Get Handle If any bundle products has child products */
    public function StoreBundleChildProducts($bundle_product_id, $userId, $userIntegrationId, $product, $syncBundleKitChildProductQuantity = false)
    {
        /* first clear the parent_product_id=NULL */
        $findChilds = PlatformProduct::select('id', 'parent_product_id')->where(['user_integration_id' => $userIntegrationId, 'platform_id' => $this->platformId])->whereRaw("find_in_set('" . $bundle_product_id . "',parent_product_id)")->get();
        if (count($findChilds) > 0) {
            foreach ($findChilds as $child_product) {
                $bundleIds = explode(',', $child_product->parent_product_id);
                $values = array_diff($bundleIds, [$bundle_product_id]);
                $commaseparated = implode(',', $values);
                $child_product->parent_product_id = $commaseparated;
                $child_product->save();
            }
        }

        if (isset($product['composition']['bundleComponents']) && !empty($product['composition']['bundleComponents'])) {
            if ($syncBundleKitChildProductQuantity) { //Store when its value is true
                PlatformKitChildProductQuantity::where(
                    'platform_bundle_product_id',
                    $bundle_product_id
                )->update(['status' => 0]); //set all status =0 for current bundle product
            }
            foreach ($product['composition']['bundleComponents'] as $child) {
                $findChild = PlatformProduct::select('id', 'parent_product_id')->where(['user_integration_id' => $userIntegrationId, 'platform_id' => $this->platformId, 'api_product_id' => (string)$child['productId']])->first();
                if ($findChild) {
                    $findChild->parent_product_id .= "," . $bundle_product_id;
                    $trim = rtrim($findChild->parent_product_id, ",");
                    $trim = ltrim($trim, ",");
                    $findChild->parent_product_id = $trim;
                    $findChild->save();
                    if ($syncBundleKitChildProductQuantity) { //Store when its value is true
                        $this->StoreBundleChildProductQuantity($bundle_product_id, $findChild->id, $child['productQuantity']);
                    }
                } else {
                    $childProductId = $this->mobj->makeInsertGetId('platform_product', ['user_id' => $userId, 'platform_id' => $this->platformId, 'user_integration_id' => $userIntegrationId, 'api_product_id' => $child['productId'], 'product_sync_status' => 'Pending']);
                    if ($syncBundleKitChildProductQuantity) { //Store when its value is true
                        $this->StoreBundleChildProductQuantity($bundle_product_id, $childProductId, $child['productQuantity']);
                    }
                }
            }
        }
    }

    /* Store Bundle Child Product's Quantity  */
    public function StoreBundleChildProductQuantity($platform_bundle_product_id, $platform_product_id, $quantity = 0, $status = true)
    {

        PlatformKitChildProductQuantity::updateOrCreate(['platform_bundle_product_id' => $platform_bundle_product_id, 'platform_product_id' => $platform_product_id], ['platform_bundle_product_id' => $platform_bundle_product_id, 'platform_product_id' => $platform_product_id, 'quantity' => $quantity, 'status' => $status]);
    }

    /* Get Store Product */
    public function GetProductOptions($userId = null, $userIntegrationId = null, $attempt, $Initial = 0)
    {
        $return_response = false;
        try {
            $ufound = $this->mobj->getPlatformAccountByUserIntegration($userIntegrationId, $this->platformId, ['access_token', 'platform_id', 'id', 'user_id', 'api_domain', 'account_name', 'app_id', 'app_secret']);
            if ($ufound && $this->platformId) {
                if (isset($ufound->platform_id) && $ufound->platform_id == $this->platformId) {
                    if ($attempt == 1 && $Initial == 1) {
                        //To pull products options from BP passing urls
                        $chunkOfUrls = PlatformUrl::select('id', 'url')->where([['user_integration_id', '=', $userIntegrationId], ['platform_id', '=', $this->platformId], ['url_name', '=', 'products'], ['status', '=', 1], ['option_status', '=', 0]])->take(10)->orderBy('created_at', 'asc')->get();
                        if (count($chunkOfUrls) > 0) {
                            $memo = [];
                            foreach ($chunkOfUrls as $url) {
                                $response = $this->bp->GetProductOptions($ufound, $url->url);
                                if ($product = json_decode($response->getBody(), true)) {
                                    if (isset($product['response']) && is_array($product['response'])) {
                                        $products = $product['response'];
                                        if ($products) {
                                            foreach ($products as $val) {
                                                $product_Id = null;
                                                if (isset($memo[$val['productId']])) {
                                                    $product_Id = $memo[$val['productId']];
                                                } else {
                                                    $find = PlatformProduct::select('id')->where(['user_integration_id' => $userIntegrationId, 'platform_id' => $this->platformId, 'api_product_id' => (string)$val['productId']])->first();
                                                    if ($find) {
                                                        $memo[$val['productId']] = $find->id;
                                                        $product_Id = $find->id;
                                                    }
                                                }

                                                if ($product_Id) {
                                                    $fields = ['api_option_id' => $val['optionId'], 'api_option_value_id' => $val['optionValueId'], 'option_name' => $val['optionName'], 'option_value' => $val['optionValue'], 'platform_product_id' => $product_Id, 'status' => 1];

                                                    $optionFind = PlatformProductOption::select('id')->where([['api_option_id', '=', $val['optionId']], ['api_option_value_id', '=', $val['optionValueId']], ['platform_product_id', '=', $product_Id]])->first();
                                                    if ($optionFind) {
                                                        $optionFind->option_value = $val['optionValue'];
                                                        $optionFind->option_name = $val['optionName'];
                                                        $optionFind->status = 1;
                                                        $optionFind->save();
                                                    } else {
                                                        PlatformProductOption::insert($fields);
                                                    }
                                                }
                                            }
                                        }
                                    } //END of foreach
                                } else {
                                    $return_response = isset($product['response']) ? $product['response'] : "API error";
                                    continue;
                                }
                                $url->option_status = 1;
                                $url->save();
                            }
                            $return_response = count($chunkOfUrls) . " - array chunks processed";
                        } else {
                            $return_response = true;
                        }
                    }
                }
            }
        } catch (\Exception $e) {
            Log::error($e->getMessage());
            $return_response = $e->getMessage();
        }

        return $return_response;
    }

    /* Insert Update Product Attributes */
    public function CreateOrUpdateProductAttributes($ProductID = null, $PostData = [])
    {
        if ($ProductID && !empty($PostData)) {
            $find = $this->mobj->getFirstResultByConditions('platform_product_detail_attributes', [
                'platform_product_id' => $ProductID,
            ], ['id']);
            if ($find) {
                $this->mobj->makeUpdate('platform_product_detail_attributes', $PostData, [
                    'platform_product_id' => $ProductID,
                ]);
            } else {
                $this->mobj->makeInsert('platform_product_detail_attributes', $PostData);
            }
        }
    }

    /* Create or Update Product Prices */
    public function CreateOrUpdateProductPrice($ProductPrimaryID, $ObjectDataPrimaryId, $PostData)
    {
        if ($ProductPrimaryID && !empty($PostData)) {
            $find = $this->mobj->getFirstResultByConditions('platform_porduct_price_list', [
                'platform_product_id' => $ProductPrimaryID,
                'platform_object_data_id' => $ObjectDataPrimaryId,
            ], ['id']);
            if ($find) {
                $this->mobj->makeUpdate('platform_porduct_price_list', $PostData, [
                    'id' => $find->id,
                ]);
            } else {
                $this->mobj->makeInsert('platform_porduct_price_list', $PostData);
            }
        }
    }

    /* Create / Update Product Prices List*/
    public function CreateOrUpdateProductPriceList($userId, $userIntegrationId, $ProducIDs = null, $ObjectName = null, $AccountDetail = null, $selected_IdentMapVal = null)
    {
        $return_response = false;
        try {

            //Handle Pricelist filter for : Heidenreich, Brodrene, Ahlsell
            $pricelistFilter = false;
            $primaryPricelistFilter = null;

            //if selected product identity is priceSKU then enable filter by priceSKU
            if ($selected_IdentMapVal == "PRICESKU") {
                $pricelistObjId = $this->helper->getObjectId('product_filterby_pricelist');
                $primaryPricelistFilter = $this->map->getMappedApiIdByObjectId($userIntegrationId, $pricelistObjId);
                if ($primaryPricelistFilter) {
                    $pricelistFilter = true;
                }
            }

            //test log
            if ($userIntegrationId == "152" || $userIntegrationId == "158" || $userIntegrationId == "144" || $userIntegrationId == "208") {
                Storage::disk('local')->append('chunk_product_for_inventory.txt', 'CreateOrUpdateProductPriceList call selected_IdentMapVal - ' . $selected_IdentMapVal . ' primaryPricelistFilter - ' . $primaryPricelistFilter);
            }

            $ObjectId = $this->helper->getObjectId($ObjectName);
            if ($ObjectId) {
                $find = $this->mobj->getResultByConditions('platform_object_data', [
                    //'user_id' => $userId,
                    'user_integration_id' => $userIntegrationId,
                    'platform_id' => $this->platformId,
                    'platform_object_id' => $ObjectId,
                ], ['id', 'api_id']);

                if (!empty($find)) {
                    $objectArr = [];
                    foreach ($find as $key => $value) {
                        $objectArr[$value->id] = $value->api_id;
                    }
                    if (!empty($objectArr)) {
                        if (isset($AccountDetail) && !empty($AccountDetail)) {
                            $ActualProducIDs = $ProducIDs;
                            sort($ProducIDs);

                            $ProducIdList = implode(",", $ProducIDs);
                            $url = "product-price/{$ProducIdList}";
                            sleep(1);
                            $response = $this->bp->GetProductPriceList($AccountDetail, $url);

                            if ($result = json_decode($response->getBody(), true)) {

                                if (isset($result['response']) && is_array($result['response'])) {
                                    $prices = $result['response'];

                                    if (!empty($prices) && is_array($prices)) {
                                        foreach ($prices as $key => $price) {
                                            $productId = $price['productId'];

                                            $ProductPrimaryID = array_search($productId, $ActualProducIDs);

                                            if ($ProductPrimaryID) {

                                                $priceFilterMatchFound = false;

                                                $productListIds = $price['priceLists'];
                                                if (is_array($productListIds) && !empty($productListIds)) {
                                                    foreach ($productListIds as $listkey => $priceList) {

                                                        $PriceObjectDataPrimaryID = array_search($priceList['priceListId'], $objectArr);

                                                        if ($PriceObjectDataPrimaryID) {
                                                            $Price = $priceList['quantityPrice'];
                                                            $Price = array_values($Price);
                                                            $Price = array_shift($Price);

                                                            if ($Price) {

                                                                $currencyCode = isset($priceList['currencyCode']) ? $priceList['currencyCode'] : null;

                                                                //if pricelist filter for supplier : heidenreich, Brodrene,Ahlsell,vikinbad
                                                                if ($pricelistFilter) {

                                                                    $productPriceSku = isset($priceList['sku']) ? $priceList['sku'] : null;
                                                                    $priceListId = isset($priceList['priceListId']) ? $priceList['priceListId'] : null;

                                                                    if ($priceListId == $primaryPricelistFilter) {

                                                                        //if productPriceSku exist then keep product other wise delete

                                                                        if ($productPriceSku) {

                                                                            $priceFilterMatchFound = true;

                                                                            //keep this product which match by pricelist filter
                                                                            Storage::disk('local')->append('chunk_product_for_inventory.txt', 'Filtered product of supplier by pricelist product_id - ' . $ProductPrimaryID . ' user_integration_id - ' . $userIntegrationId . ' SKU ' . $productPriceSku);

                                                                            //if select identity mapping is PRICESKU then update product sku
                                                                            if ($selected_IdentMapVal == "PRICESKU") {
                                                                                //is sku exists then update product's sku
                                                                                $this->mobj->makeUpdate('platform_product', ['sku' => $productPriceSku], ['id' => $ProductPrimaryID, 'user_integration_id' => $userIntegrationId]);
                                                                            }

                                                                            //insert update price list....
                                                                            $this->CreateOrUpdateProductPrice($ProductPrimaryID, $PriceObjectDataPrimaryID, ['platform_product_id' => $ProductPrimaryID, 'platform_object_data_id' => $PriceObjectDataPrimaryID, 'api_currency_code' => $currencyCode, 'price' => $Price]);
                                                                        }
                                                                    }
                                                                } else {

                                                                    $this->CreateOrUpdateProductPrice($ProductPrimaryID, $PriceObjectDataPrimaryID, ['platform_product_id' => $ProductPrimaryID, 'platform_object_data_id' => $PriceObjectDataPrimaryID, 'api_currency_code' => $currencyCode, 'price' => $Price]);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }

                                                //Delete product at the end if priceFilter is on but no filter record match then delete the product
                                                if ($pricelistFilter == true && $priceFilterMatchFound == false) {

                                                    $this->mobj->makeDelete('platform_product', ['id' => $ProductPrimaryID, 'user_integration_id' => $userIntegrationId]);

                                                    Storage::disk('local')->append('chunk_product_for_inventory.txt', 'Delete Product at the end if when PriceList filter Not match productId - ' . $ProductPrimaryID . ' user_integration_id - ' . $userIntegrationId);
                                                }
                                            }
                                        }
                                        $return_response = true;
                                    }
                                }
                            } else {
                                $return_response = isset($result['response']) ? $result['response'] : "API Error";
                            }
                        }
                    }
                }
            }
        } catch (\Exception $e) {
            $return_response = $e->getMessage();
        }
        return $return_response;
    }

    /* Get Store Customer */
    public function GetCustomers($userId = null, $userIntegrationId = null, $attempt, $Initial = 0, $is_vendor = 0)
    {
        $return_response = false;
        try {
            $ufound = $this->mobj->getPlatformAccountByUserIntegration($userIntegrationId, $this->platformId, ['access_token', 'platform_id', 'id', 'user_id', 'api_domain', 'account_name', 'app_id', 'app_secret']);
            if ($ufound && $this->platformId) {
                if (isset($ufound->platform_id) && $ufound->platform_id == $this->platformId) {
                    //for only BP integration
                    $TagFilterData = $this->map->getMappedDataByName($userIntegrationId, '', "tag", ['api_id'], 'regular', '', 'multiple'); // Get Tag filter data (if tag filter is applied)

                    if ($attempt == 1 && $Initial == 1) { // To pull customers url from BP
                        $response = $this->bp->GetCustomersUrls($ufound, true);
                        if ($customers = json_decode($response->getBody(), true)) {
                            if (!empty($customers) && isset($customers['response']['getUris']) && is_array($customers['response']['getUris'])) {
                                $urls = [];
                                foreach ($customers['response']['getUris'] as $key => $value) {
                                    $find = PlatformUrl::select('id')->where([['user_integration_id', '=', $userIntegrationId], ['platform_id', '=', $ufound->platform_id], ['url', '=', $value], ['url_name', '=', 'customers']])->first();

                                    if (!$find) {
                                        $urls[] = ['url' => $value, 'user_id' => $userId, 'platform_id' => $ufound->platform_id, 'user_integration_id' => $userIntegrationId, 'url_name' => 'customers'];
                                    }
                                }

                                if (!empty($urls)) {

                                    $this->mobj->makeInsert('platform_urls', $urls);
                                }
                            } else {
                                $return_response = $this->bp->handleResponseError($customers);
                            }
                            $return_response = true;
                        } else {
                            $return_response = "API Error";
                        }
                    } elseif ($attempt == 2 && $Initial == 1) { // To pull customers from BP passing urls

                        $chunkOfUrls = $this->mobj->getResultByConditions('platform_urls', ['status' => 0, 'platform_id' => $ufound->platform_id, 'user_integration_id' => $userIntegrationId, 'url_name' => 'customers'], ['id', 'url'], ['created_at' => 'asc'], 10);

                        if (!empty($chunkOfUrls)) {
                            if (count($chunkOfUrls) > 0) {
                                foreach ($chunkOfUrls as $url) {

                                    $response = $this->bp->GetCustomers($ufound, $url->url);

                                    if ($customer = json_decode($response->getBody(), true)) {
                                        if (isset($customer['response']) && is_array($customer['response'])) {
                                            $customers = $customer['response'];
                                            // storeing all postal address id for calling api to get address details
                                            $arr_post_addr_id = [];
                                            foreach ($customers as $cont) {
                                                if (isset($cont['postAddressIds']['DEF'])) {
                                                    $arr_post_addr_id[] = $cont['postAddressIds']['DEF'];
                                                } else if (isset($cont['postAddressIds']['BIL'])) {
                                                    $arr_post_addr_id[] = $cont['postAddressIds']['BIL'];
                                                } else if (isset($cont['postAddressIds']['DEL'])) {
                                                    $arr_post_addr_id[] = $cont['postAddressIds']['DEL'];
                                                }
                                            }
                                            $postal_addr_id_set = implode(',', $arr_post_addr_id);
                                            $response = $this->bp->GetPostalAddress($ufound, $postal_addr_id_set);
                                            $result = json_decode($response->getBody(), true);
                                            $arr_all_postal_address = [];
                                            if (isset($result['response']) && is_array($result['response'])) {
                                                $arr_all_postal_address = $result['response'];
                                            }

                                            foreach ($customers as $val) {
                                                /* if sku is empty we can not accept - 20-01-2021 -awadhesh */
                                                if (isset($val['contactId']) && isset($val['communication']['emails'])) {
                                                    $id = $val['contactId'];
                                                    $first_name = $last_name = $email = $company_id = null;

                                                    if (isset($val['firstName'])) {
                                                        $first_name = $val['firstName'];
                                                    }
                                                    if (isset($val['lastName'])) {
                                                        $last_name = $val['lastName'];
                                                    }

                                                    $account_code = @$val['assignment']['current']['accountReference'];


                                                    if (isset($val['communication'])) {
                                                        // $communication = serialize($val['communication']);
                                                        if (isset($val['communication']['emails']['PRI'])) {
                                                            $email = $val['communication']['emails']['PRI']['email'];
                                                        } elseif (isset($val['communication']['emails']['SEC'])) {
                                                            $email = $val['communication']['emails']['SEC']['email'];
                                                        } elseif (isset($val['communication']['emails']['TER'])) {
                                                            $email = $val['communication']['emails']['TER']['email'];
                                                        }
                                                    }

                                                    if (isset($val['companyId'])) {
                                                        $company_id = $val['companyId'];
                                                    }

                                                    $postal_addr_id = null;
                                                    if (isset($val['postAddressIds']['DEF'])) {
                                                        $postal_addr_id = $val['postAddressIds']['DEF'];
                                                    } else if (isset($val['postAddressIds']['BIL'])) {
                                                        $postal_addr_id = $val['postAddressIds']['BIL'];
                                                    } else if (isset($val['postAddressIds']['DEL'])) {
                                                        $postal_addr_id = $val['postAddressIds']['DEL'];
                                                    }

                                                    $fields = array(
                                                        'user_id' => $userId,
                                                        'user_integration_id' => $userIntegrationId,
                                                        'platform_id' => $ufound->platform_id,
                                                        'api_customer_id' => $id,
                                                        'api_customer_code' => $account_code,
                                                        'first_name' => $first_name,
                                                        'last_name' => $last_name,
                                                        'email' => $email,
                                                        'company_id' => $company_id,
                                                        'customer_name' => $first_name . " " . $last_name,
                                                        'api_updated_at' => $val['updatedOn'],
                                                    );

                                                    // Customer PriceList Id
                                                    if (isset($val['financialDetails']) && isset($val['financialDetails']['priceListId'])) {
                                                        $fields['api_customer_group_id'] = $val['financialDetails']['priceListId'];
                                                    }

                                                    //if Customer type is staff
                                                    if (isset($val['relationshipToAccount']) && $val['relationshipToAccount']['isStaff'] == true) {
                                                        $fields['type'] = 'Employee';
                                                    } else if (isset($val['relationshipToAccount']) && $val['relationshipToAccount']['isSupplier'] == true) {
                                                        $fields['type'] = 'Vendor';
                                                    } else {
                                                        $fields['type'] = 'Customer';
                                                    }

                                                    $addressLine1 = $addressLine2 = $addressLine3 = $addressLine4 = $postalCode = $countryIsoCode = null;
                                                    if (isset($postal_addr_id)) {
                                                        $key = array_search($postal_addr_id, array_column($arr_all_postal_address, 'addressId'));
                                                        if (is_numeric($key)) {
                                                            $addressLine1 = (isset($arr_all_postal_address[$key]['addressLine1']) ? $arr_all_postal_address[$key]['addressLine1'] : null);
                                                            $addressLine2 = (isset($arr_all_postal_address[$key]['addressLine2']) ? $arr_all_postal_address[$key]['addressLine2'] : null);
                                                            $addressLine3 = (isset($arr_all_postal_address[$key]['addressLine3']) ? $arr_all_postal_address[$key]['addressLine3'] : null);
                                                            $addressLine4 = (isset($arr_all_postal_address[$key]['addressLine4']) ? $arr_all_postal_address[$key]['addressLine4'] : null);
                                                            $postalCode = (isset($arr_all_postal_address[$key]['postalCode']) ? $arr_all_postal_address[$key]['postalCode'] : null);
                                                            $countryIsoCode = (isset($arr_all_postal_address[$key]['countryIsoCode2']) ? $arr_all_postal_address[$key]['countryIsoCode2'] : null);
                                                        }
                                                    }
                                                    $fields['address1'] = trim((isset($addressLine1) ? $addressLine1 . ',' : '') . " " . $addressLine2);
                                                    $fields['address2'] = $addressLine3;
                                                    $fields['address3'] = $addressLine4;
                                                    $fields['postal_addresses'] = $postalCode;
                                                    $fields['country'] = $countryIsoCode;

                                                    $findProduct = $this->mobj->getFirstResultByConditions('platform_customer', [
                                                        'platform_id' => $ufound->platform_id, 'api_customer_id' => (string)$id, 'user_integration_id' => $userIntegrationId,
                                                    ], ['id', 'api_updated_at']);
                                                    if ($findProduct) {
                                                        if ($findProduct->api_updated_at != $val['updatedOn']) {
                                                            $fields['sync_status'] = 'Ready';
                                                        }

                                                        // Apply Tag filter
                                                        if (!is_bool($TagFilterData) && $TagFilterData && count($TagFilterData) > 0) {
                                                            if (isset($val['contactTags'])) {
                                                                $response = app('App\Http\Controllers\Brightpearl\BrightpearlUtility')->CustomerTagFilter($TagFilterData, $val['contactTags']);
                                                                if (!$response) {
                                                                    $fields['sync_status'] = 'Inactive';
                                                                }
                                                            } else {
                                                                $fields['sync_status'] = 'Inactive';
                                                            }
                                                        }

                                                        $this->mobj->makeUpdate('platform_customer', [
                                                            'id' => $findProduct->id,
                                                        ], $fields);
                                                        $custom_customer_id = $findProduct->id;
                                                    } else {
                                                        $fields['sync_status'] = 'Ready';
                                                        // Apply Tag filter
                                                        if (!is_bool($TagFilterData) && $TagFilterData && count($TagFilterData) > 0) {
                                                            if (isset($val['contactTags'])) {
                                                                $response = app('App\Http\Controllers\Brightpearl\BrightpearlUtility')->CustomerTagFilter($TagFilterData, $val['contactTags']);
                                                                if (!$response) {
                                                                    $fields['sync_status'] = 'Inactive';
                                                                }
                                                            } else {
                                                                $fields['sync_status'] = 'Inactive';
                                                            }
                                                        }
                                                        $custom_customer_id = $this->mobj->makeInsertGetId('platform_customer', $fields);
                                                    }

                                                    // Store customer additional info
                                                    if (!is_bool($TagFilterData) && $TagFilterData && count($TagFilterData) && isset($val['contactTags']) && isset($custom_customer_id)) {
                                                        app('App\Http\Controllers\Brightpearl\BrightpearlUtility')->StoreCustomerTags($custom_customer_id, $val['contactTags']);
                                                    }
                                                    // if (isset($val['customFields']) && count($val['customFields'])) {
                                                    //     Storage::disk('local')->append('customer-custom-one.txt', json_encode($val['customFields']));
                                                    // }

                                                    $this->mobj->makeUpdate('platform_custom_field_values', ['status' => 0], ['record_id' => $custom_customer_id, 'user_integration_id' => $userIntegrationId, 'platform_id' => $this->platformId]);
                                                    // UPDATE OR INSERT CUSTOMER CUSTOM FIELD::START
                                                    if (!empty($val['customFields'])) {
                                                        $customFields = $val['customFields'];
                                                        $customObjectId = $this->helper->getObjectId('customer');
                                                        foreach ($customFields as $code => $customField) {
                                                            $findRecord = $this->mobj->getFirstResultByConditions('platform_fields', ['platform_id' => $ufound->platform_id, 'user_integration_id' => $userIntegrationId, 'field_type' => 'custom', 'name' => $code, 'platform_object_id' => $customObjectId, 'status' => 1], ['id']);

                                                            if ($findRecord) {
                                                                $customFieldValue = '';
                                                                if (is_array($customField)) {
                                                                    $customFieldValue = @$customField['value'];
                                                                } else {
                                                                    $customFieldValue = $customField;
                                                                }

                                                                $fields = array('platform_field_id' => $findRecord->id, 'user_integration_id' => $userIntegrationId, 'platform_id' => $ufound->platform_id, 'field_value' => $customFieldValue, 'record_id' => $custom_customer_id, 'status' => 1);

                                                                $findRecord = $this->mobj->getFirstResultByConditions('platform_custom_field_values', ['record_id' => $custom_customer_id, 'platform_field_id' => $findRecord->id, 'user_integration_id' => $userIntegrationId, 'platform_id' => $ufound->platform_id], ['id']);
                                                                if ($findRecord) {
                                                                    $this->mobj->makeUpdate('platform_custom_field_values', $fields, ['id' => $findRecord->id]);
                                                                } else {
                                                                    $this->mobj->makeInsert('platform_custom_field_values', $fields);
                                                                }
                                                            }
                                                        }
                                                    }
                                                    // UPDATE OR INSERT CUSTOMER CUSTOM FIELD::END
                                                }
                                            } //END of foreach
                                            $this->mobj->makeUpdate('platform_urls', ['status' => 1], ['id' => $url->id]);
                                        } else {
                                            /* If any error set status=1 and skip that url */
                                            $return_response = $this->bp->handleResponseError($customer);
                                            $this->mobj->makeUpdate('platform_urls', ['status' => 1, 'response' => $return_response], ['id' => $url->id]);
                                            continue;
                                        }
                                    }
                                }

                                $return_response = count($chunkOfUrls) . "- array chunks processed";
                            } else {
                                $return_response = true;
                            }
                        }
                    } elseif ($attempt == 3 && $Initial == 0) {
                        //To pull update or new products from BP
                        $gettimezone = $this->mobj->getFirstResultByConditions('platform_account_addtional_information', ['account_id' => $ufound->id, 'user_integration_id' => $userIntegrationId], ['account_timezone']);
                        if ($gettimezone) {
                            date_default_timezone_set($gettimezone->account_timezone);
                        }
                        //Get the current timestamp.

                        $wherecusdata = ['user_integration_id' => $userIntegrationId, 'platform_id' => $this->platformId];
                        if ($is_vendor == 1) {
                            $wherecusdata['type'] = 'Vendor';
                        }

                        $res = DB::table('platform_customer')->select('api_updated_at')->where($wherecusdata)->orderByRaw("DATE_FORMAT(api_updated_at, '%Y-%m-%d %H-%i-%s') DESC")->first();

                        if ($is_vendor == 1) {

                            $start_t = '';
                            if (isset($res->api_updated_at) && $res->api_updated_at) {
                                $start_t = str_replace('+', '%2B', $res->api_updated_at); //date('Y-m-d\TH:i:s', strtotime($res->api_updated_at));
                            }

                            $url = "contact-search?isSupplier=true&columns=contactId&sort=updatedOn.ASC&pageSize=200&includeOptional=customFields";
                            if ($start_t) {
                                $end_t = date('Y-m-d\TH:i:s', time());
                                $url .= "&updatedOn=" . $start_t . "/" . $end_t;
                            }
                        } else {

                            $end_t = date('Y-m-d\TH:i:s', time());
                            $api_updated_at = $end_t;
                            if (isset($res->api_updated_at) && $res->api_updated_at) {
                                $api_updated_at = $res->api_updated_at;
                            }
                            $start_t = urlencode($api_updated_at);


                            $url = "contact-search?columns=contactId&updatedOn=" . $start_t . "/" . $end_t . '&includeOptional=customFields';
                        }

                        //echo $url;

                        $response = $this->bp->GetCustomers($ufound, $url, 'search');
                        //$contact = json_decode($response->getBody(), true);

                        if ($response) {
                            $contact = json_decode($response->getBody(), true);
                            if ($contact &&  $response != null) {

                                if (isset($contact['response']['results']) && is_array($contact['response']['results'])) {
                                    $contacts = $contact['response']['results'];
                                    $array = [];
                                    if (!empty($contacts)) {
                                        foreach ($contacts as $val) {
                                            $array[] = $val[0];
                                        }
                                    }
                                    sort($array);

                                    $array = implode(',', $array);



                                    if (isset($array) && $array != "") {
                                        $url = "contact/{$array}";
                                        $response = $this->bp->GetCustomers($ufound, $url);
                                        $contact = json_decode($response->getBody(), true);

                                        if ($contact && $response != null) {
                                            //echo "<pre>";
                                            //print_r($contact);
                                            //die;
                                            if (isset($contact['response']) && is_array($contact['response'])) {
                                                $contacts = $contact['response'];
                                                $arr_post_addr_id = [];
                                                foreach ($contacts as $cont) {
                                                    if (isset($cont['postAddressIds']['DEF'])) {
                                                        $arr_post_addr_id[] = $cont['postAddressIds']['DEF'];
                                                    } else if (isset($cont['postAddressIds']['BIL'])) {
                                                        $arr_post_addr_id[] = $cont['postAddressIds']['BIL'];
                                                    } else if (isset($cont['postAddressIds']['DEL'])) {
                                                        $arr_post_addr_id[] = $cont['postAddressIds']['DEL'];
                                                    }
                                                }
                                                $postal_addr_id_set = implode(',', $arr_post_addr_id);
                                                $response = $this->bp->GetPostalAddress($ufound, $postal_addr_id_set);
                                                $result = json_decode($response->getBody(), true);
                                                $arr_all_postal_address = [];
                                                if (isset($result['response']) && is_array($result['response'])) {
                                                    $arr_all_postal_address = $result['response'];
                                                }
                                                foreach ($contacts as $val) {
                                                    /* if sku is empty we can not accept - 20-01-2021 -awadhesh */
                                                    if (isset($val['contactId']) && isset($val['communication']['emails'])) {
                                                        $id = $val['contactId'];
                                                        $first_name = $last_name = $email = $company_id = null;

                                                        if (isset($val['firstName'])) {
                                                            $first_name = $val['firstName'];
                                                        }
                                                        if (isset($val['lastName'])) {
                                                            $last_name = $val['lastName'];
                                                        }

                                                        $account_code = @$val['assignment']['current']['accountReference'];


                                                        if (isset($val['communication'])) {
                                                            if (isset($val['communication']['emails']['PRI'])) {
                                                                $email = $val['communication']['emails']['PRI']['email'];
                                                            } elseif (isset($val['communication']['emails']['SEC'])) {
                                                                $email = $val['communication']['emails']['SEC']['email'];
                                                            } elseif (isset($val['communication']['emails']['TER'])) {
                                                                $email = $val['communication']['emails']['TER']['email'];
                                                            }
                                                        }

                                                        if (isset($val['companyId'])) {
                                                            $company_id = $val['companyId'];
                                                        }

                                                        $postal_addr_id = null;
                                                        if (isset($val['postAddressIds']['DEF'])) {
                                                            $postal_addr_id = $val['postAddressIds']['DEF'];
                                                        } else if (isset($val['postAddressIds']['BIL'])) {
                                                            $postal_addr_id = $val['postAddressIds']['BIL'];
                                                        } else if (isset($val['postAddressIds']['DEL'])) {
                                                            $postal_addr_id = $val['postAddressIds']['DEL'];
                                                        }

                                                        $fields = array(
                                                            'user_id' => $userId,
                                                            'user_integration_id' => $userIntegrationId,
                                                            'platform_id' => $ufound->platform_id,
                                                            'api_customer_id' => $id,
                                                            'api_customer_code' => $account_code,
                                                            'first_name' => $first_name,
                                                            'last_name' => $last_name,
                                                            'email' => $email,
                                                            'company_id' => $company_id,
                                                            'customer_name' => $first_name . " " . $last_name,
                                                            'api_updated_at' => $val['updatedOn'],
                                                        );

                                                        // Customer PriceList Id
                                                        if (isset($val['financialDetails']) && isset($val['financialDetails']['priceListId'])) {
                                                            $fields['api_customer_group_id'] = $val['financialDetails']['priceListId'];
                                                        }

                                                        //if Customer type is staff
                                                        if (isset($val['relationshipToAccount']) && $val['relationshipToAccount']['isStaff'] == true) {
                                                            $fields['type'] = 'Employee';
                                                        } else if (isset($val['relationshipToAccount']) && $val['relationshipToAccount']['isSupplier'] == true) {
                                                            $fields['type'] = 'Vendor';
                                                        } else {
                                                            $fields['type'] = 'Customer';
                                                        }

                                                        $addressLine1 = $addressLine2 = $addressLine3 = $addressLine4 = $postalCode = $countryIsoCode = null;
                                                        if (isset($postal_addr_id)) {
                                                            $key = array_search($postal_addr_id, array_column($arr_all_postal_address, 'addressId'));
                                                            if (is_numeric($key)) {
                                                                $addressLine1 = (isset($arr_all_postal_address[$key]['addressLine1']) ? $arr_all_postal_address[$key]['addressLine1'] : null);
                                                                $addressLine2 = (isset($arr_all_postal_address[$key]['addressLine2']) ? $arr_all_postal_address[$key]['addressLine2'] : null);
                                                                $addressLine3 = (isset($arr_all_postal_address[$key]['addressLine3']) ? $arr_all_postal_address[$key]['addressLine3'] : null);
                                                                $addressLine4 = (isset($arr_all_postal_address[$key]['addressLine4']) ? $arr_all_postal_address[$key]['addressLine4'] : null);
                                                                $postalCode = (isset($arr_all_postal_address[$key]['postalCode']) ? $arr_all_postal_address[$key]['postalCode'] : null);
                                                                $countryIsoCode = (isset($arr_all_postal_address[$key]['countryIsoCode2']) ? $arr_all_postal_address[$key]['countryIsoCode2'] : null);
                                                            }
                                                        }
                                                        $fields['address1'] = rtrim(trim((isset($addressLine1) ? $addressLine1 . ',' : '') . " " . $addressLine2), ',');
                                                        $fields['address2'] = $addressLine3;
                                                        $fields['address3'] = $addressLine4;
                                                        $fields['postal_addresses'] = $postalCode;
                                                        $fields['country'] = $countryIsoCode;

                                                        $findProduct = $this->mobj->getFirstResultByConditions('platform_customer', [
                                                            'platform_id' => $ufound->platform_id, 'api_customer_id' => (string)$id, 'user_integration_id' => $userIntegrationId,
                                                        ], ['id', 'api_updated_at']);
                                                        if ($findProduct) {
                                                            if ($findProduct->api_updated_at != $val['updatedOn']) {
                                                                $fields['sync_status'] = 'Ready';
                                                            }
                                                            // Apply Tag filter
                                                            if (!is_bool($TagFilterData) && $TagFilterData && count($TagFilterData)) {
                                                                if (isset($val['contactTags'])) {
                                                                    $response = app('App\Http\Controllers\Brightpearl\BrightpearlUtility')->CustomerTagFilter($TagFilterData, $val['contactTags']);
                                                                    if (!$response) {
                                                                        $fields['sync_status'] = 'Inactive';
                                                                    }
                                                                } else {
                                                                    $fields['sync_status'] = 'Inactive';
                                                                }
                                                            }
                                                            $this->mobj->makeUpdate('platform_customer', $fields, ['id' => $findProduct->id]);
                                                            $custom_customer_id = $findProduct->id;
                                                        } else {
                                                            $fields['sync_status'] = 'Ready';
                                                            // Apply Tag filter
                                                            if (!is_bool($TagFilterData) && $TagFilterData && count($TagFilterData)) {
                                                                if (isset($val['contactTags'])) {
                                                                    $response = app('App\Http\Controllers\Brightpearl\BrightpearlUtility')->CustomerTagFilter($TagFilterData, $val['contactTags']);
                                                                    if (!$response) {
                                                                        $fields['sync_status'] = 'Inactive';
                                                                    }
                                                                } else {
                                                                    $fields['sync_status'] = 'Inactive';
                                                                }
                                                            }
                                                            $custom_customer_id = $this->mobj->makeInsertGetId('platform_customer', $fields);
                                                        }

                                                        // Store customer additional info
                                                        if (!is_bool($TagFilterData) && $TagFilterData && count($TagFilterData) && isset($val['contactTags']) && isset($custom_customer_id)) {
                                                            app('App\Http\Controllers\Brightpearl\BrightpearlUtility')->StoreCustomerTags($custom_customer_id, $val['contactTags']);
                                                        }

                                                        // if (isset($val['customFields']) && count($val['customFields'])) {
                                                        //     Storage::disk('local')->append('customer-custom-two.txt', json_encode($val['customFields']));
                                                        // }

                                                        $this->mobj->makeUpdate('platform_custom_field_values', ['status' => 0], ['record_id' => $custom_customer_id, 'user_integration_id' => $userIntegrationId, 'platform_id' => $this->platformId]);
                                                        // UPDATE OR INSERT CUSTOMER CUSTOM FIELD::START
                                                        if (!empty($val['customFields'])) {
                                                            $customFields = $val['customFields'];

                                                            $customObjectId = $this->helper->getObjectId('customer');

                                                            foreach ($customFields as $code => $customField) {
                                                                $findRecord = $this->mobj->getFirstResultByConditions('platform_fields', ['platform_id' => $ufound->platform_id, 'user_integration_id' => $userIntegrationId, 'field_type' => 'custom', 'name' => $code, 'platform_object_id' => $customObjectId, 'status' => 1], ['id']);

                                                                if ($findRecord) {
                                                                    $customFieldValue = '';
                                                                    if (is_array($customField)) {
                                                                        $customFieldValue = @$customField['value'];
                                                                    } else {
                                                                        $customFieldValue = $customField;
                                                                    }

                                                                    $fields = array('platform_field_id' => $findRecord->id, 'user_integration_id' => $userIntegrationId, 'platform_id' => $ufound->platform_id, 'field_value' => $customFieldValue, 'record_id' => $custom_customer_id, 'status' => 1);

                                                                    $findRecord = $this->mobj->getFirstResultByConditions('platform_custom_field_values', ['record_id' => $custom_customer_id, 'platform_field_id' => $findRecord->id, 'user_integration_id' => $userIntegrationId, 'platform_id' => $ufound->platform_id], ['id']);
                                                                    if ($findRecord) {
                                                                        $this->mobj->makeUpdate('platform_custom_field_values', $fields, ['id' => $findRecord->id]);
                                                                    } else {
                                                                        $this->mobj->makeInsert('platform_custom_field_values', $fields);
                                                                    }
                                                                }
                                                            }
                                                        }
                                                        // UPDATE OR INSERT CUSTOMER CUSTOM FIELD::END

                                                        $return_response = true;
                                                    }
                                                }
                                            } else {
                                                $return_response = isset($contact['response']) ? $contact['response'] : "API Error";
                                            }
                                        } else {
                                            $return_response = "API Error";
                                        }
                                    }
                                } else {
                                    $return_response = isset($contact['response']) ? $contact['response'] : "API Error";
                                }
                            } else {
                                $return_response = "API Error";
                            }
                        } else {
                            $return_response = "API Error";
                        }
                    }
                }
            }
        } catch (\Exception $e) {
            // Log::error($e->getMessage());
            $return_response = $e->getMessage();
        }
        return $return_response;
    }

    /* Create Customer By Email */
    public function CreateCustomers($userId = null, $userIntegrationId = null, array $postData)
    {
        try {

            $ufound = $this->mobj->getPlatformAccountByUserIntegration($userIntegrationId, $this->platformId, ['access_token', 'platform_id', 'id', 'user_id', 'api_domain', 'account_name', 'app_id', 'app_secret']);
            if ($ufound && $this->platformId) {
                //To pull update or new products from BP
                $gettimezone = $this->mobj->getFirstResultByConditions('platform_account_addtional_information', ['account_id' => $ufound->id, 'user_integration_id' => $userIntegrationId], ['account_timezone']);
                if ($gettimezone) {
                    date_default_timezone_set($gettimezone->account_timezone);
                }
                //Get the current timestamp.
                $curr_timestamp = date('Y-m-d\TH:i:s', time());

                if (isset($ufound->platform_id) && $ufound->platform_id == $this->platformId) { //for only BP integration

                    $PostAddressData = [
                        "addressLine1" => $postData['addressLine1'],
                        "addressLine2" => $postData['addressLine2'],
                        "addressLine3" => $postData['addressLine3'],
                        "addressLine4" => $postData['addressLine4'],
                        "postalCode" => $postData['postalCode'],
                        "countryIsoCode" => $postData['countryIsoCode'],
                        "company" => isset($postData['company']) ? $postData['company'] : "",
                    ];

                    $response = $this->bp->CreatePostalAddress($ufound, null, $PostAddressData);

                    if ($postal_response = json_decode($response->getBody(), true)) {

                        if (!empty($postal_response) && isset($postal_response['response'])) {
                            if ($postData['firstname']) {
                                $firstname = strlen($postData['firstname']) > 32 ? substr($postData['firstname'], 0, 32) : $postData['firstname'];
                            } else {
                                $firstname = "";
                            }
                            if ($postData['lastname']) {
                                $lastname = strlen($postData['lastname']) > 32 ? substr($postData['lastname'], 0, 32) : $postData['lastname'];
                            } else {
                                $lastname = "";
                            }
                            $customerData = [
                                "firstName" => $firstname,
                                "lastName" => $lastname,
                                "postAddressIds" => [
                                    "DEF" => $postal_response['response'],
                                    "BIL" => $postal_response['response'],
                                    "DEL" => $postal_response['response'],
                                ],
                                "communication" => [
                                    "emails" => [
                                        "PRI" => [
                                            "email" => isset($postData['email']) ? $postData['email'] : "",
                                        ],
                                        "TER" => [
                                            "email" => isset($postData['email3']) ? $postData['email3'] : "",
                                        ],

                                    ],
                                    "telephones" => [
                                        "PRI" => isset($postData['phone_number']) ? $postData['phone_number'] : "",
                                        "FAX" => isset($postData['fax']) ? $postData['fax'] : "",
                                    ],

                                ],
                                "relationshipToAccount" => [
                                    "isSupplier" => false,
                                    "isStaff" => false,
                                ],
                            ];
                            if (isset($postData['customer_price_list_id'])) {
                                $customerData['financialDetails']['priceListId'] = $postData['customer_price_list_id'];
                            }
                            if (isset($postData['company'])) {
                                $customerData["organisation"] = [
                                    "name" => isset($postData['company']) ? $postData['company'] : "",
                                ];
                            }
                            $response = $this->bp->CreateCustomer($ufound, null, $customerData);
                            if ($customer = json_decode($response->getBody(), true)) {

                                if (!empty($customer) && isset($customer['response']) && is_int($customer['response'])) {

                                    $fields = array(
                                        'user_id' => $userId,
                                        'user_integration_id' => $userIntegrationId,
                                        'platform_id' => $ufound->platform_id,
                                        'api_customer_id' => $customer['response'],
                                        'first_name' => $postData['firstname'],
                                        'last_name' => $postData['lastname'],
                                        'email' => $postData['email'],
                                        'sync_status' => 'Ready',
                                        'api_updated_at' => (isset($postData['updatedOn']) ? $postData['updatedOn'] : $curr_timestamp),
                                    );
                                    if (isset($postData['customer_price_list_id'])) {
                                        $fields['api_customer_group_id'] = $postData['customer_price_list_id'];
                                    }
                                    $this->mobj->makeInsert('platform_customer', $fields);
                                    return $customer['response'];
                                } else {
                                    return $this->bp->handleResponseError($customer);
                                }
                            }
                            return false;
                        }
                    }
                    return false;
                }
            }
        } catch (\Exception $e) {
            Log::error($e->getMessage());
        }
    }

    /* Create Order In BP */
    public function CreateOrderInBrightpearl($ufound = null, $userIntegrationId = null, array $postData)
    {
        try {
            if ($ufound) {

                $response = $this->bp->CreateOrder($ufound, null, $postData, 'json');

                if ($order = json_decode($response->getBody(), true)) {

                    return $order;
                }
                return false;
            } else {
                $ufound = $this->mobj->getPlatformAccountByUserIntegration($userIntegrationId, $this->platformId, ['access_token', 'platform_id', 'id', 'user_id', 'api_domain', 'account_name', 'app_id', 'app_secret']);
                if ($ufound && $this->platformId) {
                    if (isset($ufound->platform_id) && $ufound->platform_id == $this->platformId) { //for only BP integration

                        $response = $this->bp->CreateOrder($ufound, null, $postData, 'json');

                        if ($order = json_decode($response->getBody(), true)) {

                            return $order;
                        }
                        return false;
                    }
                }
            }
        } catch (\Exception $e) {
            Log::error($e->getMessage());
            return false;
        }
    }

    /* Create Order Sales Credit in BP */
    public function CreateSalesCredit($ufound = null, $userIntegrationId = null, array $postData)
    {
        try {

            if ($ufound) {

                $response = $this->bp->CreateSalesCredit($ufound, null, $postData, 'json');

                if ($order = json_decode($response->getBody(), true)) {

                    return $order;
                }
                return false;
            } else {
                $ufound = $this->mobj->getPlatformAccountByUserIntegration($userIntegrationId, $this->platformId, ['access_token', 'platform_id', 'id', 'user_id', 'api_domain', 'account_name', 'app_id', 'app_secret']);
                if ($ufound && $this->platformId) {
                    if (isset($ufound->platform_id) && $ufound->platform_id == $this->platformId) {
                        //For only BP integration
                        $response = $this->bp->CreateOrder($ufound, null, $postData, 'json');
                        if ($order = json_decode($response->getBody(), true)) {
                            return $order;
                        }
                        return false;
                    }
                }
            }
        } catch (\Exception $e) {
            Log::error($e->getMessage());
            return false;
        }
    }

    /* Create Order Payment */
    public function CreateCustomerPayment($userId = null, $userIntegrationId = null, array $postData)
    {
        try {
            $ufound = $this->mobj->getPlatformAccountByUserIntegration($userIntegrationId, $this->platformId, ['access_token', 'platform_id', 'id', 'user_id', 'api_domain', 'account_name', 'app_id', 'app_secret']);
            if ($ufound && $this->platformId) {
                if (isset($ufound->platform_id) && $ufound->platform_id == $this->platformId) {
                    //for only BP integration
                    $response = $this->bp->CreateCustomerPayment($ufound, null, $postData, 'json');

                    if ($order = json_decode($response->getBody(), true)) {
                        return $order;
                    }
                    return false;
                }
            }
        } catch (\Exception $e) {
            Log::error($e->getMessage());
            return false;
        }
    }

    /* Get Order In BP */
    public function GetOrderDetails($OrderID, $userIntegrationId, $ufound = null)
    {
        try {
            if ($ufound) {
                $response = $this->bp->GetOrder($ufound, null, $OrderID, "");
                if ($order = json_decode($response->getBody(), true)) {
                    return $order;
                }
                return false;
            } else {
                $ufound = $this->mobj->getPlatformAccountByUserIntegration($userIntegrationId, $this->platformId, ['access_token', 'platform_id', 'id', 'user_id', 'api_domain', 'account_name', 'app_id', 'app_secret']);
                if ($ufound && $this->platformId) {
                    if (isset($ufound->platform_id) && $ufound->platform_id == $this->platformId) { //for only BP integration
                        $response = $this->bp->GetOrder($ufound, null, $OrderID, "");
                        if ($order = json_decode($response->getBody(), true)) {
                            return $order;
                        }
                        return false;
                    }
                }
            }
        } catch (\Exception $e) {
            Log::error($e->getMessage());
            return false;
        }
    }

    /* Store New Created Order Detail */
    public function storeNewCreatedOrderDetail($user_id, $user_integration_id, $api_order_id, $platform_order_id, $platform_account)
    {
        try {
            $response = $this->bp->GetOrder($platform_account, null, $api_order_id, "normal");
            if ($orders = json_decode($response->getBody(), true)) {
                if (isset($orders['response'][0]['id'])) {
                    foreach ($orders['response'] as $order) {
                        $orderDetails = ['user_id' => $user_id, 'user_integration_id' => $user_integration_id, 'platform_id' => $this->platformId, 'order_type' => "SO", 'api_order_id' => $order['id'], 'api_order_reference' => $order['reference'], 'order_status' => @$order['orderStatus']['name'], 'order_date' => $order['placedOn'], 'tax_date' => isset($order['invoices'][0]['taxDate']) ? $order['invoices'][0]['taxDate'] : '', 'api_pricelist_id' => @$order['priceListId'], 'api_order_payment_status' => strtolower($order['orderPaymentStatus']), 'currency' => @$order['currency']['orderCurrencyCode'], 'delivery_date' => @$order['delivery']['deliveryDate'], 'shipping_method' => @$order['delivery']['shippingMethodId'], 'total_tax' => isset($order['totalValue']['taxAmount']) ? $order['totalValue']['taxAmount'] : 0, 'total_amount' => isset($order['totalValue']['total']) ? $order['totalValue']['total'] : 0, 'net_amount' => isset($order['totalValue']['net']) ? $order['totalValue']['net'] : 0];

                        $this->mobj->makeUpdate('platform_order', $orderDetails, ['id' => $platform_order_id]);

                        $additionalAccountInfo = PlatformAccountAdditionalInfo::where([['account_id', '=', $platform_account->id], ['user_integration_id', '=', $user_integration_id]])->select('account_currency_code', 'account_product_lenght_unit', 'account_product_weight_unit', 'account_shipping_nominal_code', 'account_discount_nominal_code', 'account_sale_nominal_code', 'account_purchase_nominal_code', 'account_timezone', 'account_tax_scheme', 'account_giftcard_nominal_code')->first();

                        if ($additionalAccountInfo) {
                            if (count($order['orderRows']) > 0) {
                                foreach ($order['orderRows'] as $orderRowKey => $orderRow) {
                                    $lineItem = ['platform_order_id' => $platform_order_id, 'api_order_line_id' => $orderRowKey, 'api_product_id' => $orderRow['productId'], 'product_name' => $orderRow['productName'], 'sku' => $orderRow['productSku'], 'qty' => isset($orderRow['quantity']['magnitude']) ? $orderRow['quantity']['magnitude'] : 0, 'unit_price' => isset($orderRow['itemCost']['value']) ? $orderRow['itemCost']['value'] : 0, 'price' => @$orderRow['productPrice']['value'] ? @$orderRow['productPrice']['value'] : 0, 'total' => isset($orderRow['rowValue']['rowNet']['value']) ? $orderRow['rowValue']['rowNet']['value'] : 0, 'total_tax' => isset($orderRow['rowValue']['rowTax']['value']) ? $orderRow['rowValue']['rowTax']['value'] : 0, 'taxes' => @$orderRow['rowValue']['taxClassId'], 'api_code' => @$orderRow['nominalCode'], 'row_type' => isset($orderRow['nominalCode']) ? BrightpearlServices::getBPLineItemType($additionalAccountInfo, $orderRow['nominalCode']) : 'ITEM'];

                                    $where = ['platform_order_id' => $platform_order_id, 'api_order_line_id' => $orderRowKey];
                                    PlatformOrderLine::updateOrCreate($where, $lineItem);
                                }
                            }
                        }

                        $orderAddressData = [];
                        $delivery = @$order['parties']['delivery'];
                        if (is_array($delivery)) {
                            $deliveryAddress = ['platform_order_id' => $platform_order_id, 'address_name' => @$delivery['addressFullName'], 'company' => @$delivery['companyName'], 'address1' => @$delivery['addressLine1'], 'address2' => @$delivery['addressLine2'], 'address3' => @$delivery['addressLine3'], 'address4' => @$delivery['addressLine4'], 'postal_code' => @$delivery['postalCode'], 'country' => @$delivery['countryIsoCode'], 'phone_number' => @$delivery['telephone'], 'email' => @$delivery['email'], 'address_type' => "shipping"];
                            array_push($orderAddressData, $deliveryAddress);
                        }

                        $customer = $order['parties']['customer'];
                        if (is_array($customer)) {
                            $customerAddress = ['platform_order_id' => $platform_order_id, 'address_name' => @$customer['addressFullName'], 'company' => @$customer['companyName'], 'address1' => @$customer['addressLine1'], 'address2' => @$customer['addressLine2'], 'address3' => @$customer['addressLine3'], 'address4' => @$customer['addressLine4'], 'postal_code' => @$customer['postalCode'], 'country' => @$customer['countryIsoCode'], 'phone_number' => @$customer['telephone'], 'email' => @$customer['email'], 'address_type' => "customer"];
                            array_push($orderAddressData, $customerAddress);

                            /** save customer details */
                            $customerData = array('user_id' => $user_id, 'user_integration_id' => $user_integration_id, 'platform_id' => $this->platformId, 'api_customer_id' => $customer['contactId'], 'customer_name' => @$customer['addressFullName'], 'company_name' => @$customer['companyName'], 'phone' => ((@$customer['telephone']) ? @$customer['telephone'] : @$customer['mobileTelephone']), 'email' => @$customer['email'], 'address1' => @$customer['addressLine1'], 'address2' => @$customer['addressLine2'], 'address3' => @$customer['addressLine3'], 'postal_addresses' => @$customer['postalCode'], 'country' => @$customer['countryIsoCode']);

                            $platform_customer = $this->mobj->getFirstResultByConditions('platform_customer', ['platform_id' => $this->platformId, 'api_customer_id' => (string)$customer['contactId'], 'user_integration_id' => $user_integration_id], ['id']);
                            if ($platform_customer) {
                                $platform_customer_id = $platform_customer->id;
                                $this->mobj->makeUpdate('platform_customer', $customerData, ['id' => $platform_customer_id]);
                            } else {
                                $platform_customer_id = $this->mobj->makeInsertGetId('platform_customer', $customerData);
                            }

                            $this->mobj->makeUpdate('platform_order', ['platform_customer_id' => $platform_customer_id], ['id' => $platform_order_id]);
                        }

                        $billing = $order['parties']['billing'];
                        if (is_array($billing)) {
                            $billingAddress = ['platform_order_id' => $platform_order_id, 'address_name' => @$billing['addressFullName'], 'company' => @$billing['companyName'], 'address1' => @$billing['addressLine1'], 'address2' => @$billing['addressLine2'], 'address3' => @$billing['addressLine3'], 'address4' => @$billing['addressLine4'], 'postal_code' => @$billing['postalCode'], 'country' => @$billing['countryIsoCode'], 'phone_number' => @$billing['telephone'], 'email' => @$billing['email'], 'address_type' => "billing"];
                            array_push($orderAddressData, $billingAddress);
                        }

                        $this->mobj->makeInsert('platform_order_address', $orderAddressData);
                    }
                }
            }
        } catch (\Exception $e) {
            Log::error($user_integration_id . "->BrightPearlApiController->storeNewCreatedOrderDetail->" . $e->getMessage());
        }
    }

    /* Get Order Details by ID */
    public function GetOrderByID($OrderID, $account)
    {
        $response = $this->bp->GetOrder($account, null, $OrderID, "");

        if ($order = json_decode($response->getBody(), true)) {
            return $order;
        }
        return false;
    }

    /* Get Products */
    public function GetProduct($ProductIDs, $userIntegrationId)
    {
        try {
            $ufound = $this->mobj->getPlatformAccountByUserIntegration($userIntegrationId, $this->platformId, ['access_token', 'platform_id', 'id', 'user_id', 'api_domain', 'account_name', 'app_id', 'app_secret']);
            if ($ufound && $this->platformId) {
                if (isset($ufound->platform_id) && $ufound->platform_id == $this->platformId) { //for only BP integration
                    $url = "product/{$ProductIDs}";
                    $response = $this->bp->GetProducts($ufound, $url, "normal");
                    if ($product = json_decode($response->getBody(), true)) {
                        return $product;
                    }
                    return false;
                }
            }
        } catch (\Exception $e) {
            Log::error($e->getMessage());
            return false;
        }
    }

    /* Create Order In BP */
    public function GetGoodsOutNotes($GoodsID, $userIntegrationId)
    {
        try {
            $ufound = $this->mobj->getPlatformAccountByUserIntegration($userIntegrationId, $this->platformId, ['access_token', 'platform_id', 'id', 'user_id', 'api_domain', 'account_name', 'app_id', 'app_secret']);
            if ($ufound && $this->platformId) {
                if (isset($ufound->platform_id) && $ufound->platform_id == $this->platformId) { //for only BP integration
                    $response = $this->bp->GetGoodsOutNotes($ufound, null, $GoodsID);
                    if ($res = json_decode($response->getBody(), true)) {
                        return $res;
                    }
                    return false;
                }
            }
        } catch (\Exception $e) {
            Log::error($e->getMessage());
            return false;
        }
    }

    /* Create Order In BP */
    public function GetDropShipNotes($userIntegrationId, $DropShipNoteIds)
    {
        try {
            $platform_account = $this->mobj->getPlatformAccountByUserIntegration($userIntegrationId, $this->platformId, ['access_token', 'platform_id', 'id', 'user_id', 'api_domain', 'account_name', 'app_id', 'app_secret']);
            if ($platform_account) {
                $response = $this->bp->GetDropShipNotes($platform_account, null, $DropShipNoteIds);
                if ($result = json_decode($response->getBody(), true)) {
                    return $result;
                }
                return false;
            }
        } catch (\Exception $e) {
            Log::error($userIntegrationId . " -> BrightPearlApiController -> GetDropShipNotes -> " . $e->getMessage());
            return false;
        }
    }

    /* Get Allocate Items */
    public function AllocateOrderItems($OrderID, $WarehouseID, $postData, $userIntegrationId)
    {
        try {
            $ufound = $this->mobj->getPlatformAccountByUserIntegration($userIntegrationId, $this->platformId, ['access_token', 'platform_id', 'id', 'user_id', 'api_domain', 'account_name', 'app_id', 'app_secret']);
            if ($ufound && $this->platformId) {
                if (isset($ufound->platform_id) && $ufound->platform_id == $this->platformId) { //for only BP integration
                    $response = $this->bp->AllocateItems($ufound, null, $OrderID, $WarehouseID, $postData);
                    return $response;
                }
            }
        } catch (\Exception $e) {
            Log::error($e->getMessage());
            return false;
        }
    }

    public function AllocateOrderItemsByAccount($OrderID, $WarehouseID, $postData, $userIntegrationId, $ufound)
    {
        try {

            $response = $this->bp->AllocateItems($ufound, null, $OrderID, $WarehouseID, $postData);

            return $response;
        } catch (\Exception $e) {
            Log::error($e->getMessage());
            return false;
        }
    }

    /* Set Billing and Shipping Address */
    public function getBillingAndShippingAddress($orderID, $type = "billing", $customerID = null, $delivery_date = null, $shippingMethodId = null)
    {
        $addressJson = $this->mobj->getFirstResultByConditions('platform_order_address', ['platform_order_id' => $orderID, 'address_type' => $type], [], ['id' => 'asc']);

        if ($addressJson) {
            $firstName = isset($addressJson->firstname) ? $addressJson->firstname : null;
            $lastName = isset($addressJson->lastname) ? $addressJson->lastname : null;
            $fullName = isset($addressJson->address_name) ? $addressJson->address_name : null;
            if ($type == "billing") {
                return [
                    "contactId" => isset($customerID) ? $customerID : null,
                    "address" => [
                        "addressFullName" => $fullName,
                        "companyName" => isset($addressJson->company) ? $addressJson->company : null,
                        "addressLine1" => isset($addressJson->address1) ? $addressJson->address1 : null,
                        "addressLine2" => isset($addressJson->address2) ? $addressJson->address2 : null,
                        "addressLine3" => isset($addressJson->city) ? $addressJson->city : null,
                        "addressLine4" => isset($addressJson->state) ? $addressJson->state : null,
                        "postalCode" => isset($addressJson->postal_code) ? $addressJson->postal_code : null,
                        "countryIsoCode" => isset($addressJson->country) ? $addressJson->country : null,
                        "telephone" => isset($addressJson->phone_number) ? $addressJson->phone_number : null,
                        "mobileTelephone" => isset($addressJson->phone_number2) ? $addressJson->phone_number2 : null, // add as mobile number
                        "email" => isset($addressJson->email) ? $addressJson->email : null,
                    ],
                ];
            } else {
                return [
                    "date" => isset($delivery_date) && $delivery_date != "" ? date(DATE_ISO8601, strtotime($delivery_date)) : "",
                    "address" => [
                        "addressFullName" => $fullName,
                        "companyName" => isset($addressJson->company) ? $addressJson->company : null,
                        "addressLine1" => isset($addressJson->address1) ? $addressJson->address1 : null,
                        "addressLine2" => isset($addressJson->address2) ? $addressJson->address2 : null,
                        "addressLine3" => isset($addressJson->city) ? $addressJson->city : null,
                        "addressLine4" => isset($addressJson->state) ? $addressJson->state : null,
                        "postalCode" => isset($addressJson->postal_code) ? $addressJson->postal_code : null,
                        "countryIsoCode" => isset($addressJson->country) ? $addressJson->country : null,
                        "telephone" => isset($addressJson->phone_number) ? $addressJson->phone_number : null,
                        "mobileTelephone" => isset($addressJson->phone_number2) ? $addressJson->phone_number2 : null, // add as mobile number
                        "email" => isset($addressJson->email) ? $addressJson->email : null,
                    ],
                    "shippingMethodId" => isset($shippingMethodId) ? $shippingMethodId : null,
                ];
            }
        }
    }

    /* Get product mapping by sku */
    public function getCheckProductMapping($productValue, $userId, $userIntegrationId, $platformId, $destinationFieldColumn, $ufound)
    {
        if (!$productValue && empty($productValue)) { //f we have empty or null detail
            return 1000;
        }
        $exist = $this->mobj->getFirstResultByConditions('platform_product', ['user_integration_id' => $userIntegrationId, 'platform_id' => $platformId, $destinationFieldColumn => $productValue, 'is_deleted' => 0], ['api_product_id']);
        if (isset($exist->api_product_id)) {
            return $exist->api_product_id;
        } else {

            $response = $this->SearchProduct($ufound, $destinationFieldColumn, $productValue);

            if (isset($response['response']) && $response) {

                if (isset($response['response']['results']) && !empty($response['response']['results'])) {
                    foreach ($response['response']['results'] as $key => $values) {
                        return isset($values[0]) ? $values[0] : 1000;
                    }
                } else {
                    return 1000;
                }
            } else {
                return 1000;
            }
        }

        return false;
    }

    /* Get product mapping by sku */
    public function getCheckProductMappingWithPrice($productValue, $userId, $userIntegrationId, $platformId, $destinationFieldColumn, $ufound, $priceListApiID = null, $platform_object_data_id = null)
    {
        if (!$productValue && empty($productValue)) { //f we have empty or null detail
            return [1000, 0];
        }
        $exist = $this->mobj->getFirstResultByConditions('platform_product', ['user_integration_id' => $userIntegrationId, 'platform_id' => $platformId, $destinationFieldColumn => $productValue, 'is_deleted' => 0], ['api_product_id', 'id']);
        if (isset($exist->api_product_id)) {
            $priceValue = 0;
            if ($priceListApiID && $platform_object_data_id) { //if both priceListApiID & platform_object_data_id found then go for to call api & table search
                $price = $this->mobj->getFirstResultByConditions('platform_porduct_price_list', ['platform_product_id' => $exist->id, 'platform_object_data_id' => $platform_object_data_id, 'status' => 1], ['price']);
                if ($price) {
                    $priceValue = $price->price;
                } else {
                    $priceResponse = app('App\Http\Controllers\Brightpearl\BrightpearlSearchController')->getProductPriceByProductIDs($ufound, $exist->api_product_id, $priceListApiID);
                    if ($priceResponse) {
                        $priceValue = $priceResponse;
                    }
                }
            }

            return [$exist->api_product_id, $priceValue];
        } else {

            $response = $this->SearchProduct($ufound, $destinationFieldColumn, $productValue);

            if (isset($response['response']) && $response) {
                if (isset($response['response']['results']) && !empty($response['response']['results'])) {
                    foreach ($response['response']['results'] as $key => $values) {
                        $api_product_id = isset($values[0]) ? $values[0] : null;
                        if ($api_product_id) {
                            $priceValue = 0;
                            if ($priceListApiID && $api_product_id) { //if both priceListApiID & platform_object_data_id found then go for to call api & table search
                                $priceResponse = app('App\Http\Controllers\Brightpearl\BrightpearlSearchController')->getProductPriceByProductIDs($ufound, $api_product_id, $priceListApiID);
                                if ($priceResponse) {
                                    $priceValue = $priceResponse;
                                }
                            }
                            $return = [$api_product_id, $priceValue];
                        } else {
                            $return = [1000, 0];
                        }
                        return $return;
                    }
                } else {
                    return [1000, 0];
                }
            } else {
                return [1000, 0];
            }
        }

        return false;
    }

    /* Prepare product list for BP order */
    public function processProducts($orderID, $userId, $userIntegrationId, $platformId, $TaxCode, $WorkFlowID, $account, $ufound, $SourcePlatformId, $SourcePlatformName = null, $priceListId = null, $platform_object_data_id = null, $DestinationPlatformName = null)
    {
        $items_posting = [];
        $itemMapping = $itemUnMapping = $empty_sku = 0;
        $nominal_code_arr = [];
        //if any platform needs to send lines in reverse order eg. Amazon Vendor order lines format is in reverse order.
        $item_row_seq_orderby = (in_array($SourcePlatformName, Config::get('apisettings.PullLineItemsInReverseOrder'))) ? 'desc' : 'asc';
        $PartialDoNotAllowToPassProductName = isset(Config::get('apisettings.PartialDoNotAllowToPassProductName')[$SourcePlatformName]) ? true : false;
        $AllowPriceFromPriceListInBPOrder = isset(Config::get('apisettings.AllowPriceFromPriceListInBPOrder')[$SourcePlatformName]) ? true : false;

        $products = $this->mobj->getResultByConditions('platform_order_line', ['platform_order_id' => $orderID, 'is_deleted' => 0], ['platform_order_id', 'api_product_id', 'product_name', 'sku', 'qty', 'price', 'unit_price', 'ean', 'gtin', 'upc', 'total', 'total_tax', 'taxes', 'subtotal', 'subtotal_tax', 'row_type', 'item_row_sequence', 'api_code', 'mpn'], ['item_row_sequence' => $item_row_seq_orderby, 'id' => 'asc', 'row_type' => 'asc']);
        $product_identity_obj_id = $this->helper->getObjectId('product_identity');
        $maping_data = $this->map->getMappedField($userIntegrationId, $WorkFlowID, $product_identity_obj_id);
        if ($maping_data) {
            $source_row_data = $destination_row_data = '';
            if ($maping_data['destination_platform_id'] == 'brightpearl') {
                $destination_row_data = $maping_data['destination_row_data'];
                $source_row_data = $maping_data['source_row_data'];
            } else {
                $destination_row_data = $maping_data['source_row_data'];
                $source_row_data = $maping_data['destination_row_data'];
            }

            if (!empty($products) && $destination_row_data && $source_row_data) {
                foreach ($products as $v) {
                    $prod = (array) $v;
                    /* Item Mapping Checking */
                    // if (!isset($prod[$destination_row_data]) || empty($prod[$destination_row_data])) {
                    //     $empty_sku++;
                    // }
                    $default_order_taxcode = $this->map->getMappedDataByName($userIntegrationId, $WorkFlowID, "sorder_taxcode", ['api_id'], 'regular', $v->taxes, 'single', 'source', ['api_code']);
                    if ($default_order_taxcode) {
                        $default_order_taxcode = $default_order_taxcode->api_code;
                    } else {
                        $default_order_taxcode = $TaxCode;
                    }

                    //@sourabh finde  nominal code  from line item api code..
                    $nominal_code = '';
                    if ($v->api_code) {
                        if (isset($nominal_code_arr[$v->api_code])) {
                            $nominal_code = $nominal_code_arr[$v->api_code];
                        } else {
                            $response = $this->GetNominalCodeByApiCode($v->api_code, $userIntegrationId, $WorkFlowID, $SourcePlatformId);
                            if ($response) {
                                $nominal_code = $response;
                                $nominal_code_arr[$v->api_code] = $nominal_code;
                            }
                        }
                    }
                    //@sourabh add nominal code ..

                    if ($v->row_type == "ITEM") {
                        //for amazon PO the $source_row_data field either could be api_product_id which is (AmazonProductidentity) or sku which is (VendorProductIdentity).
                        if (isset($prod[$source_row_data])) {
                            $product_value = $prod[$source_row_data];
                        } else {
                            $product_value = $v->sku; //default sku for all platforms
                        }
                        $priceValue = 0;
                        if ($AllowPriceFromPriceListInBPOrder) {
                            $citem = $this->getCheckProductMappingWithPrice($product_value, $userId, $userIntegrationId, $platformId, $destination_row_data, $ufound, $priceListId, $platform_object_data_id);
                            if ($citem) {
                                $itemMapping = $citem[0];
                                $priceValue = $citem[1];
                            } else {
                                $itemUnMapping++;
                            }
                            $quantity = (int) $v->qty;
                            $net = $priceValue * $quantity;
                            $netValue = isset($net) ? $this->helper->getNumberFormat($net, 4) : $this->helper->getNumberFormat(0, 4);
                        } else {
                            $citem = $this->getCheckProductMapping($product_value, $userId, $userIntegrationId, $platformId, $destination_row_data, $ufound);
                            if ($citem) {
                                $itemMapping = $citem;
                            } else {
                                $itemUnMapping++;
                            }
                            $quantity = (int) $v->qty;
                            $netValue = isset($v->subtotal) ? $this->helper->getNumberFormat($v->subtotal, 4) : $this->helper->getNumberFormat(0, 4);
                        }

                        $item_row_data = ["productId" => $itemMapping, "quantity" => $quantity, "taxCode" => $default_order_taxcode, "net" => $netValue, "tax" => isset($v->subtotal_tax) ? $this->helper->getNumberFormat($v->subtotal_tax, 4) : $this->helper->getNumberFormat(0, 4), "item_row_sequence" => $v->item_row_sequence];

                        if (isset($v->product_name) && !empty($v->product_name)) {
                            if (!$PartialDoNotAllowToPassProductName) {
                                $item_row_data["name"] = $v->product_name;
                            }
                        }

                        if ($nominal_code) {
                            $item_row_data["nominalCode"] = $nominal_code; // nominal code push in array
                        }

                        if ($itemMapping == 1000) {
                            $productSKU = isset($prod[$source_row_data]) && !empty($prod[$source_row_data]) ? $prod[$source_row_data] . "-" : null;
                            $name = isset($v->product_name) && !empty($v->product_name) ? $productSKU . $v->product_name : $v->api_product_id . "-" . $v->sku;
                            $item_row_data["name"] = $name;
                            array_push($items_posting, $item_row_data);
                        } else {
                            array_push($items_posting, $item_row_data);
                        }
                    } elseif ($v->row_type == "SHIPPING") {
                        if (isset($v->product_name)) {
                            $name = "Shipping: " . $v->product_name;
                        } elseif (isset($v->sku)) {
                            $name = "Shipping: " . $v->sku;
                        } else {
                            $name = "Shipping";
                        }

                        array_push($items_posting, ["name" => $name, "quantity" => (int) $v->qty, "taxCode" => $default_order_taxcode, "net" => isset($v->subtotal) ? $this->helper->getNumberFormat($v->subtotal, 4) : $this->helper->getNumberFormat(0, 4), "tax" => isset($v->subtotal_tax) ? $this->helper->getNumberFormat($v->subtotal_tax, 4) : $this->helper->getNumberFormat(0, 4), "nominalCode" => $account->account_shipping_nominal_code, "item_row_sequence" => $v->item_row_sequence]);
                    } elseif ($v->row_type == "DISCOUNT") {
                        if (isset($v->product_name)) {
                            $name = "Discount/Coupon: " . $v->product_name;
                        } elseif (isset($v->sku)) {
                            $name = "Discount/Coupon: " . $v->sku;
                        } else {
                            $name = "Discount/Coupon";
                        }
                        // if (in_array($SourcePlatformName, Config::get('apisettings.DiscountCouponTax'))) {
                        //     //This basically for tax amount shoudl be - value
                        //     $taxamt = isset($v->subtotal_tax) ? "-" . $this->helper->getNumberFormat($v->subtotal_tax, 4) : $this->helper->getNumberFormat(0, 4);
                        // } else {
                        $taxamt = isset($v->subtotal_tax) ? $this->helper->getNumberFormat($v->subtotal_tax, 4) : $this->helper->getNumberFormat(0, 4);
                        //}
                        array_push($items_posting, ["name" => $name, "quantity" => (int) $v->qty, "taxCode" => $default_order_taxcode, "net" => isset($v->subtotal) ? $this->helper->getNumberFormat($v->subtotal, 4) : $this->helper->getNumberFormat(0, 4), "tax" => $taxamt, "nominalCode" => $account->account_discount_nominal_code, "item_row_sequence" => $v->item_row_sequence]);
                    } elseif ($v->row_type == "GIFTCARD") {
                        if (isset($v->product_name)) {
                            $name = "Gift Card: " . $v->product_name;
                        } elseif (isset($v->sku)) {
                            $name = "Gift Card: " . $v->sku;
                        } else {
                            $name = "Gift Card";
                        }

                        array_push($items_posting, ["name" => $name, "quantity" => (int) $v->qty, "taxCode" => $default_order_taxcode, "net" => isset($v->subtotal) ? $this->helper->getNumberFormat($v->subtotal, 4) : $this->helper->getNumberFormat(0, 4), "tax" => isset($v->subtotal_tax) ? $this->helper->getNumberFormat($v->subtotal_tax, 4) : $this->helper->getNumberFormat(0, 4), "nominalCode" => $account->account_giftcard_nominal_code, "item_row_sequence" => $v->item_row_sequence]);
                    } elseif ($v->row_type == "STORECREDIT") {
                        $store_credit_nominal_code = $account->account_discount_nominal_code;
                        $default_store_credit_nominal_code = $this->map->getMappedDataByName($userIntegrationId, NULL, "store_credit_nominal_code", ['custom_data'], "default");
                        if ($default_store_credit_nominal_code && $default_store_credit_nominal_code->custom_data) {
                            $store_credit_nominal_code = trim($default_store_credit_nominal_code->custom_data);
                        }

                        array_push($items_posting, ["name" => "Store Credit", "quantity" => (int) $v->qty, "taxCode" => $default_order_taxcode, "net" => isset($v->subtotal) ? $this->helper->getNumberFormat($v->subtotal, 4) : $this->helper->getNumberFormat(0, 4), "tax" => isset($v->subtotal_tax) ? $this->helper->getNumberFormat($v->subtotal_tax, 4) : $this->helper->getNumberFormat(0, 4), "nominalCode" => $store_credit_nominal_code, "item_row_sequence" => $v->item_row_sequence]);
                    } elseif ($v->row_type == "TAX") {
                        if (isset($v->product_name)) {
                            $name = "Tax: " . $v->product_name;
                        } elseif (isset($v->sku)) {
                            $name = "Tax: " . $v->sku;
                        } else {
                            $name = "Tax";
                        }

                        array_push($items_posting, ["name" => $name, "quantity" => (int) $v->qty, "taxCode" => $default_order_taxcode, "net" => isset($v->subtotal) ? $this->helper->getNumberFormat($v->subtotal, 4) : $this->helper->getNumberFormat(0, 4), "tax" => isset($v->subtotal_tax) ? $this->helper->getNumberFormat($v->subtotal_tax, 4) : $this->helper->getNumberFormat(0, 4), "nominalCode" => $account->account_giftcard_nominal_code, "item_row_sequence" => $v->item_row_sequence]);
                    }
                }
            }
        }

        /* Sort array */
        if (!in_array($SourcePlatformName, Config::get('apisettings.PullLineItemsInReverseOrder'))) {
            usort($items_posting, "self::sortByOrder");
        }

        foreach ($items_posting as $key => $subArr) {
            unset($subArr['item_row_sequence']);
            $items_posting[$key] = $subArr;
        }

        return ['items_posting' => $items_posting];
    }

    /* Prepare product list for BP Sales Credit order */
    public function ProcessProductsForSalesCredit($orderID, $userId, $userIntegrationId, $platformId, $TaxCode, $WorkFlowID, $account, $ufound)
    {
        $items_posting = [];
        $itemMapping = $itemUnMapping = $empty_sku = 0;
        $products = $this->mobj->getResultByConditions('platform_order_refund_lines', ['platform_order_refund_id' => $orderID], ['platform_order_refund_id', 'api_order_line_id', 'api_product_id', 'variation_id', 'product_name', 'sku', 'qty', 'price', 'subtotal', 'subtotal_tax', 'total', 'total_tax', 'taxes', 'id', 'row_type'], ['id' => 'asc']);
        $product_identity_obj_id = $this->helper->getObjectId('product_identity');
        $maping_data = $this->map->getMappedField($userIntegrationId, $WorkFlowID, $product_identity_obj_id);
        if ($maping_data) {
            $source_row_data = $destination_row_data = '';
            if ($maping_data['destination_platform_id'] == 'brightpearl') {
                $destination_row_data = $maping_data['destination_row_data'];
                $source_row_data = $maping_data['source_row_data'];
            } else {
                $destination_row_data = $maping_data['source_row_data'];
                $source_row_data = $maping_data['destination_row_data'];
            }

            if (!empty($products) && $destination_row_data && $source_row_data) {

                foreach ($products as $v) {
                    $prod = (array) $v;

                    //for amazon PO the $source_row_data field either could be api_product_id which is (AmazonProductidentity) or sku which is (VendorProductIdentity).
                    if (isset($prod[$source_row_data])) {
                        $product_value = $prod[$source_row_data];
                    } else {
                        $product_value = $v->sku; //default sku for all platforms
                    }

                    $citem = $this->getCheckProductMapping($product_value, $userId, $userIntegrationId, $platformId, $destination_row_data, $ufound);
                    if ($citem) {
                        $itemMapping = $citem;
                    } else {
                        $itemUnMapping++;
                    }
                    $onetoone_order_taxcode = $this->map->getMappedDataByName($userIntegrationId, $WorkFlowID, "sorder_taxcode", ['api_id'], 'regular', $v->taxes, 'single', 'source', ['api_code']);

                    if ($onetoone_order_taxcode) {
                        $default_order_taxcode = $onetoone_order_taxcode->api_code;
                    } else {
                        $default_order_taxcode = $TaxCode;
                    }

                    if ($v->row_type == "ITEM") {
                        if ($itemMapping == 1000) {
                            $name = isset($v->product_name) ? $v->product_name : $v->api_product_id . "-" . $v->sku;
                            array_push($items_posting, ["productId" => $itemMapping, "name" => $name, "quantity" => (int) abs($v->qty), "taxCode" => $default_order_taxcode, "net" => isset($v->subtotal) ? $this->helper->getNumberFormat(abs($v->subtotal), 4) : $this->helper->getNumberFormat(0, 4), "tax" => isset($v->subtotal_tax) ? $this->helper->getNumberFormat(abs($v->subtotal_tax), 4) : $this->helper->getNumberFormat(0, 4)]);
                        } else {
                            array_push($items_posting, ["productId" => $itemMapping, "quantity" => (int) abs($v->qty), "taxCode" => $default_order_taxcode, "net" => isset($v->subtotal) ? $this->helper->getNumberFormat(abs($v->subtotal), 4) : $this->helper->getNumberFormat(0, 4), "tax" => isset($v->subtotal_tax) ? $this->helper->getNumberFormat(abs($v->subtotal_tax), 4) : $this->helper->getNumberFormat(0, 4)]);
                        }
                    } elseif ($v->row_type == "SHIPPING") {
                        if (isset($v->product_name)) {
                            $name = "Shipping: " . $v->product_name;
                        } elseif (isset($v->sku)) {
                            $name = "Shipping: " . $v->sku;
                        } else {
                            $name = "Shipping";
                        }

                        array_push($items_posting, ["name" => $name, "quantity" => (int) abs($v->qty), "taxCode" => "-", "net" => isset($v->subtotal) ? $this->helper->getNumberFormat(abs($v->subtotal), 4) : $this->helper->getNumberFormat(0, 4), "tax" => isset($v->subtotal_tax) ? $this->helper->getNumberFormat(abs($v->subtotal_tax), 4) : $this->helper->getNumberFormat(0, 4), "nominalCode" => $account->account_shipping_nominal_code]);
                    } elseif ($v->row_type == "DISCOUNT") {
                        if (isset($v->product_name)) {
                            $name = "Discount/Coupon: " . $v->product_name;
                        } elseif (isset($v->sku)) {
                            $name = "Discount/Coupon: " . $v->sku;
                        } else {
                            $name = "Discount/Coupon";
                        }

                        array_push($items_posting, ["name" => $name, "quantity" => (int) abs($v->qty), "taxCode" => "-", "net" => isset($v->subtotal) ? $this->helper->getNumberFormat(abs($v->subtotal), 4) : $this->helper->getNumberFormat(0, 4), "tax" => isset($v->subtotal_tax) ? $this->helper->getNumberFormat(abs($v->subtotal_tax), 4) : $this->helper->getNumberFormat(0, 4), "nominalCode" => $account->account_discount_nominal_code]);
                    } elseif ($v->row_type == "GIFTCARD") {
                        if (isset($v->product_name)) {
                            $name = "Gift Card: " . $v->product_name;
                        } elseif (isset($v->sku)) {
                            $name = "Gift Card: " . $v->sku;
                        } else {
                            $name = "Gift Card";
                        }

                        array_push($items_posting, ["name" => $name, "quantity" => (int) $v->qty, "taxCode" => "-", "net" => isset($v->subtotal) ? $this->helper->getNumberFormat($v->subtotal, 4) : $this->helper->getNumberFormat(0, 4), "tax" => isset($v->subtotal_tax) ? $this->helper->getNumberFormat($v->subtotal_tax, 4) : $this->helper->getNumberFormat(0, 4), "nominalCode" => $account->account_giftcard_nominal_code]);
                    } elseif ($v->row_type == "STORECREDIT") {
                        $store_credit_nominal_code = $account->account_discount_nominal_code;
                        $default_store_credit_nominal_code = $this->map->getMappedDataByName($userIntegrationId, NULL, "store_credit_nominal_code", ['custom_data'], "default");
                        if ($default_store_credit_nominal_code && $default_store_credit_nominal_code->custom_data) {
                            $store_credit_nominal_code = trim($default_store_credit_nominal_code->custom_data);
                        }

                        array_push($items_posting, ["name" => "Store Credit", "quantity" => (int) $v->qty, "taxCode" => "-", "net" => isset($v->subtotal) ? $this->helper->getNumberFormat($v->subtotal, 4) : $this->helper->getNumberFormat(0, 4), "tax" => isset($v->subtotal_tax) ? $this->helper->getNumberFormat($v->subtotal_tax, 4) : $this->helper->getNumberFormat(0, 4), "nominalCode" => $store_credit_nominal_code]);
                    } elseif ($v->row_type == "TAX") {
                        if (isset($v->product_name)) {
                            $name = "Tax: " . $v->product_name;
                        } elseif (isset($v->sku)) {
                            $name = "Tax: " . $v->sku;
                        } else {
                            $name = "Tax";
                        }

                        array_push($items_posting, ["name" => $name, "quantity" => (int) $v->qty, "taxCode" => "-", "net" => isset($v->subtotal) ? $this->helper->getNumberFormat($v->subtotal, 4) : $this->helper->getNumberFormat(0, 4), "tax" => isset($v->subtotal_tax) ? $this->helper->getNumberFormat($v->subtotal_tax, 4) : $this->helper->getNumberFormat(0, 4), "nominalCode" => $account->account_giftcard_nominal_code]);
                    }
                }
            }
        }
        return ['items_posting' => $items_posting];
    }

    private static function sortByOrder($a, $b)
    {
        return $a['item_row_sequence'] - $b['item_row_sequence'];
    }

    /* Sync/Allocate Items In BP */
    public function AllocateOrderItemsInBrightpearl($OrderID, $userId, $userIntegrationId, $WarehouseID, $SourcePlatformId, $UserWorkFlow, $PrimaryID, $ufound)
    {
        $return_response = false;
        try {

            //check automatic_order_allocation mapping if found with NO then skip allocation
            $automatic_order_allocation_mapping = $this->map->getMappedDataByName($userIntegrationId, NULL, "automatic_order_allocation", ['api_code']);
            if ($automatic_order_allocation_mapping && $automatic_order_allocation_mapping->api_code == 'NO') {
                return true;
                //stop allocation process
            }


            $items = $this->GetOrderDetails($OrderID, $userIntegrationId);
            //$object_id = $this->helper->getObjectId('sales_order_allocation');

            if (isset($items['response']) && is_array($items['response'])) {
                $order = $items['response'][0];
                $products = [];
                if ($order) {
                    if (isset($order['orderRows'])) {
                        foreach ($order['orderRows'] as $key => $item) {
                            if ($item['productId'] !== 1000 && $item['composition']['bundleParent'] === false) {
                                $products[] = [
                                    "productId" => $item['productId'],
                                    "salesOrderRowId" => $key,
                                    "quantity" => $item['quantity']['magnitude'],
                                ];
                            }
                        }
                    }
                }

                if (!empty($products)) {
                    $productList['products'] = $products;
                    $response = $this->AllocateOrderItemsByAccount($OrderID, $WarehouseID, $productList, $userIntegrationId, $ufound);

                    if ($response != false) {
                        $allocate = json_decode($response->getBody(), true);

                        if (is_array($allocate)) {
                            if (!isset($allocate['errors'])) {
                                // $this->log->syncLog($userId, $userIntegrationId, $UserWorkFlow,  $SourcePlatformId, $this->platformId, $object_id, 'success', $PrimaryID, NULL);
                                $return_response = true;
                            } else if (isset($allocate['errors']) && is_array($allocate['errors'])) {

                                $error = $this->bp->handleResponseError($allocate);
                                //$this->log->syncLog($userId, $userIntegrationId, $UserWorkFlow, $SourcePlatformId, $this->platformId,  $object_id, 'failed', $PrimaryID, $error);
                                $return_response = false;
                            } else {
                                $return_response = isset($allocate['response']) ? ($allocate['response']) : "API Error";
                            }
                        } else {
                            $return_response = "API Error";
                        }
                    }
                }
            } else {
                $return_response = "API Error";
            }
        } catch (\Exception $e) {
            Log::error($e->getMessage());
            $return_response = "API Error";
        }
        return $return_response;
    }

    /* Sync Order Payment In BP | For only payment type */
    public function OrderPayment($OrderID, $userId, $userIntegrationId, $currency, $WorkFlowID, $PrimaryID, $ORDER)
    {
        try {
            if ($OrderID && $userId && $userIntegrationId && $currency) {

                $default_order_payment = $this->map->getMappedDataByName($userIntegrationId, $WorkFlowID, "sorder_payment", ['api_code']);
                $default_order_payment = isset($default_order_payment) && $default_order_payment ? $default_order_payment->api_code : null;

                if (isset($default_order_payment) && $ORDER->date_created && $currency) {
                    $PostPayment = [
                        "orderId" => $OrderID,
                        "paymentMethodCode" => $default_order_payment,
                        'paymentType' => "PAYMENT",
                        "currencyIsoCode" => $currency,
                        "exchangeRate" => null,
                        "amountPaid" => abs($ORDER->amount),
                        "paymentDate" => date(DATE_ISO8601, strtotime($ORDER->date_created)),
                        "journalRef" => "Sales Credit for order: " . $OrderID,
                        "transactionRef" => "Ref Sales Credit-" . $ORDER->api_id . "-" . $OrderID . "-" . time(),
                    ];

                    $paymentResponseBP = $this->CreateCustomerPayment($userId, $userIntegrationId, $PostPayment);

                    if (isset($paymentResponseBP['response']) && is_numeric($paymentResponseBP['response'])) {
                        $payment = [
                            'platform_order_id' => $PrimaryID,
                            'transaction_id' => $paymentResponseBP['response'],
                            'transaction_datetime' => $ORDER->date_created,
                            'transaction_amount' => abs($ORDER->amount),
                            'transaction_reference' => "Ref Sales Credit-" . $ORDER->api_id . "-" . $OrderID . "-" . time(),
                            'row_type' => "REFUND"
                        ];
                        $this->mobj->makeInsert('platform_order_transactions', $payment);
                    } else {
                        $error = $this->bp->handleResponseError($paymentResponseBP);
                    }
                } else {
                    $error = "May be paid date or currecy not available";
                }
            }
        } catch (\Exception $e) {
            Log::error($e->getMessage());
            return false;
        }
    }

    /* Sync Order Payment In BP | For only reciept type */
    public function OrderPaymentInBrightpearl($OrderID, $userId, $userIntegrationId, $currency, $SourcePlatformId, $WorkFlowID, $UserWorkFlow, $PrimaryID)
    {
        try {
            //$object_id = $this->helper->getObjectId('sales_order_payment');

            if ($OrderID && $userId && $userIntegrationId && $currency) {

                $invoice = $this->mobj->getFirstResultByConditions('platform_order_transactions', ['platform_order_id' => $PrimaryID], ['id', 'platform_order_id', 'transaction_id', 'transaction_datetime', 'transaction_type', 'transaction_method', 'transaction_amount', 'transaction_reference', 'sync_status']);

                if ($invoice) {
                    $default_order_payment = $this->map->getMappedDataByName($userIntegrationId, $WorkFlowID, "sorder_payment", ['api_code'], 'regular', $invoice->transaction_method);
                    if ($default_order_payment) {
                        $default_order_payment = $default_order_payment->api_code;
                    } else {
                        $default_order_payment = $this->map->getMappedDataByName($userIntegrationId, $WorkFlowID, "sorder_payment", ['api_code']);
                        $default_order_payment = isset($default_order_payment) && $default_order_payment ? $default_order_payment->api_code : null;
                    }
                    if (isset($default_order_payment) && $invoice->transaction_datetime && $currency) {
                        $PostPayment = [
                            "orderId" => $OrderID,
                            "paymentMethodCode" => $default_order_payment,
                            'paymentType' => "RECEIPT",
                            "currencyIsoCode" => $currency,
                            "exchangeRate" => null,
                            "amountPaid" => $invoice->transaction_amount,
                            "paymentDate" => date(DATE_ISO8601, strtotime($invoice->transaction_datetime)),
                            "journalRef" => "Sales receipt for order: " . $OrderID,
                            "transactionRef" => "Ref" . $invoice->transaction_method . "-" . $OrderID . "-" . time(),
                        ];

                        $paymentResponseBP = $this->CreateCustomerPayment($userId, $userIntegrationId, $PostPayment);

                        if (isset($paymentResponseBP['response'])) {
                            $this->mobj->makeUpdate('platform_order_transactions', ['sync_status' => 'Synced'], ['platform_order_id' => $PrimaryID]);
                            // $this->log->syncLog($userId, $userIntegrationId, $UserWorkFlow, $SourcePlatformId, $this->platformId, $object_id, 'success', $PrimaryID, NULL);
                        } else {
                            $error = $this->bp->handleResponseError($paymentResponseBP);
                            $this->mobj->makeUpdate('platform_order_transactions', ['sync_status' => 'Failed'], ['platform_order_id' => $PrimaryID]);
                            // $this->log->syncLog($userId, $userIntegrationId, $UserWorkFlow,  $SourcePlatformId, $this->platformId, $object_id, 'failed', $PrimaryID, $error);
                        }
                    } else {
                        $error = "May be paid date or currecy not available";
                        $this->mobj->makeUpdate('platform_order_transactions', ['sync_status' => 'Failed'], ['platform_order_id' => $PrimaryID]);
                        // $this->log->syncLog($userId, $userIntegrationId, $UserWorkFlow,  $SourcePlatformId, $this->platformId, $object_id, 'failed', $PrimaryID, $error);
                    }
                }
            }
        } catch (\Exception $e) {
            Log::error($e->getMessage());
            return false;
        }
    }

    /* Sync Order Payment In BP (Multiple Transaction) | For only reciept type and Sync Status="Ready" */
    public function MupltipleOrderPaymentSync($OrderID, $userId, $userIntegrationId, $currency, $SourcePlatformId, $SourcePlatformName, $WorkFlowID, $UserWorkFlow, $PrimaryID, $SyncStatus = ["Ready", 'Failed'])
    {
        $return_response = true;
        try {
            //$object_id = $this->helper->getObjectId('sales_order_payment');
            if ($OrderID && $userId && $userIntegrationId && $currency) {
                $invoice = PlatformOrderTransaction::select('id', 'platform_order_id', 'transaction_id', 'transaction_datetime', 'transaction_type', 'transaction_method', 'transaction_amount', 'transaction_reference', 'sync_status', 'success_response', 'linked_id')->where(['platform_order_id' => $PrimaryID, 'linked_id' => 0])->whereIn('sync_status', $SyncStatus)->where('row_type', '!=', 'REFUND')->get();
                if (count($invoice) > 0) {
                    foreach ($invoice as $key => $value) {
                        if ($value->transaction_datetime && $currency) {
                            $default_order_payment = $this->map->getMappedDataByName($userIntegrationId, $WorkFlowID, "sorder_payment", ['api_code'], 'regular', $value->transaction_method);
                            if ($default_order_payment) {
                                $default_order_payment = $default_order_payment->api_code;
                            } else {
                                $default_order_payment = $this->map->getMappedDataByName($userIntegrationId, $WorkFlowID, "sorder_payment", ['api_code']);
                                $default_order_payment = isset($default_order_payment) && $default_order_payment ? $default_order_payment->api_code : null;
                            }
                            if (isset($default_order_payment)) {
                                $PostPayment = [
                                    "orderId" => $OrderID,
                                    "paymentMethodCode" => $default_order_payment,
                                    'paymentType' => "RECEIPT",
                                    "currencyIsoCode" => $currency,
                                    "exchangeRate" => null,
                                    "amountPaid" => $value->transaction_amount,
                                    "paymentDate" => date(DATE_ISO8601, strtotime($value->transaction_datetime)),
                                    "journalRef" => "Sales receipt for order: " . $OrderID . "-" . time(),
                                    "transactionRef" => "Ref" . $value->transaction_method . "-" . $OrderID . "-" . time(),
                                ];
                                sleep(1);
                                $paymentResponseBP = $this->CreateCustomerPayment($userId, $userIntegrationId, $PostPayment);
                                if (isset($paymentResponseBP['response']) && is_int($paymentResponseBP['response'])) {
                                    $value->sync_status = 'Synced';
                                    $value->linked_id = 1;
                                    $value->platform_order_id = $PrimaryID;
                                    $value->success_response = $paymentResponseBP['response'];
                                    $value->save();

                                    /* Sync Log Entry */
                                    // $this->log->syncLog($userId, $userIntegrationId, $UserWorkFlow, $SourcePlatformId, $this->platformId, $object_id, 'success', $PrimaryID, NULL);
                                } else {
                                    $error = $this->bp->handleResponseError($paymentResponseBP);
                                    $value->sync_status = 'Failed';
                                    $value->platform_order_id = $PrimaryID;
                                    $value->success_response = $error;
                                    $value->save();
                                    $return_response =  $error;
                                    /* Sync Log Entry */
                                    // $this->log->syncLog($userId, $userIntegrationId, $UserWorkFlow,  $SourcePlatformId, $this->platformId, $object_id, 'failed', $PrimaryID, $error);
                                }
                            } else {
                                $error = "Order failed due to payment method not found";
                                $value->sync_status = 'Failed';
                                $value->platform_order_id = $PrimaryID;
                                $value->success_response = $error;
                                $value->save();
                                $return_response =  $error;
                            }
                        } else {
                            if (!isset(Config::get('apisettings.SkipTransactionInBrightpearl')[$SourcePlatformName])) { //skip woocommerce transaction
                                $error = "May be paid date or currecy not available";
                                $value->sync_status = 'Failed';
                                $value->platform_order_id = $PrimaryID;
                                $value->success_response = $error;
                                $value->save();
                                $return_response =  $error;
                            }
                            /* Sync Log Entry */
                            // $this->log->syncLog($userId, $userIntegrationId, $UserWorkFlow,  $SourcePlatformId, $this->platformId, $object_id, 'failed', $PrimaryID, $error);
                        }
                    }
                }
            }
        } catch (\Exception $e) {
            $return_response =   "Your order payment has been failed";
        }
        return $return_response;
    }

    /* Search customer id in platform_customer table */
    public function SearchCustomerByID($CustomerPrimaryID = null, $select = [])
    {
        $return_response = null;
        $findCustomer = $this->mobj->getFirstResultByConditions('platform_customer', [
            'id' => $CustomerPrimaryID, 'is_deleted' => 0,
        ], $select);
        if ($findCustomer) {
            $return_response = $findCustomer;
        }
        return $return_response;
    }

    /* Sync Order In BP */
    public function SyncOrderInBP($userId = null, $userIntegrationId = null, $PlatformWorkFlowRuleID = null, $UserWorkFlowRuleID = null, $SourcePlatformName = null, $sync_status = "Ready", $RecordID = null, $DestinationPlatformName = null)
    {
        /* When you need extra memory to excute the code*/
        $this->mobj->AddMemory();
        $return_response = false;
        try {
            $limit = 10;
            $recordExist = 0;
            $sourceOffset = '+00:00';
            $destinationOffset = null;
            $allowDateConversionQuery = null;
            $object_id = $this->helper->getObjectId('sales_order');
            $order_status_object_id = $this->helper->getObjectId('order_status');
            $ufound = $this->mobj->getPlatformAccountByUserIntegration($userIntegrationId, $this->platformId, ['access_token', 'platform_id', 'id', 'user_id', 'api_domain', 'account_name', 'app_id', 'app_secret']);

            $SourcePlatformId = $this->helper->getPlatformIdByName($SourcePlatformName);

            $SOurceUfound = $this->mobj->getPlatformAccountByUserIntegration($userIntegrationId, $SourcePlatformId, ['app_id', 'app_secret', 'platform_id', 'id', 'user_id', 'api_domain']);

            if ($ufound && $this->platformId && $SourcePlatformId && $SOurceUfound) {
                if (isset($ufound->platform_id) && $ufound->platform_id == $this->platformId) {
                    $account = $this->mobj->getFirstResultByConditions('platform_account_addtional_information', ['account_id' => $ufound->id, 'user_integration_id' => $userIntegrationId], ['account_currency_code', 'account_shipping_nominal_code', 'account_discount_nominal_code', 'account_sale_nominal_code', 'account_purchase_nominal_code', 'account_timezone', 'account_giftcard_nominal_code'], ['id' => 'asc']);

                    if (isset($account->account_timezone) && !empty($account->account_timezone)) {
                        /* Set BP account timezone */
                        date_default_timezone_set($account->account_timezone);

                        if (isset(Config::get('apisettings.AllowDateConversionInBPOrder')[$SourcePlatformName])) {

                            $destinationOffset = app('App\Http\Controllers\Brightpearl\BrightpearlUtility')->getUTCOffset($account->account_timezone);
                            if (!is_bool($destinationOffset)) {
                                /* Do not match source and destination offset */
                                if ($destinationOffset != $sourceOffset) {
                                    $allowDateConversionQuery = DB::raw("CONCAT(DATE_FORMAT(convert_tz(api_updated_at,'" . $sourceOffset . "','" . $destinationOffset . "'),'%Y-%m-%dT%T'),'" . $destinationOffset . "') as converted_order_date");
                                }
                            }
                        }
                    }

                    $query = PlatformOrder::select('user_id', 'platform_id', 'user_integration_id', 'platform_customer_id', 'platform_customer_emp_id', 'trading_partner_id', 'order_type', 'api_order_id', 'customer_email', 'order_number', 'order_date', 'due_days', 'department', 'vendor', 'total_discount', 'total_tax', 'discount_tax', 'total_amount', 'notes', 'sync_status', 'linked_id', 'shipping_total', 'shipping_tax', 'carrier_code', 'warehouse_id', 'order_update_status', 'id', 'currency', 'shipping_method', 'payment_date', 'delivery_date', 'is_voided', 'is_fully_synced', 'api_pricelist_id', 'is_deleted', 'order_status', 'allow_check', 'linked_api_order_id', 'ship_date', 'order_updated_at');
                    if ($allowDateConversionQuery) {
                        $query->addSelect($allowDateConversionQuery);
                    }
                    if ($RecordID && $RecordID !== 0) {
                        $query->where('id', $RecordID);
                    } else {
                        $query->where([['user_integration_id', '=', $userIntegrationId], ['platform_id', '=', $SOurceUfound->platform_id], ['sync_status', '=', $sync_status]]);
                    }
                    $list = $query->take($limit)->orderBy('id', 'asc')->get();
                    if (!empty($list) && count($list) > 0) {
                        $orderIds = $query->pluck('sync_status', 'id')->toArray(); //before sync get only order ids to set sync_status as Processing
                        if (count($orderIds)) {
                            $orderPrimaryIds = array_keys($orderIds);
                            PlatformOrder::whereIn('id', $orderPrimaryIds)->update(['sync_status' => PlatformStatus::PROCESSING,'allow_check'=>1]);
                        }

                        $recordExist = 1;

                        if ($account) {

                            $flag = true;
                            if ($flag) {

                                $items_posting = [];

                                $pricelist_object_id = $this->helper->getObjectId('pricelist');
                                $pricelist_grp_object_id = $this->helper->getObjectId('pricelist_group');

                                $projectId = $this->map->getMappedDataByName($userIntegrationId, $PlatformWorkFlowRuleID, "sorder_project", ['api_id']);

                                $channelId = $this->map->getMappedDataByName($userIntegrationId, $PlatformWorkFlowRuleID, "sorder_channel", ['api_id']);

                                $leadSourceId = $this->map->getMappedDataByName($userIntegrationId, $PlatformWorkFlowRuleID, "sorder_lead", ['api_id']);

                                $defaultStatusId = $this->map->getMappedDataByName($userIntegrationId, $PlatformWorkFlowRuleID, "sorder_status", ['api_id']);
                                $DefaultOrderWarehouseId = null;
                                $DefaultWarehouseId = $this->map->getMappedDataByName($userIntegrationId, $PlatformWorkFlowRuleID, "order_warehouse", ['api_id']);
                                if ($DefaultWarehouseId) {
                                    $DefaultOrderWarehouseId = $DefaultWarehouseId->api_id;
                                }

                                $priceListId = $this->map->getMappedDataByName($userIntegrationId, $PlatformWorkFlowRuleID, "sorder_pricelist", ['api_id', 'id']);
                                $cancelOrderStatusID = $this->map->getMappedDataByName($userIntegrationId, $PlatformWorkFlowRuleID, "scancelled_order_status", ['api_id']);
                                $cancelOrderStatusID = isset($cancelOrderStatusID->api_id) ? $cancelOrderStatusID->api_id : null;
                                $TaxCode = $this->map->getMappedDataByName($userIntegrationId, $PlatformWorkFlowRuleID, "sorder_taxcode", ['api_code'], 'default');

                                $TaxCode = isset($TaxCode) && $TaxCode ? $TaxCode->api_code : null;

                                $addressType = $this->map->getMappedDataByName($userIntegrationId, $PlatformWorkFlowRuleID, "sorder_shipping_address", ['api_id']);
                                $addressType = isset($addressType) && $addressType ? $addressType->api_id : "billing";

                                $customerID = $DefaultShippingMethodId = null;
                                $default_sales_order_shipping_method = $this->map->getMappedDataByName($userIntegrationId, null, "sorder_shipping_method", ['api_id']);
                                if ($default_sales_order_shipping_method) {
                                    $DefaultShippingMethodId = $default_sales_order_shipping_method->api_id;
                                }

                                $BpOdrDefaultTimeZone = null;
                                $BpOdrDefaultTimeZone = $this->map->getMappedDataByName($userIntegrationId, $PlatformWorkFlowRuleID, "timezone", ['custom_data'], "default");
                                if ($BpOdrDefaultTimeZone && $BpOdrDefaultTimeZone->custom_data) {
                                    $timezone_offset =  EsRegionalTimeZone::where('id', $BpOdrDefaultTimeZone->custom_data)->pluck('gmt_offset')->first();
                                }

                                // BP allow direct customer ID
                                $BpAllowDirectCustomerApiId = $this->map->getMappedDataByName($userIntegrationId, $PlatformWorkFlowRuleID, "allow_direct_customer_api_id", ['api_id']);
                            }

                            foreach ($list as $key => $order) {
                                /* Check and prevent duplicate order */
                                $findDuplicateOrder = app('App\Http\Controllers\Brightpearl\BrightpearlUtility')->CheckAndPreventDuplicateOrder($SourcePlatformId, $userIntegrationId, $order);
                                if ($findDuplicateOrder) {
                                    continue;
                                }

                                //order_date
                                /* added by gajendra ..extra condition for amazon-vendor direct fullfillment status | check order type mapping if found then replace order status as per mapping for direct fullfillment orders & other */
                                $order_type_filter = $this->map->getMappedDataByName($userIntegrationId, $PlatformWorkFlowRuleID, "order_type_filter", ['api_id']);
                                if ($order_type_filter) {
                                    /* if order type SO means its direct fullfillment order */
                                    if ($order->order_type == 'SO') {
                                        $defaultStatusId = $this->map->getMappedDataByName($userIntegrationId, $PlatformWorkFlowRuleID, "df_order_status", ['api_id']);
                                    }
                                }

                                if ($order->linked_id == 0 && !$order->is_voided) {
                                    /*----------------Start to find order warehouse----------------*/
                                    $OrderWarehouseId = null;
                                    $warehouse_object_data = $this->mobj->getFirstResultByConditions('platform_object_data', ['id' => $order->warehouse_id, 'status' => 1], ['api_id']);
                                    if ($warehouse_object_data) {
                                        $warehouseId = $this->map->getMappedDataByName($userIntegrationId, null, "order_warehouse", ['api_id'], 'regular', $warehouse_object_data->api_id);
                                        if ($warehouseId) {
                                            $OrderWarehouseId = $warehouseId->api_id;
                                        } else {
                                            $OrderWarehouseId = $DefaultOrderWarehouseId;
                                        }
                                    } else {
                                        $OrderWarehouseId = $DefaultOrderWarehouseId;
                                    }
                                    /*----------------End to find order warehouse----------------*/


                                    //Pull cross object warehouse mapping.. for amazon vendor central if found then replace DefaultOrderWarehouseId ....added by gajendra
                                    if ($SourcePlatformName == 'amazonvendor') {
                                        $party = json_decode($order->vendor, true);
                                        if (isset($party) && isset($party['shipFromParty'])) {
                                            $ship_from_address_val = $party['shipFromParty'];
                                            $check_wh_cross_map = $this->map->getMappedDataByName($userIntegrationId, NULL, "ship_from_address", ['api_id'], 'cross', $ship_from_address_val);
                                            if ($check_wh_cross_map) {
                                                $OrderWarehouseId = $check_wh_cross_map->api_id;
                                            }
                                        }
                                    }
                                    //end


                                    /*---START TO FIND ORDER STATUS */

                                    $statusId = app('App\Http\Controllers\Brightpearl\BrightpearlUtility')->OneToOneOrderStatusMapping($userId, $userIntegrationId, $SourcePlatformId, $order_status_object_id, $order->order_status);
                                    if ($statusId == false) {
                                        $statusId = $defaultStatusId;
                                    }

                                    if ($order->is_deleted) {
                                        $delete_order_status = $this->map->getMappedDataByName($userIntegrationId, $PlatformWorkFlowRuleID, "sorder_delete_status", ['api_id']);
                                        if ($delete_order_status) {
                                            $statusId = $delete_order_status;
                                        }
                                    }


                                    /*----------------Start to find order shipping method----------------*/
                                    $sales_order_shipping_method = $this->map->getMappedDataByName($userIntegrationId, null, "sorder_shipping_method", ['api_id'], 'regular', $order->shipping_method, "single", "source");
                                    if ($sales_order_shipping_method) {
                                        $shippingMethodId = $sales_order_shipping_method->api_id;
                                    } else if ($sales_order_shipping_method = $this->map->getMappedDataByName($userIntegrationId, null, "sorder_shipping_method", ['name'], 'regular', $order->shipping_method, "single", "source", ['api_id'])) {
                                        $shippingMethodId = $sales_order_shipping_method->api_id;
                                    } else if ($sales_order_shipping_method = $this->map->getMappedDataByName($userIntegrationId, null, "sorder_shipping_method", ['api_id'], 'regular', $order->shipping_method, "single", "destination")) {
                                        $shippingMethodId = $sales_order_shipping_method->api_id;
                                    } else if ($sales_order_shipping_method = $this->map->getMappedDataByName($userIntegrationId, null, "sorder_shipping_method", ['name'], 'regular', $order->shipping_method, "single", "destination", ['api_id'])) {
                                        $shippingMethodId = $sales_order_shipping_method->api_id;
                                    } else {
                                        $shippingMethodId = $DefaultShippingMethodId;
                                    }
                                    //@sourabh pricelist mapping.
                                    $priceList_Id = isset($priceListId) && $priceListId ? $priceListId->api_id : null;
                                    $priceListPrimary_Id = isset($priceListId) && $priceListId ? $priceListId->id : null;
                                    if ($order->api_pricelist_id) {
                                        $result_price = $this->map->getMappedDataByName($userIntegrationId, $PlatformWorkFlowRuleID, "sorder_pricelist", ['api_id'], 'regular', $order->api_pricelist_id, 'single', 'source');
                                        if ($result_price) {
                                            $priceList_Id = $result_price->api_id;
                                        }
                                        // ** SURYAPAL PRICELIST ID - TO MAP CUSTOMER GROUP TO PRICELIST AS PRICELIST - (NOW ONLY USED FOR BIGCOMMERCE) **
                                        if (in_array($SourcePlatformName, Config::get('apisettings.CustomerGroupAndPriceListMappingPlatformForOrder'))) {
                                            $sc_pricelist_name = PlatformObjectData::where([
                                                'user_integration_id' => $userIntegrationId,
                                                'platform_id' => $SourcePlatformId,
                                                'platform_object_id' => $pricelist_grp_object_id,
                                                'api_id' => $order->api_pricelist_id,
                                            ])->select('name')->first();
                                            if ($sc_pricelist_name) {
                                                $dc_pricelist_api_id = PlatformObjectData::where([
                                                    'user_integration_id' => $userIntegrationId,
                                                    'platform_id' => $this->platformId,
                                                    'platform_object_id' => $pricelist_object_id,
                                                    'name' => $sc_pricelist_name->name,
                                                ])->select('api_id')->first();
                                                if ($dc_pricelist_api_id) {
                                                    $priceList_Id = $dc_pricelist_api_id->api_id;
                                                }
                                            }
                                        }
                                        // ** SURYAPAL PRICELIST ID - END **
                                    }
                                    //@sourabh pricelist mapping.
                                    /*----------------End to find order shipping method----------------*/

                                    $flag = true;
                                    $items = $this->processProducts($order->id, $userId, $userIntegrationId, $this->platformId, $TaxCode, $PlatformWorkFlowRuleID, $account, $ufound, $SourcePlatformId, $SourcePlatformName, $priceList_Id, $priceListPrimary_Id, $DestinationPlatformName);

                                    $items_posting = $items['items_posting'];
                                    if (count($items_posting)) {
                                        /* Find Address */
                                        $addressList = $this->mobj->getFirstResultByConditions('platform_order_address', [
                                            'platform_order_id' => $order->id, 'address_type' => $addressType,
                                        ], ['address_name', 'address1', 'address2', 'address3', 'address4', 'city', 'state', 'postal_code', 'country', 'phone_number', 'firstname', 'lastname', 'ship_speed', 'email', 'company']);

                                        // $this->helper->findCustomerByCustomerIDOrEmail($order->platform_customer_id, $order->customer_email, $userId, $SourcePlatformId, $userIntegrationId);

                                        $existing_customer_response = isset($order->platform_customer_id) && ($order->platform_customer_id > 0) ? $this->SearchCustomerByID($order->platform_customer_id, ['id', 'customer_name', 'email', 'api_customer_group_id', 'api_customer_id', 'email3']) : null;

                                        if ($BpAllowDirectCustomerApiId && ($BpAllowDirectCustomerApiId->api_id == 'Yes') && isset($existing_customer_response) && $existing_customer_response) {
                                            if ($existing_customer_response->api_customer_id) { //if customer api id not found then customer will not create and throw error Customer or address may be not found.
                                                $customerID =  (int)$existing_customer_response->api_customer_id;
                                                $isAllowFromSourceId = true;
                                                $findBpCustomer = app('App\Http\Controllers\Brightpearl\BrightpearlSearchController')->findCustomerByEmailWithUpdateSupport($existing_customer_response->email, $userId, $userIntegrationId, $SourcePlatformId, $SourcePlatformName, null, null, $ufound, null, $customerID, $isAllowFromSourceId);
                                            }
                                        } elseif (isset(Config::get('apisettings.CustomerNameCustomBpIdMappingInBP')[$SourcePlatformName]) && $existing_customer_response && $existing_customer_response->customer_name) {
                                            $customer_identifier_object_id = $this->helper->getObjectId('customer_identifier');
                                            $customer_identifier_object_data = PlatformObjectData::where(['api_id' => $existing_customer_response->customer_name, 'platform_id' => $SourcePlatformId, 'platform_object_id' => $customer_identifier_object_id])->first();

                                            if ($customer_identifier_object_data) {
                                                $customer_identifier_data_mapping = PlatformDataMapping::where(['user_integration_id' => $userIntegrationId, 'source_row_id' => $customer_identifier_object_data->id, 'platform_object_id' => $customer_identifier_object_id])->first();
                                                if ($customer_identifier_data_mapping) {
                                                    $customerID = $customer_identifier_data_mapping->custom_data;
                                                }
                                            }
                                        } else {

                                            //Search ID in customer table
                                            if (isset($existing_customer_response)) {
                                                if ($existing_customer_response && $existing_customer_response->email) {
                                                    $isAllowFromSourceId = false;
                                                    // $findBpCustomer = $this->helper->findCustomerByEmail($existing_customer_response->email, $userId, $this->platformId, $userIntegrationId);
                                                    $findBpCustomer = app('App\Http\Controllers\Brightpearl\BrightpearlSearchController')->findCustomerByEmailWithUpdateSupport($existing_customer_response->email, $userId, $userIntegrationId, $SourcePlatformId, $SourcePlatformName, $existing_customer_response->api_customer_group_id, $pricelist_object_id, $ufound, $pricelist_grp_object_id, null, $isAllowFromSourceId);
                                                    if (isset($findBpCustomer->api_customer_id)) {
                                                        $customerID =  (int)$findBpCustomer->api_customer_id;
                                                    } else {
                                                        /* create new customer if billing or shipping email not found then customer email address is used for customer creation*/
                                                        if (isset($addressList->address1)) {
                                                            $Femail = $addressList->email ? $addressList->email : $existing_customer_response->email;
                                                            $email3 = $existing_customer_response->email3 ? trim($existing_customer_response->email3) : null;
                                                            $postData = [
                                                                "addressLine1" => $addressList->address1,
                                                                "addressLine2" => $addressList->address2,
                                                                "addressLine3" => $addressList->city,
                                                                "addressLine4" => $addressList->state,
                                                                "postalCode" => $addressList->postal_code,
                                                                "countryIsoCode" => $addressList->country,
                                                                'phone_number' => $addressList->phone_number,
                                                                "firstname" => $addressList->firstname,
                                                                'lastname' => $addressList->lastname,
                                                                'email' => $Femail,
                                                                'email3' => $email3,
                                                                'company' => $addressList->company,
                                                            ];

                                                            if (isset(Config::get('apisettings.AllowCustomerUpdateInBrightPearl')[$SourcePlatformName]) && isset($existing_customer_response->api_customer_group_id)) {
                                                                $sc_pricelist_name = PlatformObjectData::where([
                                                                    'user_integration_id' => $userIntegrationId,
                                                                    'platform_id' => $SourcePlatformId,
                                                                    'platform_object_id' => $pricelist_grp_object_id,
                                                                    'api_id' => $existing_customer_response->api_customer_group_id,
                                                                ])->select('name')->first();
                                                                if ($sc_pricelist_name) {
                                                                    $dc_pricelist_api_id = PlatformObjectData::where([
                                                                        'user_integration_id' => $userIntegrationId,
                                                                        'platform_id' => $this->platformId,
                                                                        'platform_object_id' => $pricelist_object_id,
                                                                        'name' => $sc_pricelist_name->name,
                                                                    ])->select('api_id')->first();
                                                                    if ($dc_pricelist_api_id) {
                                                                        $postData['customer_price_list_id'] = $dc_pricelist_api_id->api_id;
                                                                    }
                                                                }
                                                            }
                                                            //Search Customer By Email in BP API
                                                            $customerID = app('App\Http\Controllers\Brightpearl\BrightpearlSearchController')->SearchCustomerByEmail($Femail, $ufound, $userId, $userIntegrationId);
                                                            if (!$customerID) {
                                                                $customer_create_response = $this->CreateCustomers($userId, $userIntegrationId, $postData);
                                                                if ($customer_create_response) {
                                                                    $customerID = $customer_create_response;
                                                                }
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    $CustomData = $this->map->getMappedDataByName($userIntegrationId, $PlatformWorkFlowRuleID, "default_customer_email", ['custom_data'], "default");
                                                    if ($CustomData) {
                                                        $CustomerEmail = $CustomData->custom_data;
                                                        if ($CustomerEmail) {
                                                            $findBpCustomer = $this->helper->findCustomerByEmail($CustomerEmail, $userId, $this->platformId, $userIntegrationId);
                                                            if (isset($findBpCustomer->api_customer_id)) {
                                                                $customerID =  (int)$findBpCustomer->api_customer_id;
                                                            } else {
                                                                //Search Customer By Email in BP API
                                                                $customerID = app('App\Http\Controllers\Brightpearl\BrightpearlSearchController')->SearchCustomerByEmail($CustomerEmail, $ufound, $userId, $userIntegrationId);
                                                                if (!$customerID) {
                                                                    /* create new customer */
                                                                    if (isset($addressList->address1) && $CustomerEmail) {
                                                                        $postData = [
                                                                            "addressLine1" => $addressList->address1,
                                                                            "addressLine2" => $addressList->address2,
                                                                            "addressLine3" => $addressList->city,
                                                                            "addressLine4" => $addressList->state,
                                                                            "postalCode" => $addressList->postal_code,
                                                                            "countryIsoCode" => $addressList->country,
                                                                            'phone_number' => $addressList->phone_number,
                                                                            "firstname" => ($addressList->firstname) ? $addressList->firstname : 'Default',
                                                                            'lastname' => ($addressList->lastname) ? $addressList->lastname : 'Customer',
                                                                            'email' => $CustomerEmail,
                                                                            'company' => $addressList->company,
                                                                        ];

                                                                        $customer_create_response = $this->CreateCustomers($userId, $userIntegrationId, $postData);
                                                                        if ($customer_create_response) {
                                                                            $customerID = $customer_create_response;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            } else if ($order->platform_customer_id == 0) {
                                                $findCustomerEmail = 0;

                                                if (isset($addressList->address1) && isset($addressList->email)) {
                                                    $findCustomerEmail = 1;
                                                    $findBpCustomer = $this->helper->findCustomerByEmail($addressList->email, $userId, $this->platformId, $userIntegrationId);

                                                    if (isset($findBpCustomer->api_customer_id)) {
                                                        $customerID =  (int)$findBpCustomer->api_customer_id;
                                                    } else {
                                                        //Search Customer By Email in BP API
                                                        $customerID = app('App\Http\Controllers\Brightpearl\BrightpearlSearchController')->SearchCustomerByEmail($addressList->email, $ufound, $userId, $userIntegrationId);
                                                        if (!$customerID) {
                                                            if (isset($addressList->address1) && isset($addressList->email)) {
                                                                $findCustomerEmail = 1;
                                                                /* create new customer */
                                                                $postData = [
                                                                    "addressLine1" => $addressList->address1,
                                                                    "addressLine2" => $addressList->address2,
                                                                    "addressLine3" => $addressList->city,
                                                                    "addressLine4" => $addressList->state,
                                                                    "postalCode" => $addressList->postal_code,
                                                                    "countryIsoCode" => $addressList->country,
                                                                    'phone_number' => $addressList->phone_number,
                                                                    "firstname" => $addressList->firstname,
                                                                    'lastname' => $addressList->lastname,
                                                                    'email' => $addressList->email,
                                                                    'company' => $addressList->company,
                                                                ];

                                                                $customer_create_response = $this->CreateCustomers($userId, $userIntegrationId, $postData);
                                                                if ($customer_create_response) {
                                                                    $customerID = $customer_create_response;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }

                                                /* If platfrom_customer_id <=0 and email not exist */
                                                if ($findCustomerEmail == 0) {
                                                    $CustomData = $this->map->getMappedDataByName($userIntegrationId, $PlatformWorkFlowRuleID, "default_customer_email", ['custom_data'], "default");

                                                    if ($CustomData) {
                                                        $CustomerEmail = $CustomData->custom_data;
                                                        if ($CustomerEmail) {
                                                            $findBpCustomer = $this->helper->findCustomerByEmail($CustomerEmail, $userId, $this->platformId, $userIntegrationId);

                                                            if (isset($findBpCustomer->api_customer_id)) {
                                                                $customerID =  (int)$findBpCustomer->api_customer_id;
                                                            } else {
                                                                //Search Customer By Email in BP API
                                                                $customerID = app('App\Http\Controllers\Brightpearl\BrightpearlSearchController')->SearchCustomerByEmail($CustomerEmail, $ufound, $userId, $userIntegrationId);
                                                                if (!$customerID) {
                                                                    /* create new customer */
                                                                    if (isset($addressList->address1) && $CustomerEmail) {
                                                                        $postData = [
                                                                            "addressLine1" => $addressList->address1,
                                                                            "addressLine2" => $addressList->address2,
                                                                            "addressLine3" => $addressList->city,
                                                                            "addressLine4" => $addressList->state,
                                                                            "postalCode" => $addressList->postal_code,
                                                                            "countryIsoCode" => $addressList->country,
                                                                            'phone_number' => $addressList->phone_number,
                                                                            "firstname" => ($addressList->firstname) ? $addressList->firstname : 'Default',
                                                                            'lastname' => ($addressList->lastname) ? $addressList->lastname : 'Customer',
                                                                            'email' => $CustomerEmail,
                                                                            'company' => $addressList->company,
                                                                        ];

                                                                        $customer_create_response = $this->CreateCustomers($userId, $userIntegrationId, $postData);
                                                                        if ($customer_create_response) {
                                                                            $customerID = $customer_create_response;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }

                                        //Create order in brightpearl
                                        if ($customerID && is_numeric($customerID)) {
                                            // $default_shipping_method = $this->map->getMappedDataByName($userIntegrationId, $PlatformWorkFlowRuleID, "sorder_shipping_method", ['api_id'], 'regular', $order->shipping_method);
                                            // if ($default_shipping_method) {
                                            //     $default_shipping_method = $default_shipping_method->api_id;
                                            // } else {
                                            //     $default_shipping_method = $shippingMethodId;
                                            // }

                                            if ($order->currency) {
                                                $currency = $order->currency;
                                            } else {
                                                $currency = isset($account->account_currency_code) ? $account->account_currency_code : null;
                                            }


                                            if ($allowDateConversionQuery) {
                                                $order_date = $order->converted_order_date;
                                            } else {
                                                $order_date = date(DATE_ISO8601, strtotime($order->order_date));
                                            }


                                            if ($BpOdrDefaultTimeZone && isset($timezone_offset) && $order_date) {
                                                $new_order_date = new DateTime($order_date);
                                                if ($timezone_offset) {
                                                    $timezone = new DateTimeZone(trim($timezone_offset));
                                                    $order_date = $new_order_date->setTimezone($timezone);
                                                    $order_date = date(DATE_ISO8601, strtotime($order_date->format('Y-m-d\TH:i:s\Z')));
                                                }
                                            }

                                            $bp_create_order = [
                                                "customer" => [
                                                    "id" => $customerID,
                                                ],
                                                "ref" => $order->order_number,
                                                "placedOn" => $order_date,
                                                "taxDate" => $order_date,
                                                "projectId" => isset($projectId) && $projectId ? $projectId->api_id : null,
                                                "channelId" => isset($channelId) && $channelId ? $channelId->api_id : null,
                                                "leadSourceId" => isset($leadSourceId) && $leadSourceId ? $leadSourceId->api_id : null,
                                                "statusId" => isset($statusId) && $statusId ? $statusId->api_id : null,
                                                "warehouseId" => $OrderWarehouseId,
                                                "priceListId" => $priceList_Id,
                                                "currency" => [
                                                    "code" => $currency,
                                                    "fixedExchangeRate" => false,
                                                ],
                                                "delivery" => $this->getBillingAndShippingAddress(
                                                    $order->id,
                                                    "shipping",
                                                    $customerID,
                                                    ($order->delivery_date) ? $order->delivery_date : $order->payment_date,
                                                    $shippingMethodId
                                                ),
                                                "billing" => $this->getBillingAndShippingAddress(
                                                    $order->id,
                                                    "billing",
                                                    $customerID,
                                                    ($order->delivery_date) ? $order->delivery_date : $order->payment_date,
                                                    $shippingMethodId
                                                ),
                                                "rows" => $items_posting,
                                            ];

                                            //if Customer Representive Available
                                            $findSaleRep = null;
                                            if ($order->platform_customer_emp_id) {
                                                //login assign to if found
                                                $findSaleRep = $this->getSalesRepresentative($order->platform_customer_emp_id, $userId, $userIntegrationId);
                                                if ($findSaleRep) {
                                                    $bp_create_order['staffOwnerId'] = $findSaleRep;

                                                    //test log
                                                    // Storage::disk('local')->append('mutateEventCrone.txt', 'StaffOwnerId : ' . $findSaleRep
                                                    //     . ' -userInteg-' . $userIntegrationId);
                                                }
                                            }

                                            if (!empty($bp_create_order)) {
                                                $responseBP = [];
                                                $createOrder = true;
                                                $allowCheckOrderNumber=false;
                                                if ($order->allow_check) { //when deadlock found set allow_check=1 to resync order
                                                    if ($order->linked_api_order_id) {   //when already order created
                                                        $createOrder = false;
                                                        $responseBP['response'] = (int) $order->linked_api_order_id;
                                                    } else {
                                                        //search order by customer reference in BP
                                                        $searchResult = app('App\Http\Controllers\Brightpearl\BrightpearlSearchController')->SearchOrderByCustomerReference($order->order_number, $ufound, $userIntegrationId);
                                                        if (isset($searchResult['api_error']) && $searchResult['api_error']) {
                                                            $createOrder = false;
                                                            $responseBP['response'] = $searchResult['error'];
                                                        } else if (isset($searchResult['custom_error']) && $searchResult['custom_error']) {
                                                            $createOrder = true;
                                                            $responseBP['response'] = $searchResult['error'];
                                                        } else if (isset($searchResult['exception_error']) && $searchResult['exception_error']) {
                                                            $createOrder = false;
                                                            $responseBP['response'] = $searchResult['error'];
                                                        } else if (isset($searchResult['order_id']) && is_int($searchResult['order_id'])) {
                                                            $createOrder = false;
                                                            $responseBP['response'] = $searchResult['order_id'];
                                                            $allowCheckOrderNumber=true;
                                                        }
                                                    }
                                                }
                                                if ($createOrder) {
                                                    $responseBP = $this->CreateOrderInBrightpearl($ufound, $userIntegrationId, $bp_create_order);
                                                }
                                                if (isset($responseBP['response']) && is_int($responseBP['response'])) {
                                                    if (isset(Config::get('apisettings.DisplayOrderNumberInBP')[$SourcePlatformName])) {
                                                        //This basically for display BP Order Number in log
                                                        $DisplayOrderNumber = $responseBP['response'];
                                                    } else {
                                                        $DisplayOrderNumber = $order->order_number;
                                                    }

                                                    //for amazonvendor & bp integration, PO acknowledge case
                                                    $order_sync_status = (in_array($SourcePlatformName, Config::get('apisettings.BpSOsyncStatusPending'))) ? 'Pending' : 'Ready';

                                                    $saveOrder = [
                                                        'user_id' => $userId,
                                                        'platform_id' => $this->platformId,
                                                        'user_integration_id' => $userIntegrationId,
                                                        'user_workflow_rule_id' => $UserWorkFlowRuleID,
                                                        'order_type' => "SO",
                                                        'api_order_id' => $responseBP['response'],
                                                        'order_date' => date("Y-m-d H:i:s"),
                                                        'order_number' => $DisplayOrderNumber,
                                                        'sync_status' => $order_sync_status,
                                                        'linked_id' => $order->id,
                                                        'shipment_status' => "Pending",
                                                        'warehouse_id' => $OrderWarehouseId,
                                                        'order_updated_at' => date("Y-m-d H:i:s"),
                                                    ];
                                                    if($allowCheckOrderNumber){
                                                        $OrderLinked=PlatformOrder::where([ 'user_id' => $userId,
                                                        'platform_id' => $this->platformId,
                                                        'user_integration_id' => $userIntegrationId,
                                                        'order_type' => "SO",
                                                        'api_order_id' => $order_response['orderNo']])->first();
                                                        if(!$OrderLinked){
                                                            $OrderLinked = app('App\Http\Controllers\Brightpearl\BrightpearlUtility')->SaveOrderDetails($saveOrder); //$this->mobj->makeInsertGetId('platform_order', $saveOrder);
                                                        }
                                                    }else{

                                                        $OrderLinked = app('App\Http\Controllers\Brightpearl\BrightpearlUtility')->SaveOrderDetails($saveOrder); //$this->mobj->makeInsertGetId('platform_order', $saveOrder);

                                                    }
                                                    if ($OrderLinked) {
                                                        $this->updateOrder(['id'=>$order->id],[
                                                            'linked_api_order_id' => $responseBP['response'],
                                                            'sync_status'=>PlatformStatus::SYNCED,
                                                            'order_updated_at'=> date("Y-m-d H:i:s"),
                                                            'allow_check' =>1,
                                                            'linked_id'=> $OrderLinked
                                                        ]);
                                                        if (isset(Config::get('apisettings.SaveBrightpearlCreatedSalesOrderData')[$SourcePlatformName])) {
                                                            $this->storeNewCreatedOrderDetail($userId, $userIntegrationId, $responseBP['response'], $OrderLinked, $ufound);
                                                        }

                                                        $this->log->syncLog($userId, $userIntegrationId, $UserWorkFlowRuleID, $SourcePlatformId, $this->platformId, $object_id, 'success', $order->id, null);
                                                    } else {
                                                        $this->updateOrder(['id'=>$order->id],[
                                                            'linked_api_order_id' => $responseBP['response'],
                                                            'sync_status'=>PlatformStatus::FAILED,
                                                            'order_updated_at'=> date("Y-m-d H:i:s"),
                                                            'allow_check' =>1,
                                                            'linked_id'=> $OrderLinked
                                                        ]);

                                                        $this->log->syncLog($userId, $userIntegrationId, $UserWorkFlowRuleID, $SourcePlatformId, $this->platformId, $object_id, 'failed', $order->id, "Order failed due to concurrent sync, please retry.");
                                                    }

                                                    //$this->mobj->makeInsert('platform_urls', ['url'=>'/order/' . $responseBP['response'], 'user_id'=>$userId, 'platform_id'=>$this->platformId, 'user_integration_id'=>$userIntegrationId, 'url_name'=>'sales_orders']);
                                                    //end

                                                    sleep(1);
                                                    /* For Order Item  Allocation*/
                                                    if ($OrderWarehouseId) {
                                                        $this->AllocateOrderItemsInBrightpearl($responseBP['response'], $userId, $userIntegrationId, $OrderWarehouseId, $SourcePlatformId, $UserWorkFlowRuleID, $order->id, $ufound);
                                                    }
                                                    /* ----Allocation end */
                                                    sleep(1);
                                                    /* Create Payment  For Payment / Transaction Of Order  */
                                                    if (isset($order->currency)) {
                                                        $currency = $order->currency;
                                                    } else {
                                                        $currency = isset($account->account_currency_code) ? $account->account_currency_code : null;
                                                    }

                                                    //if ($SourcePlatformName != 'amazon' && $SourcePlatformName != 'zulily') {
                                                    //$this->OrderPaymentInBrightpearl($responseBP['response'], $userId, $userIntegrationId, $currency, $SourcePlatformId, $PlatformWorkFlowRuleID, $UserWorkFlowRuleID, $order->id);
                                                    $successPyamentResponse = $this->MupltipleOrderPaymentSync($responseBP['response'], $userId, $userIntegrationId, $currency, $SourcePlatformId, $SourcePlatformName, $PlatformWorkFlowRuleID, $UserWorkFlowRuleID, $order->id, ["Ready", "Failed"]);
                                                    if (!is_bool($successPyamentResponse)) {
                                                        /* If any payment is pending or failed at the time of sync | set order as failed with custom error */
                                                        $error = $successPyamentResponse;
                                                        if ($error == 'You have sent too many requests. Please wait before sending another request') {
                                                            //Set sync_status as previously
                                                            if (isset($orderIds[$order->id])) {
                                                                $order->sync_status = $orderIds[$order->id];
                                                                $this->updateOrder(['id'=>$order->id],[
                                                                    'sync_status'=>$orderIds[$order->id]
                                                                ]);
                                                            }
                                                            continue;
                                                        }
                                                        else
                                                        {
                                                            $this->updateOrder(['id'=>$order->id],['sync_status'=>PlatformStatus::FAILED, 'order_updated_at'=> date("Y-m-d H:i:s")]);

                                                            $this->log->syncLog($userId, $userIntegrationId, $UserWorkFlowRuleID, $SourcePlatformId, $this->platformId, $object_id, 'failed', $order->id, $error);
                                                            $return_response = $error;
                                                        }
                                                    }
                                                    // }
                                                    /* Payment End */

                                                    //update ship date in custom field if mapping selected used in amazon vendor central added by gajendra
                                                    if ($SourcePlatformName == 'amazonvendor') {

                                                        //update ship date in custom field
                                                        if ($order->ship_date) {
                                                            $this->updateSingleCustomFieldByFieldName($ufound, $userIntegrationId, $object_id, $responseBP['response'], $order->ship_date, 'SHIP_DATE');
                                                        }

                                                        //delivery date update in custom field
                                                        if ($order->delivery_date) {
                                                            $this->updateSingleCustomFieldByFieldName($ufound, $userIntegrationId, $object_id, $responseBP['response'], $order->delivery_date, 'DELIVERY_DATE');
                                                            $this->updateSingleCustomFieldByFieldName($ufound, $userIntegrationId, $object_id, $responseBP['response'], $order->delivery_date, 'DELIVERY_DATE2');
                                                        }
                                                    } else {
                                                        $this->UpdateCustomField($ufound, $PlatformWorkFlowRuleID, $userIntegrationId, $object_id, $order->id, $responseBP['response']);
                                                    }
                                                } else if (isset($responseBP['errors'])) {
                                                    $error = $this->bp->handleResponseError($responseBP);
                                                    if ($error == 'You have sent too many requests. Please wait before sending another request') {
                                                        $return_response = $error;
                                                        //Set sync_status as previously
                                                        if (isset($orderIds[$order->id])) {
                                                            $this->updateOrder(['id'=>$order->id],[
                                                                'sync_status'=>$orderIds[$order->id]
                                                            ]);
                                                        }
                                                        continue;
                                                    } else {
                                                        $patternfound = $this->FindErrorPattern(["You have provided an invalid contact ID", "Contact not a customer with contact ID"], $error);
                                                        /* If invalid contact ID or customer not found then set is deleted=1 */
                                                        if ($patternfound['status'] == 1) {
                                                            $this->DeleteCustomer($userId, $userIntegrationId, $this->platformId, $customerID);
                                                        }
                                                        $error = $patternfound['status_text'];
                                                        if (empty($error)) {
                                                            //Set sync_status as previously
                                                            if (isset($orderIds[$order->id])) {
                                                                $this->updateOrder(['id'=>$order->id],[
                                                                    'sync_status'=>$orderIds[$order->id]
                                                                ]);
                                                            }
                                                            continue;
                                                            //$error = "Unexpected, Brightpearl internal error, please resync again"; //Avoid this
                                                        }
                                                        $this->updateOrder(['id'=>$order->id],[
                                                            'sync_status'=>PlatformStatus::FAILED,
                                                            'order_updated_at'=> date("Y-m-d H:i:s")
                                                        ]);

                                                        $this->log->syncLog($userId, $userIntegrationId, $UserWorkFlowRuleID, $SourcePlatformId, $this->platformId, $object_id, 'failed', $order->id, $error);
                                                        $return_response = $error;
                                                    }
                                                } else {
                                                    $error = "Unexpected, Brightpearl internal error, please resync again";
                                                    if (isset($responseBP['response']) && !is_int($responseBP['response'])) {
                                                        $error = $responseBP['response'];
                                                    }

                                                    if ($error == 'You have sent too many requests. Please wait before sending another request' || $error == "Unexpected, Brightpearl internal error, please resync again") {
                                                        $return_response = $error;
                                                        //Set sync_status as previously
                                                        if (isset($orderIds[$order->id])) {
                                                            $this->updateOrder(['id'=>$order->id],[
                                                                'sync_status'=>$orderIds[$order->id]
                                                            ]);
                                                        }
                                                        continue;
                                                    } else {

                                                        $this->updateOrder(['id'=>$order->id],[
                                                            'sync_status'=>PlatformStatus::FAILED,
                                                            'order_updated_at'=> date("Y-m-d H:i:s")
                                                        ]);
                                                        $this->log->syncLog($userId, $userIntegrationId, $UserWorkFlowRuleID, $SourcePlatformId, $this->platformId, $object_id, 'failed', $order->id, $error);
                                                        $return_response = $error;
                                                    }
                                                }
                                            } else {
                                                $return_response = "Empty payload not allowed";
                                            }
                                        } else {
                                            $error = "Customer or address may be not found.";
                                            if (is_string($customerID)) {
                                                $error = $customerID;
                                            }

                                            if ($error == 'You have sent too many requests. Please wait before sending another request') {
                                                $return_response = $error;
                                                //Set sync_status as previously
                                                if (isset($orderIds[$order->id])) {
                                                    $this->updateOrder(['id'=>$order->id],[
                                                        'sync_status'=>$orderIds[$order->id]
                                                    ]);
                                                }
                                                continue;
                                            } else {

                                                $this->updateOrder(['id'=>$order->id],[
                                                    'sync_status'=>PlatformStatus::FAILED,
                                                    'order_updated_at'=> date("Y-m-d H:i:s")
                                                ]);
                                                $this->log->syncLog($userId, $userIntegrationId, $UserWorkFlowRuleID, $SourcePlatformId, $this->platformId, $object_id, 'failed', $order->id, $error);
                                                $return_response = $error;

                                            }
                                        }
                                    } else {
                                        $error = "Order lineitem not available.";
                                        $this->updateOrder(['id'=>$order->id],[
                                            'sync_status'=>PlatformStatus::FAILED,
                                            'order_updated_at'=> date("Y-m-d H:i:s")
                                        ]);
                                        $this->log->syncLog($userId, $userIntegrationId, $UserWorkFlowRuleID, $SourcePlatformId, $this->platformId, $object_id, 'failed', $order->id, $error);
                                        $return_response = $error;
                                    }
                                } else if ($order->linked_id !== 0) {
                                    if ($order->is_voided) { //If Order Canceled
                                        $flag = true;
                                        $find = $this->FindOrderIDByLinkedID($order->linked_id, ["api_order_id"]);
                                        if (isset($find->api_order_id)) {
                                            $result = $this->GetOrderByID($find->api_order_id, $ufound);

                                            if (isset($result['response']) && is_array($result['response'])) {

                                                if (!empty($result['response'][0]['orderPaymentStatus']) && !in_array($result['response'][0]['orderPaymentStatus'], ["NOT_APPLICABLE", "UNPAID"])) {

                                                    $payments = $this->SearchCustomerPayments($ufound, $find->api_order_id);

                                                    if (isset($payments['response']) && $payments) {
                                                        if (isset($payments['response']['results']) && !empty($payments['response']['results'])) {

                                                            foreach ($payments['response']['results'] as $key => $values) {
                                                                foreach ($values as $val) {
                                                                    $deletePayment = $this->DeleteCustomerPaymentByID($ufound, $val);

                                                                    if (is_array($deletePayment)) {
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    if ($cancelOrderStatusID) {
                                                        $changeStatus = $this->UpdateOrderStatus($ufound, $find->api_order_id, $cancelOrderStatusID);

                                                        if (is_array($changeStatus)) {

                                                            if (!isset($changeStatus['errors'])) {

                                                                $this->updateOrder(['id'=>$order->id],[
                                                                    'sync_status'=>PlatformStatus::SYNCED,
                                                                    'order_updated_at'=> date("Y-m-d H:i:s")
                                                                ]);
                                                                $this->updateOrder(['id'=>$order->linked_id],[
                                                                    'sync_status'=>PlatformStatus::SYNCED,
                                                                    'order_updated_at'=> date("Y-m-d H:i:s")
                                                                ]);
                                                                $this->log->syncLog($userId, $userIntegrationId, $UserWorkFlowRuleID, $SourcePlatformId, $this->platformId, $object_id, 'success', $order->id, null);
                                                                $return_response = true;
                                                            } else if (isset($changeStatus['errors']) && is_array($changeStatus['errors'])) {
                                                                $return_response = $this->bp->handleResponseError($changeStatus);
                                                                if ($return_response == 'You have sent too many requests. Please wait before sending another request') {
                                                                    //Set sync_status as previously
                                                                    if (isset($orderIds[$order->id])) {
                                                                        $this->updateOrder(['id'=>$order->id],[
                                                                            'sync_status'=>$orderIds[$order->id]
                                                                        ]);
                                                                    }
                                                                    continue;
                                                                } else {
                                                                    $this->updateOrder(['id'=>$order->id],[
                                                                        'sync_status'=>PlatformStatus::FAILED,
                                                                        'order_updated_at'=> date("Y-m-d H:i:s")
                                                                    ]);
                                                                    $this->log->syncLog($userId, $userIntegrationId, $UserWorkFlowRuleID, $SourcePlatformId, $this->platformId, $object_id, 'failed', $order->id, $return_response);
                                                                }
                                                            } else {
                                                                $return_response = isset($changeStatus['response']) ? ($changeStatus['response']) : "API Error";
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if ($cancelOrderStatusID) {
                                                        $changeStatus = $this->UpdateOrderStatus($ufound, $find->api_order_id, $cancelOrderStatusID);
                                                        if (is_array($changeStatus)) {

                                                            if (!isset($changeStatus['errors'])) {


                                                                $this->updateOrder(['id'=>$order->id],[
                                                                    'sync_status'=>PlatformStatus::SYNCED,
                                                                    'order_updated_at'=> date("Y-m-d H:i:s")
                                                                ]);
                                                                $this->updateOrder(['id'=>$order->linked_id],[
                                                                    'sync_status'=>PlatformStatus::SYNCED,
                                                                    'order_updated_at'=> date("Y-m-d H:i:s")
                                                                ]);
                                                                $this->log->syncLog($userId, $userIntegrationId, $UserWorkFlowRuleID, $SourcePlatformId, $this->platformId, $object_id, 'success', $order->id, null);
                                                                $return_response = true;
                                                            } else if (isset($changeStatus['errors']) && is_array($changeStatus['errors'])) {
                                                                $return_response = $this->bp->handleResponseError($changeStatus);
                                                                if ($return_response == 'You have sent too many requests. Please wait before sending another request') {
                                                                    //Set sync_status as previously
                                                                    if (isset($orderIds[$order->id])) {
                                                                        $this->updateOrder(['id'=>$order->id],[
                                                                            'sync_status'=>$orderIds[$order->id]
                                                                        ]);
                                                                    }
                                                                    continue;
                                                                } else {
                                                                    $this->updateOrder(['id'=>$order->id],[
                                                                        'sync_status'=>PlatformStatus::FAILED,
                                                                        'order_updated_at'=> date("Y-m-d H:i:s")
                                                                    ]);
                                                                    $this->log->syncLog($userId, $userIntegrationId, $UserWorkFlowRuleID, $SourcePlatformId, $this->platformId, $object_id, 'failed', $order->id, $return_response);
                                                                }
                                                            } else {
                                                                $return_response = isset($changeStatus['response']) ? ($changeStatus['response']) : "API Error";
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                $return_response = $this->bp->handleResponseError($result);
                                                if ($return_response == 'You have sent too many requests. Please wait before sending another request') {
                                                    //Set sync_status as previously
                                                    if (isset($orderIds[$order->id])) {
                                                        $order->sync_status = $orderIds[$order->id];
                                                        $order->save();
                                                        $this->updateOrder(['id'=>$order->id],[
                                                            'sync_status'=>$orderIds[$order->id]
                                                        ]);
                                                    }
                                                    continue;
                                                } else {
                                                    $this->updateOrder(['id'=>$order->id],[
                                                        'sync_status'=>PlatformStatus::FAILED,
                                                        'order_updated_at'=> date("Y-m-d H:i:s")
                                                    ]);

                                                    $this->log->syncLog($userId, $userIntegrationId, $UserWorkFlowRuleID, $SourcePlatformId, $this->platformId, $object_id, 'failed', $order->id, $return_response);
                                                }
                                            }
                                        }
                                    } else {
                                        $allowStatusSync = false;
                                        $allowPaymentSync = true;
                                        if ($order->is_fully_synced) { //If Order acknowledge full sync
                                            $flag = true;
                                            $ackOrderStatusID = $this->map->getMappedDataByName($userIntegrationId, $PlatformWorkFlowRuleID, "default_final_sorder_status", ['api_id']);
                                            $statusId = isset($ackOrderStatusID->api_id) ? $ackOrderStatusID->api_id : null;
                                        } else {
                                            $flag = false;
                                            if (isset(Config::get('apisettings.AllowOrderStatusUpdateInBP')[$SourcePlatformName])) {
                                                $status = app('App\Http\Controllers\Brightpearl\BrightpearlUtility')->OneToOneOrderStatusMapping($userId, $userIntegrationId, $SourcePlatformId, $order_status_object_id, $order->order_status); //Check one to one order status mapping
                                                $statusId = isset($status->api_id) ? $status->api_id : null;
                                                if ($statusId) {
                                                    $allowStatusSync = true;
                                                }
                                            }
                                        }

                                        $find = $this->FindOrderIDByLinkedID($order->linked_id, ["api_order_id"]);
                                        if (isset($find->api_order_id)) {

                                            if ($allowPaymentSync) {
                                                /* Create Payment  For Payment / Transaction Of Order  */
                                                if (isset($order->currency)) {
                                                    $currency = $order->currency;
                                                } else {
                                                    $currency = isset($account->account_currency_code) ? $account->account_currency_code : null;
                                                }

                                                // if ($SourcePlatformName != 'amazon' && $SourcePlatformName != 'zulily') {

                                                $successPyamentResponse = $this->MupltipleOrderPaymentSync($find->api_order_id, $userId, $userIntegrationId, $currency, $SourcePlatformId, $SourcePlatformName, $PlatformWorkFlowRuleID, $UserWorkFlowRuleID, $order->id, ["Ready", "Failed"]);
                                                if (is_bool($successPyamentResponse)) {
                                                    //If all payments are synced
                                                    $this->updateOrder(['id'=>$order->id],[
                                                        'sync_status'=>PlatformStatus::SYNCED,
                                                        'order_updated_at'=> date("Y-m-d H:i:s")
                                                    ]);
                                                } else {
                                                    $error = $successPyamentResponse;
                                                    if ($error == 'You have sent too many requests. Please wait before sending another request') {
                                                        //Set sync_status as previously
                                                        if (isset($orderIds[$order->id])) {
                                                            $order->sync_status = $orderIds[$order->id];
                                                            $this->updateOrder(['id'=>$order->id],[
                                                                'sync_status'=>$orderIds[$order->id]
                                                            ]);
                                                        }
                                                        continue;
                                                    } else {
                                                        $this->updateOrder(['id'=>$order->id],[
                                                            'sync_status'=>PlatformStatus::FAILED,
                                                            'order_updated_at'=> date("Y-m-d H:i:s")
                                                        ]);
                                                        $this->log->syncLog($userId, $userIntegrationId, $UserWorkFlowRuleID, $SourcePlatformId, $this->platformId, $object_id, 'failed', $order->id, $error);
                                                    }
                                                }
                                            }

                                            if ($allowStatusSync) {
                                                $flag = true;
                                                $result = $this->GetOrderByID($find->api_order_id, $ufound);
                                                if (isset($result['response']) && is_array($result['response'])) {
                                                    if ($statusId && isset($result['response'][0]['orderStatus']['orderStatusId']) && $result['response'][0]['orderStatus']['orderStatusId'] == $statusId) { //If order status same as mapping status | Don't perform action just change the order status as synced
                                                        $statusId = false;

                                                        $this->updateOrder(['id'=>$order->id],[
                                                            'sync_status'=>PlatformStatus::SYNCED,
                                                            'order_updated_at'=> date("Y-m-d H:i:s")
                                                        ]);
                                                        $this->updateOrder(['id'=>$order->linked_id],[
                                                            'sync_status'=>PlatformStatus::SYNCED,
                                                            'order_updated_at'=> date("Y-m-d H:i:s")
                                                        ]);
                                                        $this->log->syncLog($userId, $userIntegrationId, $UserWorkFlowRuleID, $SourcePlatformId, $this->platformId, $object_id, 'success', $order->id, null);
                                                        $return_response = true;
                                                    }
                                                    // order status update
                                                    if ($statusId) {
                                                        $changeStatus = $this->UpdateOrderStatus($ufound, $find->api_order_id, $statusId);
                                                        if (is_array($changeStatus)) {
                                                            if (!isset($changeStatus['errors'])) {
                                                                $this->updateOrder(['id'=>$order->id],[
                                                                    'sync_status'=>PlatformStatus::SYNCED,
                                                                    'order_updated_at'=> date("Y-m-d H:i:s")
                                                                ]);
                                                                $this->updateOrder(['id'=>$order->linked_id],[
                                                                    'sync_status'=>PlatformStatus::SYNCED,
                                                                    'order_updated_at'=> date("Y-m-d H:i:s")
                                                                ]);
                                                                $this->log->syncLog($userId, $userIntegrationId, $UserWorkFlowRuleID, $SourcePlatformId, $this->platformId, $object_id, 'success', $order->id, null);
                                                                $return_response = true;
                                                            } else if (isset($changeStatus['errors']) && is_array($changeStatus['errors'])) {
                                                                $return_response = $this->bp->handleResponseError($changeStatus);
                                                                if ($return_response == 'You have sent too many requests. Please wait before sending another request') {
                                                                    //Set sync_status as previously
                                                                    if (isset($orderIds[$order->id])) {

                                                                        $this->updateOrder(['id'=>$order->id],[
                                                                            'sync_status'=>$orderIds[$order->id]
                                                                        ]);
                                                                    }
                                                                    continue;
                                                                } else {
                                                                    $this->updateOrder(['id'=>$order->id],[
                                                                        'sync_status'=>PlatformStatus::FAILED,
                                                                        'order_updated_at'=> date("Y-m-d H:i:s")
                                                                    ]);
                                                                    $this->log->syncLog($userId, $userIntegrationId, $UserWorkFlowRuleID, $SourcePlatformId, $this->platformId, $object_id, 'failed', $order->id, $return_response);
                                                                }
                                                            } else {
                                                                $return_response = isset($changeStatus['response']) ? ($changeStatus['response']) : "API Error";
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    $return_response = $this->bp->handleResponseError($result);
                                                    if ($return_response == 'You have sent too many requests. Please wait before sending another request') {
                                                        //Set sync_status as previously
                                                        if (isset($orderIds[$order->id])) {
                                                            $this->updateOrder(['id'=>$order->id],[
                                                                'sync_status'=>$orderIds[$order->id]
                                                            ]);
                                                        }
                                                        continue;
                                                    } else {
                                                        $this->updateOrder(['id'=>$order->id],[
                                                            'sync_status'=>PlatformStatus::FAILED,
                                                            'order_updated_at'=> date("Y-m-d H:i:s")
                                                        ]);
                                                        $this->log->syncLog($userId, $userIntegrationId, $UserWorkFlowRuleID, $SourcePlatformId, $this->platformId, $object_id, 'failed', $order->id, $return_response);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }

                            }

                        }
                    }

                    if ($recordExist == 0) {
                        $return_response = "Record not exist";
                    }
                }
            }
        } catch (\Exception $e) {
            Log::error($e->getMessage());
            $return_response = $e->getMessage();
        }

        return $return_response;
    }
    public function SyncOrderInBPDemo($userId = null, $userIntegrationId = null, $PlatformWorkFlowRuleID = null, $UserWorkFlowRuleID = null, $SourcePlatformName = null, $sync_status = "Ready", $RecordID = null, $DestinationPlatformName = null)
    {
        /* When you need extra memory to excute the code*/
        $this->mobj->AddMemory();
        $return_response = false;
        try {
            $limit = 10;
            $recordExist = 0;
            $sourceOffset = '+00:00';
            $destinationOffset = null;
            $allowDateConversionQuery = null;
            $object_id = $this->helper->getObjectId('sales_order');
            $order_status_object_id = $this->helper->getObjectId('order_status');
            $ufound = $this->mobj->getPlatformAccountByUserIntegration($userIntegrationId, $this->platformId, ['access_token', 'platform_id', 'id', 'user_id', 'api_domain', 'account_name', 'app_id', 'app_secret']);

            $SourcePlatformId = $this->helper->getPlatformIdByName($SourcePlatformName);

            $SOurceUfound = $this->mobj->getPlatformAccountByUserIntegration($userIntegrationId, $SourcePlatformId, ['app_id', 'app_secret', 'platform_id', 'id', 'user_id', 'api_domain']);

            if ($ufound && $this->platformId && $SourcePlatformId && $SOurceUfound) {
                if (isset($ufound->platform_id) && $ufound->platform_id == $this->platformId) {
                    $account = $this->mobj->getFirstResultByConditions('platform_account_addtional_information', ['account_id' => $ufound->id, 'user_integration_id' => $userIntegrationId], ['account_currency_code', 'account_shipping_nominal_code', 'account_discount_nominal_code', 'account_sale_nominal_code', 'account_purchase_nominal_code', 'account_timezone', 'account_giftcard_nominal_code'], ['id' => 'asc']);

                    if (isset($account->account_timezone) && !empty($account->account_timezone)) {
                        /* Set BP account timezone */
                        date_default_timezone_set($account->account_timezone);

                        if (isset(Config::get('apisettings.AllowDateConversionInBPOrder')[$SourcePlatformName])) {

                            $destinationOffset = app('App\Http\Controllers\Brightpearl\BrightpearlUtility')->getUTCOffset($account->account_timezone);
                            if (!is_bool($destinationOffset)) {
                                /* Do not match source and destination offset */
                                if ($destinationOffset != $sourceOffset) {
                                    $allowDateConversionQuery = DB::raw("CONCAT(DATE_FORMAT(convert_tz(api_updated_at,'" . $sourceOffset . "','" . $destinationOffset . "'),'%Y-%m-%dT%T'),'" . $destinationOffset . "') as converted_order_date");
                                }
                            }
                        }
                    }

                    $query = PlatformOrder::select('user_id', 'platform_id', 'user_integration_id', 'platform_customer_id', 'platform_customer_emp_id', 'trading_partner_id', 'order_type', 'api_order_id', 'customer_email', 'order_number', 'order_date', 'due_days', 'department', 'vendor', 'total_discount', 'total_tax', 'discount_tax', 'total_amount', 'notes', 'sync_status', 'linked_id', 'shipping_total', 'shipping_tax', 'carrier_code', 'warehouse_id', 'order_update_status', 'id', 'currency', 'shipping_method', 'payment_date', 'delivery_date', 'is_voided', 'is_fully_synced', 'api_pricelist_id', 'is_deleted', 'order_status', 'allow_check', 'linked_api_order_id', 'ship_date', 'order_updated_at');
                    if ($allowDateConversionQuery) {
                        $query->addSelect($allowDateConversionQuery);
                    }
                    if ($RecordID && $RecordID !== 0) {
                        $query->where('id', $RecordID);
                    } else {
                        $query->where([['user_integration_id', '=', $userIntegrationId], ['platform_id', '=', $SOurceUfound->platform_id], ['sync_status', '=', $sync_status]]);
                    }
                    $list = $query->take($limit)->orderBy('id', 'asc')->get();
                    if (!empty($list) && count($list) > 0) {
                        $orderIds = $query->pluck('sync_status', 'id')->toArray(); //before sync get only order ids to set sync_status as Processing
                        if (count($orderIds)) {
                            $orderPrimaryIds = array_keys($orderIds);
                            PlatformOrder::whereIn('id', $orderPrimaryIds)->update(['sync_status' => PlatformStatus::PROCESSING]);
                        }

                        $recordExist = 1;

                        if ($account) {

                            $flag = true;
                            if ($flag) {

                                $items_posting = [];

                                $pricelist_object_id = $this->helper->getObjectId('pricelist');
                                $pricelist_grp_object_id = $this->helper->getObjectId('pricelist_group');

                                $projectId = $this->map->getMappedDataByName($userIntegrationId, $PlatformWorkFlowRuleID, "sorder_project", ['api_id']);

                                $channelId = $this->map->getMappedDataByName($userIntegrationId, $PlatformWorkFlowRuleID, "sorder_channel", ['api_id']);

                                $leadSourceId = $this->map->getMappedDataByName($userIntegrationId, $PlatformWorkFlowRuleID, "sorder_lead", ['api_id']);

                                $defaultStatusId = $this->map->getMappedDataByName($userIntegrationId, $PlatformWorkFlowRuleID, "sorder_status", ['api_id']);
                                $DefaultOrderWarehouseId = null;
                                $DefaultWarehouseId = $this->map->getMappedDataByName($userIntegrationId, $PlatformWorkFlowRuleID, "order_warehouse", ['api_id']);
                                if ($DefaultWarehouseId) {
                                    $DefaultOrderWarehouseId = $DefaultWarehouseId->api_id;
                                }

                                $priceListId = $this->map->getMappedDataByName($userIntegrationId, $PlatformWorkFlowRuleID, "sorder_pricelist", ['api_id', 'id']);
                                $cancelOrderStatusID = $this->map->getMappedDataByName($userIntegrationId, $PlatformWorkFlowRuleID, "scancelled_order_status", ['api_id']);
                                $cancelOrderStatusID = isset($cancelOrderStatusID->api_id) ? $cancelOrderStatusID->api_id : null;
                                $TaxCode = $this->map->getMappedDataByName($userIntegrationId, $PlatformWorkFlowRuleID, "sorder_taxcode", ['api_code'], 'default');

                                $TaxCode = isset($TaxCode) && $TaxCode ? $TaxCode->api_code : null;

                                $addressType = $this->map->getMappedDataByName($userIntegrationId, $PlatformWorkFlowRuleID, "sorder_shipping_address", ['api_id']);
                                $addressType = isset($addressType) && $addressType ? $addressType->api_id : "billing";

                                $customerID = $DefaultShippingMethodId = null;
                                $default_sales_order_shipping_method = $this->map->getMappedDataByName($userIntegrationId, null, "sorder_shipping_method", ['api_id']);
                                if ($default_sales_order_shipping_method) {
                                    $DefaultShippingMethodId = $default_sales_order_shipping_method->api_id;
                                }

                                $BpOdrDefaultTimeZone = null;
                                $BpOdrDefaultTimeZone = $this->map->getMappedDataByName($userIntegrationId, $PlatformWorkFlowRuleID, "timezone", ['custom_data'], "default");
                                if ($BpOdrDefaultTimeZone && $BpOdrDefaultTimeZone->custom_data) {
                                    $timezone_offset =  EsRegionalTimeZone::where('id', $BpOdrDefaultTimeZone->custom_data)->pluck('gmt_offset')->first();
                                }

                                // BP allow direct customer ID
                                $BpAllowDirectCustomerApiId = $this->map->getMappedDataByName($userIntegrationId, $PlatformWorkFlowRuleID, "allow_direct_customer_api_id", ['api_id']);
                            }

                            foreach ($list as $key => $order) {
                                /* Check and prevent duplicate order */
                                $findDuplicateOrder = app('App\Http\Controllers\Brightpearl\BrightpearlUtility')->CheckAndPreventDuplicateOrder($SourcePlatformId, $userIntegrationId, $order);
                                if ($findDuplicateOrder) {
                                    continue;
                                }

                                //order_date
                                /* added by gajendra ..extra condition for amazon-vendor direct fullfillment status | check order type mapping if found then replace order status as per mapping for direct fullfillment orders & other */
                                $order_type_filter = $this->map->getMappedDataByName($userIntegrationId, $PlatformWorkFlowRuleID, "order_type_filter", ['api_id']);
                                if ($order_type_filter) {
                                    /* if order type SO means its direct fullfillment order */
                                    if ($order->order_type == 'SO') {
                                        $defaultStatusId = $this->map->getMappedDataByName($userIntegrationId, $PlatformWorkFlowRuleID, "df_order_status", ['api_id']);
                                    }
                                }

                                if ($order->linked_id == 0 && !$order->is_voided) {
                                    /*----------------Start to find order warehouse----------------*/
                                    $OrderWarehouseId = null;
                                    $warehouse_object_data = $this->mobj->getFirstResultByConditions('platform_object_data', ['id' => $order->warehouse_id, 'status' => 1], ['api_id']);
                                    if ($warehouse_object_data) {
                                        $warehouseId = $this->map->getMappedDataByName($userIntegrationId, null, "order_warehouse", ['api_id'], 'regular', $warehouse_object_data->api_id);
                                        if ($warehouseId) {
                                            $OrderWarehouseId = $warehouseId->api_id;
                                        } else {
                                            $OrderWarehouseId = $DefaultOrderWarehouseId;
                                        }
                                    } else {
                                        $OrderWarehouseId = $DefaultOrderWarehouseId;
                                    }
                                    /*----------------End to find order warehouse----------------*/


                                    //Pull cross object warehouse mapping.. for amazon vendor central if found then replace DefaultOrderWarehouseId ....added by gajendra
                                    if ($SourcePlatformName == 'amazonvendor') {
                                        $party = json_decode($order->vendor, true);
                                        if (isset($party) && isset($party['shipFromParty'])) {
                                            $ship_from_address_val = $party['shipFromParty'];
                                            $check_wh_cross_map = $this->map->getMappedDataByName($userIntegrationId, NULL, "ship_from_address", ['api_id'], 'cross', $ship_from_address_val);
                                            if ($check_wh_cross_map) {
                                                $OrderWarehouseId = $check_wh_cross_map->api_id;
                                            }
                                        }
                                    }
                                    //end


                                    /*---START TO FIND ORDER STATUS */

                                    $statusId = app('App\Http\Controllers\Brightpearl\BrightpearlUtility')->OneToOneOrderStatusMapping($userId, $userIntegrationId, $SourcePlatformId, $order_status_object_id, $order->order_status);
                                    if ($statusId == false) {
                                        $statusId = $defaultStatusId;
                                    }

                                    if ($order->is_deleted) {
                                        $delete_order_status = $this->map->getMappedDataByName($userIntegrationId, $PlatformWorkFlowRuleID, "sorder_delete_status", ['api_id']);
                                        if ($delete_order_status) {
                                            $statusId = $delete_order_status;
                                        }
                                    }


                                    /*----------------Start to find order shipping method----------------*/
                                    $sales_order_shipping_method = $this->map->getMappedDataByName($userIntegrationId, null, "sorder_shipping_method", ['api_id'], 'regular', $order->shipping_method, "single", "source");
                                    if ($sales_order_shipping_method) {
                                        $shippingMethodId = $sales_order_shipping_method->api_id;
                                    } else if ($sales_order_shipping_method = $this->map->getMappedDataByName($userIntegrationId, null, "sorder_shipping_method", ['name'], 'regular', $order->shipping_method, "single", "source", ['api_id'])) {
                                        $shippingMethodId = $sales_order_shipping_method->api_id;
                                    } else if ($sales_order_shipping_method = $this->map->getMappedDataByName($userIntegrationId, null, "sorder_shipping_method", ['api_id'], 'regular', $order->shipping_method, "single", "destination")) {
                                        $shippingMethodId = $sales_order_shipping_method->api_id;
                                    } else if ($sales_order_shipping_method = $this->map->getMappedDataByName($userIntegrationId, null, "sorder_shipping_method", ['name'], 'regular', $order->shipping_method, "single", "destination", ['api_id'])) {
                                        $shippingMethodId = $sales_order_shipping_method->api_id;
                                    } else {
                                        $shippingMethodId = $DefaultShippingMethodId;
                                    }
                                    //@sourabh pricelist mapping.
                                    $priceList_Id = isset($priceListId) && $priceListId ? $priceListId->api_id : null;
                                    $priceListPrimary_Id = isset($priceListId) && $priceListId ? $priceListId->id : null;
                                    if ($order->api_pricelist_id) {
                                        $result_price = $this->map->getMappedDataByName($userIntegrationId, $PlatformWorkFlowRuleID, "sorder_pricelist", ['api_id'], 'regular', $order->api_pricelist_id, 'single', 'source');
                                        if ($result_price) {
                                            $priceList_Id = $result_price->api_id;
                                        }
                                        // ** SURYAPAL PRICELIST ID - TO MAP CUSTOMER GROUP TO PRICELIST AS PRICELIST - (NOW ONLY USED FOR BIGCOMMERCE) **
                                        if (in_array($SourcePlatformName, Config::get('apisettings.CustomerGroupAndPriceListMappingPlatformForOrder'))) {
                                            $sc_pricelist_name = PlatformObjectData::where([
                                                'user_integration_id' => $userIntegrationId,
                                                'platform_id' => $SourcePlatformId,
                                                'platform_object_id' => $pricelist_grp_object_id,
                                                'api_id' => $order->api_pricelist_id,
                                            ])->select('name')->first();
                                            if ($sc_pricelist_name) {
                                                $dc_pricelist_api_id = PlatformObjectData::where([
                                                    'user_integration_id' => $userIntegrationId,
                                                    'platform_id' => $this->platformId,
                                                    'platform_object_id' => $pricelist_object_id,
                                                    'name' => $sc_pricelist_name->name,
                                                ])->select('api_id')->first();
                                                if ($dc_pricelist_api_id) {
                                                    $priceList_Id = $dc_pricelist_api_id->api_id;
                                                }
                                            }
                                        }
                                        // ** SURYAPAL PRICELIST ID - END **
                                    }
                                    //@sourabh pricelist mapping.
                                    /*----------------End to find order shipping method----------------*/

                                    $flag = true;
                                    $items = $this->processProducts($order->id, $userId, $userIntegrationId, $this->platformId, $TaxCode, $PlatformWorkFlowRuleID, $account, $ufound, $SourcePlatformId, $SourcePlatformName, $priceList_Id, $priceListPrimary_Id, $DestinationPlatformName);

                                    $items_posting = $items['items_posting'];
                                    if (count($items_posting)) {
                                        /* Find Address */
                                        $addressList = $this->mobj->getFirstResultByConditions('platform_order_address', [
                                            'platform_order_id' => $order->id, 'address_type' => $addressType,
                                        ], ['address_name', 'address1', 'address2', 'address3', 'address4', 'city', 'state', 'postal_code', 'country', 'phone_number', 'firstname', 'lastname', 'ship_speed', 'email', 'company']);

                                        // $this->helper->findCustomerByCustomerIDOrEmail($order->platform_customer_id, $order->customer_email, $userId, $SourcePlatformId, $userIntegrationId);

                                        $existing_customer_response = isset($order->platform_customer_id) && ($order->platform_customer_id > 0) ? $this->SearchCustomerByID($order->platform_customer_id, ['id', 'customer_name', 'email', 'api_customer_group_id', 'api_customer_id', 'email3']) : null;

                                        if ($BpAllowDirectCustomerApiId && ($BpAllowDirectCustomerApiId->api_id == 'Yes') && isset($existing_customer_response) && $existing_customer_response) {
                                            if ($existing_customer_response->api_customer_id) { //if customer api id not found then customer will not create and throw error Customer or address may be not found.
                                                $customerID =  (int)$existing_customer_response->api_customer_id;
                                                $isAllowFromSourceId = true;
                                                $findBpCustomer = app('App\Http\Controllers\Brightpearl\BrightpearlSearchController')->findCustomerByEmailWithUpdateSupport($existing_customer_response->email, $userId, $userIntegrationId, $SourcePlatformId, $SourcePlatformName, null, null, $ufound, null, $customerID, $isAllowFromSourceId);
                                            }
                                        } elseif (isset(Config::get('apisettings.CustomerNameCustomBpIdMappingInBP')[$SourcePlatformName]) && $existing_customer_response && $existing_customer_response->customer_name) {
                                            $customer_identifier_object_id = $this->helper->getObjectId('customer_identifier');
                                            $customer_identifier_object_data = PlatformObjectData::where(['api_id' => $existing_customer_response->customer_name, 'platform_id' => $SourcePlatformId, 'platform_object_id' => $customer_identifier_object_id])->first();

                                            if ($customer_identifier_object_data) {
                                                $customer_identifier_data_mapping = PlatformDataMapping::where(['user_integration_id' => $userIntegrationId, 'source_row_id' => $customer_identifier_object_data->id, 'platform_object_id' => $customer_identifier_object_id])->first();
                                                if ($customer_identifier_data_mapping) {
                                                    $customerID = $customer_identifier_data_mapping->custom_data;
                                                }
                                            }
                                        } else {

                                            //Search ID in customer table
                                            if (isset($existing_customer_response)) {
                                                if ($existing_customer_response && $existing_customer_response->email) {
                                                    $isAllowFromSourceId = false;
                                                    // $findBpCustomer = $this->helper->findCustomerByEmail($existing_customer_response->email, $userId, $this->platformId, $userIntegrationId);
                                                    $findBpCustomer = app('App\Http\Controllers\Brightpearl\BrightpearlSearchController')->findCustomerByEmailWithUpdateSupport($existing_customer_response->email, $userId, $userIntegrationId, $SourcePlatformId, $SourcePlatformName, $existing_customer_response->api_customer_group_id, $pricelist_object_id, $ufound, $pricelist_grp_object_id, null, $isAllowFromSourceId);
                                                    if (isset($findBpCustomer->api_customer_id)) {
                                                        $customerID =  (int)$findBpCustomer->api_customer_id;
                                                    } else {
                                                        /* create new customer if billing or shipping email not found then customer email address is used for customer creation*/
                                                        if (isset($addressList->address1)) {
                                                            $Femail = $addressList->email ? $addressList->email : $existing_customer_response->email;
                                                            $email3 = $existing_customer_response->email3 ? trim($existing_customer_response->email3) : null;
                                                            $postData = [
                                                                "addressLine1" => $addressList->address1,
                                                                "addressLine2" => $addressList->address2,
                                                                "addressLine3" => $addressList->city,
                                                                "addressLine4" => $addressList->state,
                                                                "postalCode" => $addressList->postal_code,
                                                                "countryIsoCode" => $addressList->country,
                                                                'phone_number' => $addressList->phone_number,
                                                                "firstname" => $addressList->firstname,
                                                                'lastname' => $addressList->lastname,
                                                                'email' => $Femail,
                                                                'email3' => $email3,
                                                                'company' => $addressList->company,
                                                            ];

                                                            if (isset(Config::get('apisettings.AllowCustomerUpdateInBrightPearl')[$SourcePlatformName]) && isset($existing_customer_response->api_customer_group_id)) {
                                                                $sc_pricelist_name = PlatformObjectData::where([
                                                                    'user_integration_id' => $userIntegrationId,
                                                                    'platform_id' => $SourcePlatformId,
                                                                    'platform_object_id' => $pricelist_grp_object_id,
                                                                    'api_id' => $existing_customer_response->api_customer_group_id,
                                                                ])->select('name')->first();
                                                                if ($sc_pricelist_name) {
                                                                    $dc_pricelist_api_id = PlatformObjectData::where([
                                                                        'user_integration_id' => $userIntegrationId,
                                                                        'platform_id' => $this->platformId,
                                                                        'platform_object_id' => $pricelist_object_id,
                                                                        'name' => $sc_pricelist_name->name,
                                                                    ])->select('api_id')->first();
                                                                    if ($dc_pricelist_api_id) {
                                                                        $postData['customer_price_list_id'] = $dc_pricelist_api_id->api_id;
                                                                    }
                                                                }
                                                            }
                                                            //Search Customer By Email in BP API
                                                            $customerID = app('App\Http\Controllers\Brightpearl\BrightpearlSearchController')->SearchCustomerByEmail($Femail, $ufound, $userId, $userIntegrationId);
                                                            if (!$customerID) {
                                                                $customer_create_response = $this->CreateCustomers($userId, $userIntegrationId, $postData);
                                                                if ($customer_create_response) {
                                                                    $customerID = $customer_create_response;
                                                                }
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    $CustomData = $this->map->getMappedDataByName($userIntegrationId, $PlatformWorkFlowRuleID, "default_customer_email", ['custom_data'], "default");
                                                    if ($CustomData) {
                                                        $CustomerEmail = $CustomData->custom_data;
                                                        if ($CustomerEmail) {
                                                            $findBpCustomer = $this->helper->findCustomerByEmail($CustomerEmail, $userId, $this->platformId, $userIntegrationId);
                                                            if (isset($findBpCustomer->api_customer_id)) {
                                                                $customerID =  (int)$findBpCustomer->api_customer_id;
                                                            } else {
                                                                //Search Customer By Email in BP API
                                                                $customerID = app('App\Http\Controllers\Brightpearl\BrightpearlSearchController')->SearchCustomerByEmail($CustomerEmail, $ufound, $userId, $userIntegrationId);
                                                                if (!$customerID) {
                                                                    /* create new customer */
                                                                    if (isset($addressList->address1) && $CustomerEmail) {
                                                                        $postData = [
                                                                            "addressLine1" => $addressList->address1,
                                                                            "addressLine2" => $addressList->address2,
                                                                            "addressLine3" => $addressList->city,
                                                                            "addressLine4" => $addressList->state,
                                                                            "postalCode" => $addressList->postal_code,
                                                                            "countryIsoCode" => $addressList->country,
                                                                            'phone_number' => $addressList->phone_number,
                                                                            "firstname" => ($addressList->firstname) ? $addressList->firstname : 'Default',
                                                                            'lastname' => ($addressList->lastname) ? $addressList->lastname : 'Customer',
                                                                            'email' => $CustomerEmail,
                                                                            'company' => $addressList->company,
                                                                        ];

                                                                        $customer_create_response = $this->CreateCustomers($userId, $userIntegrationId, $postData);
                                                                        if ($customer_create_response) {
                                                                            $customerID = $customer_create_response;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            } else if ($order->platform_customer_id == 0) {
                                                $findCustomerEmail = 0;

                                                if (isset($addressList->address1) && isset($addressList->email)) {
                                                    $findCustomerEmail = 1;
                                                    $findBpCustomer = $this->helper->findCustomerByEmail($addressList->email, $userId, $this->platformId, $userIntegrationId);

                                                    if (isset($findBpCustomer->api_customer_id)) {
                                                        $customerID =  (int)$findBpCustomer->api_customer_id;
                                                    } else {
                                                        //Search Customer By Email in BP API
                                                        $customerID = app('App\Http\Controllers\Brightpearl\BrightpearlSearchController')->SearchCustomerByEmail($addressList->email, $ufound, $userId, $userIntegrationId);
                                                        if (!$customerID) {
                                                            if (isset($addressList->address1) && isset($addressList->email)) {
                                                                $findCustomerEmail = 1;
                                                                /* create new customer */
                                                                $postData = [
                                                                    "addressLine1" => $addressList->address1,
                                                                    "addressLine2" => $addressList->address2,
                                                                    "addressLine3" => $addressList->city,
                                                                    "addressLine4" => $addressList->state,
                                                                    "postalCode" => $addressList->postal_code,
                                                                    "countryIsoCode" => $addressList->country,
                                                                    'phone_number' => $addressList->phone_number,
                                                                    "firstname" => $addressList->firstname,
                                                                    'lastname' => $addressList->lastname,
                                                                    'email' => $addressList->email,
                                                                    'company' => $addressList->company,
                                                                ];

                                                                $customer_create_response = $this->CreateCustomers($userId, $userIntegrationId, $postData);
                                                                if ($customer_create_response) {
                                                                    $customerID = $customer_create_response;
                                                                }
                                                            }
                                                        }
                                                    }
                                                }

                                                /* If platfrom_customer_id <=0 and email not exist */
                                                if ($findCustomerEmail == 0) {
                                                    $CustomData = $this->map->getMappedDataByName($userIntegrationId, $PlatformWorkFlowRuleID, "default_customer_email", ['custom_data'], "default");

                                                    if ($CustomData) {
                                                        $CustomerEmail = $CustomData->custom_data;
                                                        if ($CustomerEmail) {
                                                            $findBpCustomer = $this->helper->findCustomerByEmail($CustomerEmail, $userId, $this->platformId, $userIntegrationId);

                                                            if (isset($findBpCustomer->api_customer_id)) {
                                                                $customerID =  (int)$findBpCustomer->api_customer_id;
                                                            } else {
                                                                //Search Customer By Email in BP API
                                                                $customerID = app('App\Http\Controllers\Brightpearl\BrightpearlSearchController')->SearchCustomerByEmail($CustomerEmail, $ufound, $userId, $userIntegrationId);
                                                                if (!$customerID) {
                                                                    /* create new customer */
                                                                    if (isset($addressList->address1) && $CustomerEmail) {
                                                                        $postData = [
                                                                            "addressLine1" => $addressList->address1,
                                                                            "addressLine2" => $addressList->address2,
                                                                            "addressLine3" => $addressList->city,
                                                                            "addressLine4" => $addressList->state,
                                                                            "postalCode" => $addressList->postal_code,
                                                                            "countryIsoCode" => $addressList->country,
                                                                            'phone_number' => $addressList->phone_number,
                                                                            "firstname" => ($addressList->firstname) ? $addressList->firstname : 'Default',
                                                                            'lastname' => ($addressList->lastname) ? $addressList->lastname : 'Customer',
                                                                            'email' => $CustomerEmail,
                                                                            'company' => $addressList->company,
                                                                        ];

                                                                        $customer_create_response = $this->CreateCustomers($userId, $userIntegrationId, $postData);
                                                                        if ($customer_create_response) {
                                                                            $customerID = $customer_create_response;
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                }
                                            }
                                        }

                                        //Create order in brightpearl
                                        if ($customerID && is_numeric($customerID)) {
                                            // $default_shipping_method = $this->map->getMappedDataByName($userIntegrationId, $PlatformWorkFlowRuleID, "sorder_shipping_method", ['api_id'], 'regular', $order->shipping_method);
                                            // if ($default_shipping_method) {
                                            //     $default_shipping_method = $default_shipping_method->api_id;
                                            // } else {
                                            //     $default_shipping_method = $shippingMethodId;
                                            // }

                                            if ($order->currency) {
                                                $currency = $order->currency;
                                            } else {
                                                $currency = isset($account->account_currency_code) ? $account->account_currency_code : null;
                                            }


                                            if ($allowDateConversionQuery) {
                                                $order_date = $order->converted_order_date;
                                            } else {
                                                $order_date = date(DATE_ISO8601, strtotime($order->order_date));
                                            }


                                            if ($BpOdrDefaultTimeZone && isset($timezone_offset) && $order_date) {
                                                $new_order_date = new DateTime($order_date);
                                                if ($timezone_offset) {
                                                    $timezone = new DateTimeZone(trim($timezone_offset));
                                                    $order_date = $new_order_date->setTimezone($timezone);
                                                    $order_date = date(DATE_ISO8601, strtotime($order_date->format('Y-m-d\TH:i:s\Z')));
                                                }
                                            }

                                            $bp_create_order = [
                                                "customer" => [
                                                    "id" => $customerID,
                                                ],
                                                "ref" => $order->order_number,
                                                "placedOn" => $order_date,
                                                "taxDate" => $order_date,
                                                "projectId" => isset($projectId) && $projectId ? $projectId->api_id : null,
                                                "channelId" => isset($channelId) && $channelId ? $channelId->api_id : null,
                                                "leadSourceId" => isset($leadSourceId) && $leadSourceId ? $leadSourceId->api_id : null,
                                                "statusId" => isset($statusId) && $statusId ? $statusId->api_id : null,
                                                "warehouseId" => $OrderWarehouseId,
                                                "priceListId" => $priceList_Id,
                                                "currency" => [
                                                    "code" => $currency,
                                                    "fixedExchangeRate" => false,
                                                ],
                                                "delivery" => $this->getBillingAndShippingAddress(
                                                    $order->id,
                                                    "shipping",
                                                    $customerID,
                                                    ($order->delivery_date) ? $order->delivery_date : $order->payment_date,
                                                    $shippingMethodId
                                                ),
                                                "billing" => $this->getBillingAndShippingAddress(
                                                    $order->id,
                                                    "billing",
                                                    $customerID,
                                                    ($order->delivery_date) ? $order->delivery_date : $order->payment_date,
                                                    $shippingMethodId
                                                ),
                                                "rows" => $items_posting,
                                            ];

                                            //if Customer Representive Available
                                            $findSaleRep = null;
                                            if ($order->platform_customer_emp_id) {
                                                //login assign to if found
                                                $findSaleRep = $this->getSalesRepresentative($order->platform_customer_emp_id, $userId, $userIntegrationId);
                                                if ($findSaleRep) {
                                                    $bp_create_order['staffOwnerId'] = $findSaleRep;

                                                    //test log
                                                    // Storage::disk('local')->append('mutateEventCrone.txt', 'StaffOwnerId : ' . $findSaleRep
                                                    //     . ' -userInteg-' . $userIntegrationId);
                                                }
                                            }

                                            if (!empty($bp_create_order)) {
                                                $responseBP = [];
                                                $createOrder = true;
                                                $allowCheckOrderNumber=false;
                                                if ($order->allow_check) { //when deadlock found set allow_check=1 to resync order
                                                    if ($order->linked_api_order_id) {   //when already order created
                                                        $createOrder = false;
                                                        $responseBP['response'] = (int) $order->linked_api_order_id;
                                                        $allowCheckOrderNumber=true;
                                                    } else {
                                                        //search order by customer reference in BP
                                                        $searchResult = app('App\Http\Controllers\Brightpearl\BrightpearlSearchController')->SearchOrderByCustomerReference($order->order_number, $ufound, $userIntegrationId);
                                                        if (isset($searchResult['api_error']) && $searchResult['api_error']) {
                                                            $createOrder = false;
                                                            $responseBP['response'] = $searchResult['error'];
                                                        } else if (isset($searchResult['custom_error']) && $searchResult['custom_error']) {
                                                            $createOrder = true;
                                                            $responseBP['response'] = $searchResult['error'];
                                                        } else if (isset($searchResult['exception_error']) && $searchResult['exception_error']) {
                                                            $createOrder = false;
                                                            $responseBP['response'] = $searchResult['error'];
                                                        } else if (isset($searchResult['order_id']) && is_int($searchResult['order_id'])) {
                                                            $createOrder = false;
                                                            $responseBP['response'] = $searchResult['order_id'];
                                                            $allowCheckOrderNumber=true;
                                                        }
                                                    }
                                                }
                                                if ($createOrder) {
                                                    $responseBP = $this->CreateOrderInBrightpearl($ufound, $userIntegrationId, $bp_create_order);
                                                }
                                                if (isset($responseBP['response']) && is_int($responseBP['response'])) {
                                                    if (isset(Config::get('apisettings.DisplayOrderNumberInBP')[$SourcePlatformName])) {
                                                        //This basically for display BP Order Number in log
                                                        $DisplayOrderNumber = $responseBP['response'];
                                                    } else {
                                                        $DisplayOrderNumber = $order->order_number;
                                                    }

                                                    //for amazonvendor & bp integration, PO acknowledge case
                                                    $order_sync_status = (in_array($SourcePlatformName, Config::get('apisettings.BpSOsyncStatusPending'))) ? 'Pending' : 'Ready';

                                                    $saveOrder = [
                                                        'user_id' => $userId,
                                                        'platform_id' => $this->platformId,
                                                        'user_integration_id' => $userIntegrationId,
                                                        'user_workflow_rule_id' => $UserWorkFlowRuleID,
                                                        'order_type' => "SO",
                                                        'api_order_id' => $responseBP['response'],
                                                        'order_date' => date("Y-m-d H:i:s"),
                                                        'order_number' => $DisplayOrderNumber,
                                                        'sync_status' => $order_sync_status,
                                                        'linked_id' => $order->id,
                                                        'shipment_status' => "Pending",
                                                        'warehouse_id' => $OrderWarehouseId,
                                                        'order_updated_at' => date("Y-m-d H:i:s"),
                                                    ];
                                                    if($allowCheckOrderNumber){
                                                        $OrderLinked=PlatformOrder::where([ 'user_id' => $userId,
                                                        'platform_id' => $this->platformId,
                                                        'user_integration_id' => $userIntegrationId,
                                                        'order_type' => "SO",
                                                        'api_order_id' => $order_response['orderNo']])->first();
                                                        if(!$OrderLinked){
                                                            $OrderLinked = app('App\Http\Controllers\Brightpearl\BrightpearlUtility')->SaveOrderDetails($saveOrder); //$this->mobj->makeInsertGetId('platform_order', $saveOrder);
                                                        }
                                                    }else{

                                                        $OrderLinked = app('App\Http\Controllers\Brightpearl\BrightpearlUtility')->SaveOrderDetails($saveOrder); //$this->mobj->makeInsertGetId('platform_order', $saveOrder);

                                                    }

                                                    if ($OrderLinked) {
                                                        $this->updateOrder(['id'=>$order->id],[
                                                            'linked_api_order_id' => $responseBP['response'],
                                                            'sync_status'=>PlatformStatus::SYNCED,
                                                            'order_updated_at'=> date("Y-m-d H:i:s"),
                                                            'allow_check' =>1,
                                                            'linked_id'=> $OrderLinked
                                                        ]);
                                                        if (isset(Config::get('apisettings.SaveBrightpearlCreatedSalesOrderData')[$SourcePlatformName])) {
                                                            $this->storeNewCreatedOrderDetail($userId, $userIntegrationId, $responseBP['response'], $OrderLinked, $ufound);
                                                        }

                                                        $this->log->syncLog($userId, $userIntegrationId, $UserWorkFlowRuleID, $SourcePlatformId, $this->platformId, $object_id, 'success', $order->id, null);
                                                    } else {
                                                        $this->updateOrder(['id'=>$order->id],[
                                                            'linked_api_order_id' => $responseBP['response'],
                                                            'sync_status'=>PlatformStatus::FAILED,
                                                            'order_updated_at'=> date("Y-m-d H:i:s"),
                                                            'allow_check' =>1,
                                                            'linked_id'=> $OrderLinked
                                                        ]);

                                                        $this->log->syncLog($userId, $userIntegrationId, $UserWorkFlowRuleID, $SourcePlatformId, $this->platformId, $object_id, 'failed', $order->id, "Order failed due to concurrent sync, please retry.");
                                                    }

                                                    //$this->mobj->makeInsert('platform_urls', ['url'=>'/order/' . $responseBP['response'], 'user_id'=>$userId, 'platform_id'=>$this->platformId, 'user_integration_id'=>$userIntegrationId, 'url_name'=>'sales_orders']);
                                                    //end

                                                    sleep(1);
                                                    /* For Order Item  Allocation*/
                                                    if ($OrderWarehouseId) {
                                                        $this->AllocateOrderItemsInBrightpearl($responseBP['response'], $userId, $userIntegrationId, $OrderWarehouseId, $SourcePlatformId, $UserWorkFlowRuleID, $order->id, $ufound);
                                                    }
                                                    /* ----Allocation end */
                                                    sleep(1);
                                                    /* Create Payment  For Payment / Transaction Of Order  */
                                                    if (isset($order->currency)) {
                                                        $currency = $order->currency;
                                                    } else {
                                                        $currency = isset($account->account_currency_code) ? $account->account_currency_code : null;
                                                    }

                                                    //if ($SourcePlatformName != 'amazon' && $SourcePlatformName != 'zulily') {
                                                    //$this->OrderPaymentInBrightpearl($responseBP['response'], $userId, $userIntegrationId, $currency, $SourcePlatformId, $PlatformWorkFlowRuleID, $UserWorkFlowRuleID, $order->id);
                                                    $successPyamentResponse = $this->MupltipleOrderPaymentSync($responseBP['response'], $userId, $userIntegrationId, $currency, $SourcePlatformId, $SourcePlatformName, $PlatformWorkFlowRuleID, $UserWorkFlowRuleID, $order->id, ["Ready", "Failed"]);
                                                    if (!is_bool($successPyamentResponse)) {
                                                        /* If any payment is pending or failed at the time of sync | set order as failed with custom error */
                                                        $error = $successPyamentResponse;
                                                        if ($error == 'You have sent too many requests. Please wait before sending another request') {
                                                            //Set sync_status as previously
                                                            if (isset($orderIds[$order->id])) {
                                                                $order->sync_status = $orderIds[$order->id];
                                                                $this->updateOrder(['id'=>$order->id],[
                                                                    'sync_status'=>$orderIds[$order->id]
                                                                ]);
                                                            }
                                                            continue;
                                                        }
                                                        else
                                                        {
                                                            $this->updateOrder(['id'=>$order->id],['sync_status'=>PlatformStatus::FAILED, 'order_updated_at'=> date("Y-m-d H:i:s")]);

                                                            $this->log->syncLog($userId, $userIntegrationId, $UserWorkFlowRuleID, $SourcePlatformId, $this->platformId, $object_id, 'failed', $order->id, $error);
                                                            $return_response = $error;
                                                        }
                                                    }
                                                    // }
                                                    /* Payment End */

                                                    //update ship date in custom field if mapping selected used in amazon vendor central added by gajendra
                                                    if ($SourcePlatformName == 'amazonvendor') {

                                                        //update ship date in custom field
                                                        if ($order->ship_date) {
                                                            $this->updateSingleCustomFieldByFieldName($ufound, $userIntegrationId, $object_id, $responseBP['response'], $order->ship_date, 'SHIP_DATE');
                                                        }

                                                        //delivery date update in custom field
                                                        if ($order->delivery_date) {
                                                            $this->updateSingleCustomFieldByFieldName($ufound, $userIntegrationId, $object_id, $responseBP['response'], $order->delivery_date, 'DELIVERY_DATE');
                                                            $this->updateSingleCustomFieldByFieldName($ufound, $userIntegrationId, $object_id, $responseBP['response'], $order->delivery_date, 'DELIVERY_DATE2');
                                                        }
                                                    } else {
                                                        $this->UpdateCustomField($ufound, $PlatformWorkFlowRuleID, $userIntegrationId, $object_id, $order->id, $responseBP['response']);
                                                    }
                                                } else if (isset($responseBP['errors'])) {
                                                    $error = $this->bp->handleResponseError($responseBP);
                                                    if ($error == 'You have sent too many requests. Please wait before sending another request') {
                                                        $return_response = $error;
                                                        //Set sync_status as previously
                                                        if (isset($orderIds[$order->id])) {
                                                            $this->updateOrder(['id'=>$order->id],[
                                                                'sync_status'=>$orderIds[$order->id]
                                                            ]);
                                                        }
                                                        continue;
                                                    } else {
                                                        $patternfound = $this->FindErrorPattern(["You have provided an invalid contact ID", "Contact not a customer with contact ID"], $error);
                                                        /* If invalid contact ID or customer not found then set is deleted=1 */
                                                        if ($patternfound['status'] == 1) {
                                                            $this->DeleteCustomer($userId, $userIntegrationId, $this->platformId, $customerID);
                                                        }
                                                        $error = $patternfound['status_text'];
                                                        if (empty($error)) {
                                                            //Set sync_status as previously
                                                            if (isset($orderIds[$order->id])) {
                                                                $this->updateOrder(['id'=>$order->id],[
                                                                    'sync_status'=>$orderIds[$order->id]
                                                                ]);
                                                            }
                                                            continue;
                                                            //$error = "Unexpected, Brightpearl internal error, please resync again"; //Avoid this
                                                        }
                                                        $this->updateOrder(['id'=>$order->id],[
                                                            'sync_status'=>PlatformStatus::FAILED,
                                                            'order_updated_at'=> date("Y-m-d H:i:s")
                                                        ]);

                                                        $this->log->syncLog($userId, $userIntegrationId, $UserWorkFlowRuleID, $SourcePlatformId, $this->platformId, $object_id, 'failed', $order->id, $error);
                                                        $return_response = $error;
                                                    }
                                                } else {
                                                    $error = "Unexpected, Brightpearl internal error, please resync again";
                                                    if (isset($responseBP['response']) && !is_int($responseBP['response'])) {
                                                        $error = $responseBP['response'];
                                                    }

                                                    if ($error == 'You have sent too many requests. Please wait before sending another request' || $error == "Unexpected, Brightpearl internal error, please resync again") {
                                                        $return_response = $error;
                                                        //Set sync_status as previously
                                                        if (isset($orderIds[$order->id])) {
                                                            $this->updateOrder(['id'=>$order->id],[
                                                                'sync_status'=>$orderIds[$order->id]
                                                            ]);
                                                        }
                                                        continue;
                                                    } else {

                                                        $this->updateOrder(['id'=>$order->id],[
                                                            'sync_status'=>PlatformStatus::FAILED,
                                                            'order_updated_at'=> date("Y-m-d H:i:s")
                                                        ]);
                                                        $this->log->syncLog($userId, $userIntegrationId, $UserWorkFlowRuleID, $SourcePlatformId, $this->platformId, $object_id, 'failed', $order->id, $error);
                                                        $return_response = $error;
                                                    }
                                                }
                                            } else {
                                                $return_response = "Empty payload not allowed";
                                            }
                                        } else {
                                            $error = "Customer or address may be not found.";
                                            if (is_string($customerID)) {
                                                $error = $customerID;
                                            }

                                            if ($error == 'You have sent too many requests. Please wait before sending another request') {
                                                $return_response = $error;
                                                //Set sync_status as previously
                                                if (isset($orderIds[$order->id])) {
                                                    $this->updateOrder(['id'=>$order->id],[
                                                        'sync_status'=>$orderIds[$order->id]
                                                    ]);
                                                }
                                                continue;
                                            } else {

                                                $this->updateOrder(['id'=>$order->id],[
                                                    'sync_status'=>PlatformStatus::FAILED,
                                                    'order_updated_at'=> date("Y-m-d H:i:s")
                                                ]);
                                                $this->log->syncLog($userId, $userIntegrationId, $UserWorkFlowRuleID, $SourcePlatformId, $this->platformId, $object_id, 'failed', $order->id, $error);
                                                $return_response = $error;

                                            }
                                        }
                                    } else {
                                        $error = "Order lineitem not available.";
                                        $this->updateOrder(['id'=>$order->id],[
                                            'sync_status'=>PlatformStatus::FAILED,
                                            'order_updated_at'=> date("Y-m-d H:i:s")
                                        ]);
                                        $this->log->syncLog($userId, $userIntegrationId, $UserWorkFlowRuleID, $SourcePlatformId, $this->platformId, $object_id, 'failed', $order->id, $error);
                                        $return_response = $error;
                                    }
                                } else if ($order->linked_id !== 0) {
                                    if ($order->is_voided) { //If Order Canceled
                                        $flag = true;
                                        $find = $this->FindOrderIDByLinkedID($order->linked_id, ["api_order_id"]);
                                        if (isset($find->api_order_id)) {
                                            $result = $this->GetOrderByID($find->api_order_id, $ufound);

                                            if (isset($result['response']) && is_array($result['response'])) {

                                                if (!empty($result['response'][0]['orderPaymentStatus']) && !in_array($result['response'][0]['orderPaymentStatus'], ["NOT_APPLICABLE", "UNPAID"])) {

                                                    $payments = $this->SearchCustomerPayments($ufound, $find->api_order_id);

                                                    if (isset($payments['response']) && $payments) {
                                                        if (isset($payments['response']['results']) && !empty($payments['response']['results'])) {

                                                            foreach ($payments['response']['results'] as $key => $values) {
                                                                foreach ($values as $val) {
                                                                    $deletePayment = $this->DeleteCustomerPaymentByID($ufound, $val);

                                                                    if (is_array($deletePayment)) {
                                                                    }
                                                                }
                                                            }
                                                        }
                                                    }
                                                    if ($cancelOrderStatusID) {
                                                        $changeStatus = $this->UpdateOrderStatus($ufound, $find->api_order_id, $cancelOrderStatusID);

                                                        if (is_array($changeStatus)) {

                                                            if (!isset($changeStatus['errors'])) {

                                                                $this->updateOrder(['id'=>$order->id],[
                                                                    'sync_status'=>PlatformStatus::SYNCED,
                                                                    'order_updated_at'=> date("Y-m-d H:i:s")
                                                                ]);
                                                                $this->updateOrder(['id'=>$order->linked_id],[
                                                                    'sync_status'=>PlatformStatus::SYNCED,
                                                                    'order_updated_at'=> date("Y-m-d H:i:s")
                                                                ]);
                                                                $this->log->syncLog($userId, $userIntegrationId, $UserWorkFlowRuleID, $SourcePlatformId, $this->platformId, $object_id, 'success', $order->id, null);
                                                                $return_response = true;
                                                            } else if (isset($changeStatus['errors']) && is_array($changeStatus['errors'])) {
                                                                $return_response = $this->bp->handleResponseError($changeStatus);
                                                                if ($return_response == 'You have sent too many requests. Please wait before sending another request') {
                                                                    //Set sync_status as previously
                                                                    if (isset($orderIds[$order->id])) {
                                                                        $this->updateOrder(['id'=>$order->id],[
                                                                            'sync_status'=>$orderIds[$order->id]
                                                                        ]);
                                                                    }
                                                                    continue;
                                                                } else {
                                                                    $this->updateOrder(['id'=>$order->id],[
                                                                        'sync_status'=>PlatformStatus::FAILED,
                                                                        'order_updated_at'=> date("Y-m-d H:i:s")
                                                                    ]);
                                                                    $this->log->syncLog($userId, $userIntegrationId, $UserWorkFlowRuleID, $SourcePlatformId, $this->platformId, $object_id, 'failed', $order->id, $return_response);
                                                                }
                                                            } else {
                                                                $return_response = isset($changeStatus['response']) ? ($changeStatus['response']) : "API Error";
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if ($cancelOrderStatusID) {
                                                        $changeStatus = $this->UpdateOrderStatus($ufound, $find->api_order_id, $cancelOrderStatusID);
                                                        if (is_array($changeStatus)) {

                                                            if (!isset($changeStatus['errors'])) {


                                                                $this->updateOrder(['id'=>$order->id],[
                                                                    'sync_status'=>PlatformStatus::SYNCED,
                                                                    'order_updated_at'=> date("Y-m-d H:i:s")
                                                                ]);
                                                                $this->updateOrder(['id'=>$order->linked_id],[
                                                                    'sync_status'=>PlatformStatus::SYNCED,
                                                                    'order_updated_at'=> date("Y-m-d H:i:s")
                                                                ]);
                                                                $this->log->syncLog($userId, $userIntegrationId, $UserWorkFlowRuleID, $SourcePlatformId, $this->platformId, $object_id, 'success', $order->id, null);
                                                                $return_response = true;
                                                            } else if (isset($changeStatus['errors']) && is_array($changeStatus['errors'])) {
                                                                $return_response = $this->bp->handleResponseError($changeStatus);
                                                                if ($return_response == 'You have sent too many requests. Please wait before sending another request') {
                                                                    //Set sync_status as previously
                                                                    if (isset($orderIds[$order->id])) {
                                                                        $this->updateOrder(['id'=>$order->id],[
                                                                            'sync_status'=>$orderIds[$order->id]
                                                                        ]);
                                                                    }
                                                                    continue;
                                                                } else {
                                                                    $this->updateOrder(['id'=>$order->id],[
                                                                        'sync_status'=>PlatformStatus::FAILED,
                                                                        'order_updated_at'=> date("Y-m-d H:i:s")
                                                                    ]);
                                                                    $this->log->syncLog($userId, $userIntegrationId, $UserWorkFlowRuleID, $SourcePlatformId, $this->platformId, $object_id, 'failed', $order->id, $return_response);
                                                                }
                                                            } else {
                                                                $return_response = isset($changeStatus['response']) ? ($changeStatus['response']) : "API Error";
                                                            }
                                                        }
                                                    }
                                                }
                                            } else {
                                                $return_response = $this->bp->handleResponseError($result);
                                                if ($return_response == 'You have sent too many requests. Please wait before sending another request') {
                                                    //Set sync_status as previously
                                                    if (isset($orderIds[$order->id])) {
                                                        $order->sync_status = $orderIds[$order->id];
                                                        $order->save();
                                                        $this->updateOrder(['id'=>$order->id],[
                                                            'sync_status'=>$orderIds[$order->id]
                                                        ]);
                                                    }
                                                    continue;
                                                } else {
                                                    $this->updateOrder(['id'=>$order->id],[
                                                        'sync_status'=>PlatformStatus::FAILED,
                                                        'order_updated_at'=> date("Y-m-d H:i:s")
                                                    ]);

                                                    $this->log->syncLog($userId, $userIntegrationId, $UserWorkFlowRuleID, $SourcePlatformId, $this->platformId, $object_id, 'failed', $order->id, $return_response);
                                                }
                                            }
                                        }
                                    } else {
                                        $allowStatusSync = false;
                                        $allowPaymentSync = true;
                                        if ($order->is_fully_synced) { //If Order acknowledge full sync
                                            $flag = true;
                                            $ackOrderStatusID = $this->map->getMappedDataByName($userIntegrationId, $PlatformWorkFlowRuleID, "default_final_sorder_status", ['api_id']);
                                            $statusId = isset($ackOrderStatusID->api_id) ? $ackOrderStatusID->api_id : null;
                                        } else {
                                            $flag = false;
                                            if (isset(Config::get('apisettings.AllowOrderStatusUpdateInBP')[$SourcePlatformName])) {
                                                $status = app('App\Http\Controllers\Brightpearl\BrightpearlUtility')->OneToOneOrderStatusMapping($userId, $userIntegrationId, $SourcePlatformId, $order_status_object_id, $order->order_status); //Check one to one order status mapping
                                                $statusId = isset($status->api_id) ? $status->api_id : null;
                                                if ($statusId) {
                                                    $allowStatusSync = true;
                                                }
                                            }
                                        }

                                        $find = $this->FindOrderIDByLinkedID($order->linked_id, ["api_order_id"]);
                                        if (isset($find->api_order_id)) {

                                            if ($allowPaymentSync) {
                                                /* Create Payment  For Payment / Transaction Of Order  */
                                                if (isset($order->currency)) {
                                                    $currency = $order->currency;
                                                } else {
                                                    $currency = isset($account->account_currency_code) ? $account->account_currency_code : null;
                                                }

                                                // if ($SourcePlatformName != 'amazon' && $SourcePlatformName != 'zulily') {

                                                $successPyamentResponse = $this->MupltipleOrderPaymentSync($find->api_order_id, $userId, $userIntegrationId, $currency, $SourcePlatformId, $SourcePlatformName, $PlatformWorkFlowRuleID, $UserWorkFlowRuleID, $order->id, ["Ready", "Failed"]);
                                                if (is_bool($successPyamentResponse)) {
                                                    //If all payments are synced
                                                    $this->updateOrder(['id'=>$order->id],[
                                                        'sync_status'=>PlatformStatus::SYNCED,
                                                        'order_updated_at'=> date("Y-m-d H:i:s")
                                                    ]);
                                                } else {
                                                    $error = $successPyamentResponse;
                                                    if ($error == 'You have sent too many requests. Please wait before sending another request') {
                                                        //Set sync_status as previously
                                                        if (isset($orderIds[$order->id])) {
                                                            $order->sync_status = $orderIds[$order->id];
                                                            $this->updateOrder(['id'=>$order->id],[
                                                                'sync_status'=>$orderIds[$order->id]
                                                            ]);
                                                        }
                                                        continue;
                                                    } else {
                                                        $this->updateOrder(['id'=>$order->id],[
                                                            'sync_status'=>PlatformStatus::FAILED,
                                                            'order_updated_at'=> date("Y-m-d H:i:s")
                                                        ]);
                                                        $this->log->syncLog($userId, $userIntegrationId, $UserWorkFlowRuleID, $SourcePlatformId, $this->platformId, $object_id, 'failed', $order->id, $error);
                                                    }
                                                }
                                            }

                                            if ($allowStatusSync) {
                                                $flag = true;
                                                $result = $this->GetOrderByID($find->api_order_id, $ufound);
                                                if (isset($result['response']) && is_array($result['response'])) {
                                                    if ($statusId && isset($result['response'][0]['orderStatus']['orderStatusId']) && $result['response'][0]['orderStatus']['orderStatusId'] == $statusId) { //If order status same as mapping status | Don't perform action just change the order status as synced
                                                        $statusId = false;

                                                        $this->updateOrder(['id'=>$order->id],[
                                                            'sync_status'=>PlatformStatus::SYNCED,
                                                            'order_updated_at'=> date("Y-m-d H:i:s")
                                                        ]);
                                                        $this->updateOrder(['id'=>$order->linked_id],[
                                                            'sync_status'=>PlatformStatus::SYNCED,
                                                            'order_updated_at'=> date("Y-m-d H:i:s")
                                                        ]);
                                                        $this->log->syncLog($userId, $userIntegrationId, $UserWorkFlowRuleID, $SourcePlatformId, $this->platformId, $object_id, 'success', $order->id, null);
                                                        $return_response = true;
                                                    }
                                                    // order status update
                                                    if ($statusId) {
                                                        $changeStatus = $this->UpdateOrderStatus($ufound, $find->api_order_id, $statusId);
                                                        if (is_array($changeStatus)) {
                                                            if (!isset($changeStatus['errors'])) {
                                                                $this->updateOrder(['id'=>$order->id],[
                                                                    'sync_status'=>PlatformStatus::SYNCED,
                                                                    'order_updated_at'=> date("Y-m-d H:i:s")
                                                                ]);
                                                                $this->updateOrder(['id'=>$order->linked_id],[
                                                                    'sync_status'=>PlatformStatus::SYNCED,
                                                                    'order_updated_at'=> date("Y-m-d H:i:s")
                                                                ]);
                                                                $this->log->syncLog($userId, $userIntegrationId, $UserWorkFlowRuleID, $SourcePlatformId, $this->platformId, $object_id, 'success', $order->id, null);
                                                                $return_response = true;
                                                            } else if (isset($changeStatus['errors']) && is_array($changeStatus['errors'])) {
                                                                $return_response = $this->bp->handleResponseError($changeStatus);
                                                                if ($return_response == 'You have sent too many requests. Please wait before sending another request') {
                                                                    //Set sync_status as previously
                                                                    if (isset($orderIds[$order->id])) {

                                                                        $this->updateOrder(['id'=>$order->id],[
                                                                            'sync_status'=>$orderIds[$order->id]
                                                                        ]);
                                                                    }
                                                                    continue;
                                                                } else {
                                                                    $this->updateOrder(['id'=>$order->id],[
                                                                        'sync_status'=>PlatformStatus::FAILED,
                                                                        'order_updated_at'=> date("Y-m-d H:i:s")
                                                                    ]);
                                                                    $this->log->syncLog($userId, $userIntegrationId, $UserWorkFlowRuleID, $SourcePlatformId, $this->platformId, $object_id, 'failed', $order->id, $return_response);
                                                                }
                                                            } else {
                                                                $return_response = isset($changeStatus['response']) ? ($changeStatus['response']) : "API Error";
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    $return_response = $this->bp->handleResponseError($result);
                                                    if ($return_response == 'You have sent too many requests. Please wait before sending another request') {
                                                        //Set sync_status as previously
                                                        if (isset($orderIds[$order->id])) {
                                                            $this->updateOrder(['id'=>$order->id],[
                                                                'sync_status'=>$orderIds[$order->id]
                                                            ]);
                                                        }
                                                        continue;
                                                    } else {
                                                        $this->updateOrder(['id'=>$order->id],[
                                                            'sync_status'=>PlatformStatus::FAILED,
                                                            'order_updated_at'=> date("Y-m-d H:i:s")
                                                        ]);
                                                        $this->log->syncLog($userId, $userIntegrationId, $UserWorkFlowRuleID, $SourcePlatformId, $this->platformId, $object_id, 'failed', $order->id, $return_response);
                                                    }
                                                }
                                            }
                                        }
                                    }
                                }

                            }

                        }
                    }

                    if ($recordExist == 0) {
                        $return_response = "Record not exist";
                    }
                }
            }
        } catch (\Exception $e) {
            Log::error($e->getMessage());
            $return_response = $e->getMessage();
        }

        return $return_response;
    }
    public function updateOrder($where,$update){
        PlatformOrder::where($where)->update($update);
    }

    /*Find Platform Customer Sale representative search by name Id*/
    public function getSalesRepresentative($plt_customerId, $userId, $userIntegrationId)
    {
        $return_response = null;
        $resData = $this->SearchCustomerByID($plt_customerId, ['id', 'customer_name']);
        if ($resData) {
            //search RepId from platform customer by name
            $findBpCustomer = $this->helper->findCustomerByName($resData->customer_name, $userId, $this->platformId, $userIntegrationId, 'Employee');
            if ($findBpCustomer) {
                $return_response = $findBpCustomer->api_customer_id;
            }
        }
        return $return_response;
    }
    /* Find OrderID by Linked ID */
    public function FindOrderIDByLinkedID($LinkedID = null, $Select = [])
    {
        $return_response = null;
        if ($LinkedID && $LinkedID !== 0) {
            // $return_response = $this->mobj->getFirstResultByConditions('platform_order', ['id'=>$LinkedID], $Select);

            $return_response = PlatformOrder::select($Select)->where('id', $LinkedID)->first();
        }
        return $return_response;
    }

    /* Find Refund Order by Order Primary ID */
    public function FindRefundOrderIDByOrderID($LinkedID = null, $Select = [])
    {
        $return_response = null;
        if ($LinkedID && $LinkedID !== 0) {
            $return_response = $this->mobj->getResultByConditions('platform_order_refunds', ['platform_order_id' => $LinkedID, 'sync_status' => "Ready"], $Select);
        }
        return $return_response;
    }

    /* Create Sales Credit Order In BP | For Refund */
    public function SyncRefundOrderInBP($userId = null, $userIntegrationId = null, $PlatformWorkFlowRuleID = null, $UserWorkFlowRuleID = null, $SourcePlatformName = null, $sync_status = "Ready", $RecordID = null)
    {
        /* When you need extra memory to excute the code*/
        $this->mobj->AddMemory();
        $return_response = false;
        try {
            $recordExist = 0;
            $order_limit = 20;
            /* Find Sales Order Flow and thier Flow ID */
            $SalesWorkFlowID = null;

            $EventID = "GET_SALESORDER";
            $selectFields = ['e.event_id', 'ur.platform_workflow_rule_id', 'ur.status'];
            $user_work_flow = $this->map->getUserIntegWorkFlow($userIntegrationId, $EventID, $selectFields, self::$myPlatform);

            if (isset($user_work_flow[$EventID]) && $user_work_flow[$EventID]['status'] == 1) {
                $SalesWorkFlowID = $user_work_flow[$EventID]['platform_workflow_rule_id'];
            }


            /* ----------- */

            if ($SalesWorkFlowID) {
                $object_id = $this->helper->getObjectId('sales_order');
                $ufound = $this->mobj->getPlatformAccountByUserIntegration($userIntegrationId, $this->platformId, ['access_token', 'platform_id', 'id', 'user_id', 'api_domain', 'account_name', 'app_id', 'app_secret']);
                $SourcePlatformId = $this->helper->getPlatformIdByName($SourcePlatformName);
                $SOurceUfound = $this->mobj->getPlatformAccountByUserIntegration($userIntegrationId, $SourcePlatformId, ['app_id', 'app_secret', 'platform_id', 'id', 'user_id', 'api_domain']);

                if ($ufound && $this->platformId && $SourcePlatformId && $SOurceUfound) {
                    if (isset($ufound->platform_id) && $ufound->platform_id == $this->platformId) {
                        $query = PlatformOrder::select('user_id', 'platform_id', 'user_integration_id', 'platform_customer_id', 'trading_partner_id', 'order_type', 'api_order_id', 'customer_email', 'order_number', 'order_date', 'due_days', 'department', 'vendor', 'total_discount', 'total_tax', 'discount_tax', 'total_amount', 'notes', 'sync_status', 'linked_id', 'shipping_total', 'shipping_tax', 'carrier_code', 'warehouse_id', 'order_update_status', 'id', 'currency', 'shipping_method', 'payment_date', 'is_voided', 'linked_id');
                        if ($RecordID && $RecordID !== 0) {
                            $query->where('id', $RecordID);
                        } else {
                            $query->where(['user_integration_id' => $userIntegrationId, 'platform_id' => $SOurceUfound->platform_id, 'refund_sync_status' => $sync_status]);
                        }
                        $list = $query->orderBy('id', 'asc')->take($order_limit)->get();

                        if (!empty($list) && count($list) > 0) {
                            $recordExist = 1;

                            $account = $this->mobj->getFirstResultByConditions('platform_account_addtional_information', ['account_id' => $ufound->id, 'user_integration_id' => $userIntegrationId], ['account_currency_code', 'account_shipping_nominal_code', 'account_discount_nominal_code', 'account_timezone', 'account_giftcard_nominal_code'], ['id' => 'asc']);
                            if ($account) {
                                if (isset($account->account_timezone)) {
                                    /* Set BP account timezone */
                                    date_default_timezone_set($account->account_timezone);
                                }

                                $items_posting = [];

                                $projectId = $this->map->getMappedDataByName($userIntegrationId, $SalesWorkFlowID, "sorder_project", ['api_id']);

                                $channelId = $this->map->getMappedDataByName($userIntegrationId, $SalesWorkFlowID, "sorder_channel", ['api_id']);
                                $leadSourceId = $this->map->getMappedDataByName($userIntegrationId, $SalesWorkFlowID, "sorder_lead", ['api_id']);
                                $statusId = $this->map->getMappedDataByName($userIntegrationId, $PlatformWorkFlowRuleID, "default_scredit_status", ['api_id']);

                                $priceListId = $this->map->getMappedDataByName($userIntegrationId, $SalesWorkFlowID, "sorder_pricelist", ['api_id']);

                                $TaxCode = $this->map->getMappedDataByName($userIntegrationId, $SalesWorkFlowID, "sorder_taxcode", ['api_code'], 'default');

                                $TaxCode = isset($TaxCode) && $TaxCode ? $TaxCode->api_code : null;

                                $addressType = $this->map->getMappedDataByName($userIntegrationId, $SalesWorkFlowID, "sorder_shipping_address", ['api_id']);
                                $addressType = isset($addressType) && $addressType ? $addressType->api_id : "billing";

                                $shippingMethodId = $this->map->getMappedDataByName($userIntegrationId, $SalesWorkFlowID, "sorder_shipping_method", ['api_id']);
                                $shippingMethodId = isset($shippingMethodId) && $shippingMethodId ? $shippingMethodId->api_id : null;
                                $customerID = null;

                                //Order Loop
                                foreach ($list as $key => $order) {
                                    if ($order->linked_id != 0 && $order->is_voided == 0) {
                                        $refund_orders = $this->mobj->getResultByConditions('platform_order_refunds', ['platform_order_id' => $order->id, 'sync_status' => "Ready"], ['platform_order_id', 'api_id', 'date_created', 'created_at', 'amount', 'linked_id', 'sync_status', 'id'], ['id' => 'asc']);
                                        /* Find Address */
                                        $addressList = $this->mobj->getFirstResultByConditions('platform_order_address', ['platform_order_id' => $order->id, 'address_type' => $addressType], ['email']);

                                        if (count($refund_orders) > 0) {
                                            //Related Order Refund Loop
                                            foreach ($refund_orders as $refund) {
                                                $items = $this->ProcessProductsForSalesCredit($refund->id, $userId, $userIntegrationId, $this->platformId, $TaxCode, $PlatformWorkFlowRuleID, $account, $ufound);
                                                $items_posting = $items['items_posting'];

                                                $existing_customer_response = isset($order->platform_customer_id) && ($order->platform_customer_id > 0) ? $this->SearchCustomerByID($order->platform_customer_id, ['id', 'email', 'api_customer_group_id', 'api_customer_id']) : null;
                                                //Search ID in customer table

                                                if (isset($existing_customer_response)) {
                                                    if (isset($existing_customer_response->email)) {
                                                        $findBpCustomer = $this->helper->findCustomerByEmail($existing_customer_response->email, $userId, $this->platformId, $userIntegrationId);
                                                        if (isset($findBpCustomer->api_customer_id)) {
                                                            $customerID = $findBpCustomer->api_customer_id;
                                                        } else {
                                                            $customerID = app('App\Http\Controllers\Brightpearl\BrightpearlSearchController')->SearchCustomerByEmail($addressList->email, $ufound, $userId, $userIntegrationId);
                                                        }
                                                    }
                                                } elseif ($order->platform_customer_id == 0) {
                                                    $findCustomerEmail = 0;
                                                    if (isset($addressList->email) && $addressList->email) {
                                                        $findBpCustomer = $this->helper->findCustomerByEmail($addressList->email, $userId, $this->platformId, $userIntegrationId);
                                                        if (isset($findBpCustomer->api_customer_id)) {
                                                            $customerID = $findBpCustomer->api_customer_id;
                                                            $findCustomerEmail = 1;
                                                        } else {
                                                            $customerID = app('App\Http\Controllers\Brightpearl\BrightpearlSearchController')->SearchCustomerByEmail($addressList->email, $ufound, $userId, $userIntegrationId);
                                                        }
                                                    }

                                                    /* If platfrom_customer_id <=0 and email not exist */
                                                    if ($findCustomerEmail == 0) {
                                                        $CustomData = $this->map->getMappedDataByName($userIntegrationId, $PlatformWorkFlowRuleID, "default_customer_email", ['custom_data'], "default");
                                                        if ($CustomData) {
                                                            $CustomerEmail = $CustomData->custom_data;
                                                            if ($CustomerEmail) {
                                                                $findBpCustomer = $this->helper->findCustomerByEmail($CustomerEmail, $userId, $this->platformId, $userIntegrationId);
                                                                if (isset($findBpCustomer->api_customer_id)) {
                                                                    $customerID = $findBpCustomer->api_customer_id;
                                                                } else {
                                                                    $customerID = app('App\Http\Controllers\Brightpearl\BrightpearlSearchController')->SearchCustomerByEmail($CustomerEmail, $ufound, $userId, $userIntegrationId);
                                                                }
                                                            }
                                                        }
                                                    }
                                                }

                                                //Create order in brightpearl
                                                if ($customerID && is_numeric($customerID)) {
                                                    $BPOrderID = null;
                                                    $warehouseId = null;
                                                    /* Get Default Shipping Method if one to one not found */
                                                    $default_shipping_method = $this->map->getMappedDataByName($userIntegrationId, $SalesWorkFlowID, "sorder_shipping_method", ['api_id'], 'regular', $order->shipping_method);
                                                    if ($default_shipping_method) {
                                                        $default_shipping_method = $default_shipping_method->api_id;
                                                    } else {
                                                        $default_shipping_method = $shippingMethodId;
                                                    }

                                                    /* Get BP order ID */
                                                    $find = $this->FindOrderIDByLinkedID($order->linked_id, ["api_order_id", "warehouse_id"]);
                                                    if (isset($find->api_order_id)) {
                                                        $BPOrderID = $find->api_order_id;
                                                        $warehouseId = $find->warehouse_id;
                                                    }

                                                    if ($order->currency) {
                                                        $currency = $order->currency;
                                                    } else {
                                                        $currency = isset($account->account_currency_code) ? $account->account_currency_code : null;
                                                    }

                                                    $create_sales_credit = [
                                                        "customerId" => $customerID,
                                                        "ref" => $order->order_number,
                                                        "placedOn" => date(DATE_ISO8601, strtotime($refund->date_created ? $refund->date_created : $refund->created_at)),
                                                        "taxDate" => date(DATE_ISO8601, strtotime($refund->date_created ? $refund->date_created : $refund->created_at)),
                                                        "parentId" => $BPOrderID,
                                                        "projectId" => isset($projectId) && $projectId ? $projectId->api_id : null,
                                                        "channelId" => isset($channelId) && $channelId ? $channelId->api_id : null,
                                                        "leadSourceId" => isset($leadSourceId) && $leadSourceId ? $leadSourceId->api_id : null,
                                                        "statusId" => isset($statusId) && $statusId ? $statusId->api_id : null,
                                                        "warehouseId" => $warehouseId,
                                                        "priceListId" => isset($priceListId) && $priceListId ? $priceListId->api_id : null,
                                                        "currency" => ["code" => $currency, "fixedExchangeRate" => false],
                                                        "delivery" => $this->getBillingAndShippingAddress($order->id, "shipping", $customerID, $order->payment_date, $default_shipping_method),
                                                        "rows" => $items_posting,
                                                    ];

                                                    if (count($items_posting)) {
                                                        if (!empty($create_sales_credit)) {
                                                            $responseBP = $this->CreateSalesCredit($ufound, $userIntegrationId, $create_sales_credit);
                                                            if (isset($responseBP['response']) && is_numeric($responseBP['response'])) {
                                                                $salesCreditId = $responseBP['response'];
                                                                $OrderLinked = $this->mobj->makeInsertGetId('platform_order_refunds', ['platform_order_id' => $order->linked_id, 'api_id' => $salesCreditId, 'date_created' => date("Y-m-d H:i:s"), 'sync_status' => 'Synced', 'linked_id' => $refund->id]);

                                                                $this->mobj->makeUpdate('platform_order_refunds', ['linked_id' => $OrderLinked, 'sync_status' => 'Synced'], ['id' => $refund->id]);

                                                                $this->mobj->makeUpdate('platform_order', ['refund_sync_status' => 'Synced', 'order_updated_at' => date("Y-m-d H:i:s")], ['id' => $order->id]);

                                                                /*------start create goods-in-------*/
                                                                sleep(1);
                                                                $this->ReceiveRefundSalesCreditInventory($ufound, $salesCreditId, $warehouseId);
                                                                /*------stop create goods-in--------*/

                                                                /* Create Payment Entry */
                                                                if ($BPOrderID) {
                                                                    // Adding order notes
                                                                    sleep(1);
                                                                    $this->OrderPayment($salesCreditId, $userId, $userIntegrationId, $currency, $SalesWorkFlowID, $order->linked_id, $refund);

                                                                    //Close Sales Credit
                                                                    $allow_sc_close = $this->map->getMappedDataByName($userIntegrationId, $PlatformWorkFlowRuleID, 'allow_sc_close', ['api_code']);
                                                                    if (isset($allow_sc_close->api_code) && $allow_sc_close->api_code == 'Yes') {
                                                                        $this->bp->CloseSalesCreditByID($ufound, $salesCreditId, []);
                                                                    }

                                                                    //Create Note With Link And find US and UK Domain
                                                                    if (strpos($ufound->api_domain, 'use') !== false) {
                                                                        $domain = 'use1.brightpearlapp.com';
                                                                    } else {
                                                                        $domain = 'euw1.brightpearlapp.com';
                                                                    }

                                                                    $text = 'Sales Credit Created # <a href="//' . $domain . '/patt-op.php?scode=invoice&amp;action=edit&amp;oID=' . $salesCreditId . '">' . $salesCreditId . '</a>';
                                                                    sleep(1);
                                                                    $ordernotes = $this->AddOrderNotes($ufound, $BPOrderID, $text);
                                                                    if (is_array($ordernotes)) {
                                                                        if (!isset($ordernotes['errors'])) {
                                                                            $return_response = true;
                                                                        } elseif (isset($ordernotes['errors']) && is_array($ordernotes['errors'])) {
                                                                            $error = $this->bp->handleResponseError($ordernotes);
                                                                            $this->log->syncLog($userId, $userIntegrationId, $UserWorkFlowRuleID, $SourcePlatformId, $this->platformId, $object_id, 'failed', $order->id, $error);
                                                                            $return_response = false;
                                                                        } else {
                                                                            $return_response = isset($ordernotes['response']) ? ($ordernotes['response']) : "API Error";
                                                                        }
                                                                    }
                                                                }
                                                                /* ---------- */
                                                                $this->log->syncLog($userId, $userIntegrationId, $UserWorkFlowRuleID, $SourcePlatformId, $this->platformId, $object_id, 'success', $order->id, null);
                                                                $return_response = true;
                                                            } else {
                                                                $error = $this->bp->handleResponseError($responseBP);
                                                                $this->mobj->makeUpdate('platform_order', ['refund_sync_status' => 'Failed', 'order_updated_at' => date("Y-m-d H:i:s")], ['id' => $order->id]);
                                                                $this->log->syncLog($userId, $userIntegrationId, $UserWorkFlowRuleID, $SourcePlatformId, $this->platformId, $object_id, 'failed', $order->id, $error);
                                                                $return_response = $error;
                                                            }
                                                        } else {
                                                            $return_response = "No payload data prepared to sync refund data";
                                                            $this->mobj->makeUpdate('platform_order', ['refund_sync_status' => 'Failed', 'order_updated_at' => date("Y-m-d H:i:s")], ['id' => $order->id]);
                                                            $this->mobj->makeUpdate('platform_order_refunds', ['sync_status' => 'Failed'], ['id' => $refund->id]);
                                                            $this->log->syncLog($userId, $userIntegrationId, $UserWorkFlowRuleID, $SourcePlatformId, $this->platformId, $object_id, 'failed', $order->id, $return_response);
                                                        }
                                                    } else {
                                                        $return_response = "Order line items are not found, please retry";
                                                        $this->mobj->makeUpdate('platform_order_refunds', ['sync_status' => 'Failed'], ['id' => $refund->id]);
                                                        $this->mobj->makeUpdate('platform_order', ['refund_sync_status' => 'Failed', 'order_updated_at' => date("Y-m-d H:i:s")], ['id' => $order->id]);
                                                        $this->log->syncLog($userId, $userIntegrationId, $UserWorkFlowRuleID, $SourcePlatformId, $this->platformId, $object_id, 'failed', $order->id, $return_response);
                                                    }
                                                } else {
                                                    $error = "Customer or address may be not found for sales credit.";
                                                    $this->mobj->makeUpdate('platform_order', ['refund_sync_status' => 'Failed', 'order_updated_at' => date("Y-m-d H:i:s")], ['id' => $order->id]);
                                                    $this->log->syncLog($userId, $userIntegrationId, $UserWorkFlowRuleID, $SourcePlatformId, $this->platformId, $object_id, 'failed', $order->id, $error);
                                                    $return_response = $error;
                                                }
                                            }
                                        }
                                    }
                                }
                            }
                        }

                        if ($recordExist == 0) {
                            $return_response = "Record not exist";
                        }
                    }
                }
            }
        } catch (\Exception $e) {
            Log::error($userIntegrationId . " -> BrightPearlApiController -> SyncRefundOrderInBP -> " . $e->getLine() . " -> " . $e->getMessage());
            $return_response = $e->getMessage();
        }
        return $return_response;
    }

    /*Receive Refund Sales Credit Inventory */
    public function ReceiveRefundSalesCreditInventory($account, $salesCreditId, $warehouseId)
    {
        $return = null;
        if ($warehouseId) {
            $defaultLocationId = null;
            $defaultLocationResponse = $this->bp->GetWarehouseDefaultLocation($account, $warehouseId);
            $response = $this->bp->getResponse($defaultLocationResponse);
            Storage::disk('local')->append(date('d-m-Y') . '_ReceiveRefundSalesCreditInventory.txt', 'user_id: ' . $account->user_id . ' SC-ID: ' . $salesCreditId . ' Warehosue DefLoc: ' . json_encode($response));
            if (isset($response['status_code']) && ($response['status_code'] == 200  || $response['status_code'] == 201)) {
                $defaultLocation = $response['body'];
                if (is_numeric($defaultLocation['response']) && isset($defaultLocation['response'])) {
                    $defaultLocationId = $defaultLocation['response'];
                    if ($defaultLocationId) {
                        $salesCreditResponse = $this->bp->GetSalesCreditByID($account, $salesCreditId);
                        $SCresponse = $this->bp->getResponse($salesCreditResponse);
                        Storage::disk('local')->append(date('d-m-Y') . '_ReceiveRefundSalesCreditInventory.txt', 'user_id: ' . $account->user_id . ' SC-ID: ' . $salesCreditId . ' GetSalesCreditByID: ' . json_encode($salesCreditResponse));
                        if (isset($SCresponse['status_code']) && ($SCresponse['status_code'] == 200  || $SCresponse['status_code'] == 201)) {
                            $salesCreditResult = $SCresponse['body'];
                            if (isset($salesCreditResult['response'][0]['id'])) {
                                $salesCredit = $salesCreditResult['response'][0];
                                $product = [];
                                if (count($salesCredit['rows'])) {
                                    foreach ($salesCredit['rows'] as $item) {
                                        if ($item['productId'] != 1000) {
                                            $product[] = ['productId' => $item['productId'], 'purchaseOrderRowId' => $item['id'], 'quantity' => $item['quantity'], 'destinationLocationId' => $defaultLocationId, 'productValue' => ['currency' => $salesCredit['currency']['code'], 'value' => $item['net']]];
                                        }
                                    }
                                } else {
                                    $return = "No product found to move in";
                                }

                                if (count($product)) {
                                    $payload = ['transfer' => false, 'warehouseId' => $warehouseId, 'goodsMoved' => $product, 'receivedOn' => date(DATE_ISO8601), 'userBatchReference' => 'Sales Credit Id: ' . $salesCreditId];
                                    $server_response = $this->bp->MoveInventoryOfSalesCreditByID($account, $salesCreditId, $payload);
                                    $GOIresponse = $this->bp->getResponse($server_response);
                                    if (isset($GOIresponse['status_code']) && ($GOIresponse['status_code'] == 200  || $GOIresponse['status_code'] == 201)) {
                                        $return = $GOIresponse['body']['response'];
                                    } else {
                                        $errorHandler = (isset($GOIresponse['body']['errors'])) ? $GOIresponse['body'] : $GOIresponse;
                                        $return = $this->bp->handleResponseError($errorHandler);
                                    }
                                    Storage::disk('local')->append(date('d-m-Y') . '_ReceiveRefundSalesCreditInventory.txt', 'user_id: ' . $account->user_id . ' SC-ID: ' . $salesCreditId . ' MoveInventoryOfSalesCreditByID: ' . json_encode($GOIresponse));
                                }
                            }
                        }
                    }
                }
            }
        }

        return $return;
    }

    /* Change Order Status */
    public function UpdateOrderStatus($account, $orderID, $orderStatusID, $Note = null)
    {
        $return_response = false;
        try {
            $Orderstatus = [];
            $Orderstatus['orderStatusId'] = $orderStatusID;
            if (isset($Note)) {
                $Orderstatus['orderNote'] = ['text' => $Note, 'isPublic' => true];
            }

            $url = "order/{$orderID}/status";
            $response = $this->bp->UpdateOrderStatus($account, $url, $Orderstatus);
            $result = json_decode($response->getBody(), true);
            if ($result) {
                $return_response = $result;
            } else if (empty($result)) { // need return blank detail because order update return blank array after success
                $return_response = $result;
            } else {
                $return_response = false;
            }
        } catch (\Exception $e) {
            Log::error($e->getMessage());
            $return_response = false;
        }
        return $return_response;
    }

    /* Change Order Notes */
    public function AddOrderNotes($ufound, $orderID, $Note = '')
    {
        $return_response = false;
        try {
            $OrderNotes = [];
            $OrderNotes['text'] = $Note;
            $OrderNotes['isPublic'] = true;

            $url = "order/{$orderID}/note";
            $response = $this->bp->AddOrderNote($ufound, $url, $OrderNotes);
            $result = json_decode($response->getBody(), true);
            if ($result) {
                $return_response = $result;
            } else if (empty($result)) { // need return blank detail because order update return blank array after success
                $return_response = $result;
            } else {
                $return_response = false;
            }
        } catch (\Exception $e) {
            Log::error($e->getMessage());
            $return_response = false;
        }
        return $return_response;
    }

    /* Search Order Payments */
    public function SearchCustomerPayments($ufound, $orderID)
    {
        $return_response = false;
        try {

            $url = "?columns=paymentId,createdOn&orderId={$orderID}&sort=paymentId.ASC";
            $response = $this->bp->SearchCustomerPayments($ufound, $url);

            if ($result = json_decode($response->getBody(), true)) {
                $return_response = $result;
            } else {
                $return_response = false;
            }
        } catch (\Exception $e) {
            Log::error($e->getMessage());
            $return_response = false;
        }
        return $return_response;
    }

    /* Search Order Payments */
    public function SearchProduct($ufound, $Field, $value)
    {
        $return_response = false;
        try {
            if (strtolower($Field) == "sku") {
                $Field = "SKU";
            } else if (strtolower($Field) == "mpn") {
                $Field = "MPN";
            } else if (strtolower($Field) == "ean") {
                $Field = "EAN";
            } else if (strtolower($Field) == "upc") {
                $Field = "UPC";
            } else if (strtolower($Field) == "barcode") {
                $Field = "barcode";
            } else if (strtolower($Field) == "ISBN") {
                $Field = "ISBN";
            }
            $url = "?columns=productId,productName&{$Field}={$value}&sort=productId.ASC";

            $response = $this->bp->SearchProduct($ufound, $url);

            if ($result = json_decode($response->getBody(), true)) {
                $return_response = $result;
            } else {
                $return_response = false;
            }
        } catch (\Exception $e) {
            Log::error($e->getMessage());
            $return_response = false;
        }
        return $return_response;
    }

    public function FindErrorPattern($pattern = [], $Error)
    {
        $return = ["status" => 0, "status_text" => $Error];
        foreach ($pattern as $err) {
            if (strpos($Error, $err) !== false) {
                $return = ["status" => 1, "status_text" => "This customer is not available to sync in order, Please click to resync"];
                break;
            }
        }

        return $return;
    }

    /* Delete Customer If invalid Customer Found */
    public function DeleteCustomer($user_id, $user_integration_id, $platform_id, $customer_api_id)
    {

        return PlatformCustomer::where([['user_integration_id', '=', $user_integration_id], ['platform_id', '=', $platform_id], ['api_customer_id', '=', $customer_api_id]])->update(['is_deleted' => 1, 'updated_at' => date('Y-m-d H:i:s')]);
    }

    /* Delete Customer Order Payment By ID */
    public function DeleteCustomerPaymentByID($ufound, $paymentID)
    {
        $return_response = false;
        try {

            $response = $this->bp->DeleteCustomerPaymentByID($ufound, null, $paymentID);
            if ($result = json_decode($response->getBody(), true)) {
                $return_response = $result;
            } else {
                $return_response = false;
            }
        } catch (\Exception $e) {
            Log::error($e->getMessage());
            $return_response = false;
        }
        return $return_response;
    }

    /* Multi message */
    public function MultiMessage($userIntegrationId = null, $postData = [], $account = null)
    {

        try {
            if (!isset($account)) {
                $account = $this->mobj->getPlatformAccountByUserIntegration($userIntegrationId, $this->platformId, ['access_token', 'platform_id', 'id', 'user_id', 'api_domain', 'account_name', 'app_id', 'app_secret']);
            }
            if ($account) {

                return $this->bp->MultiMessage($account, $postData);
            }
        } catch (\Exception $e) {

            return $e->getMessage();
        }
    }

    /* Delete Webhook */
    public function DeleteWebhook($ID, $userIntegrationId = null)
    {
        try {
            $ufound = $this->mobj->getPlatformAccountByUserIntegration($userIntegrationId, $this->platformId, ['access_token', 'platform_id', 'id', 'user_id', 'api_domain', 'account_name', 'app_id', 'app_secret']);
            if ($ufound && $this->platformId) {
                if (isset($ufound->platform_id) && $ufound->platform_id == $this->platformId) {
                    $response = $this->bp->DeleteWebhook($ufound, null, $ID);
                    return $response->getStatusCode();
                }
            }
        } catch (\Exception $e) {
            Log::error($userIntegrationId . " -> BrightPearlApiController -> DeleteWebhook -> " . $e->getLine() . " -> " . $e->getMessage());
            return false;
        }
    }

    /* Get Webhook List */
    public function GetWebhookList($userIntegrationId = null)
    {
        try {
            $ufound = $this->mobj->getPlatformAccountByUserIntegration($userIntegrationId, $this->platformId, ['access_token', 'platform_id', 'id', 'user_id', 'api_domain', 'account_name', 'app_id', 'app_secret']);
            if ($ufound && $this->platformId) {
                if (isset($ufound->platform_id) && $ufound->platform_id == $this->platformId) {
                    $response = $this->bp->GetWebhookList($ufound);
                    if ($webhook = json_decode($response->getBody(), true)) {
                        if (!empty($webhook) && isset($webhook['response'])) {
                            return $webhook;
                        }
                    }
                }
            }
        } catch (\Exception $e) {
            Log::error($userIntegrationId . " -> BrightPearlApiController -> GetWebhookList -> " . $e->getLine() . " -> " . $e->getMessage());
            return false;
        }
    }

    /* Create Webhook */
    public function CreateOrDeleteWebhook($userId = null, $userIntegrationId = null, array $wooksType, $attempt, $DestinationPlatformName = null)
    {
        $return_response = false;
        try {
            $ufound = $this->mobj->getPlatformAccountByUserIntegration($userIntegrationId, $this->platformId, ['access_token', 'platform_id', 'id', 'user_id', 'api_domain', 'account_name', 'app_id', 'app_secret']);
            if ($ufound && $this->platformId) {
                if (isset($ufound->platform_id) && $ufound->platform_id == $this->platformId) {
                    if ($attempt == 1) {
                        // create webhook
                        /* Please pass last param as 0=for staging mode and 1=for live mode */
                        if (!empty($wooksType)) {
                            $Baseurl = env('APP_WEBHOOK_URL');
                            $url = '/integration-service/webhook/';

                            $arraywebhooklist = array();
                            /* Please pass last param as if APP_ENV=stag or local then 0 for staging/local mode and APP_ENV=prod then 1=for live mode */
                            $Mode = env('APP_ENV') == 'prod' ? "1" : "0";

                            $check_already_subscribed = DB::table('platform_webhook_info')->where('user_integration_id', $userIntegrationId)->where('platform_id', $ufound->platform_id)->where('status', 1)->pluck('description')->toArray();

                            if (in_array('modified_order_status', $wooksType) && (!in_array('order.modified.order-status', $check_already_subscribed))) {
                                $arraywebhooklist[] = [
                                    'subscribeTo' => 'order.modified.order-status',
                                    'httpMethod' => 'POST',
                                    'uriTemplate' => $Baseurl . "/brightpearl/public/BrightpearlToTaxJar/brightpearl-modified-order-status/" . $userIntegrationId . '/' . $Mode,
                                    'bodyTemplate' => '{ "accountCode": "${account-code}", "resourceType": "${resource-type}", "id": "${resource-id}", "lifecycleEvent": "${lifecycle-event}", "fullEvent": "${full-event}", "raisedOn": "${raised-on}", "brightpearlVersion": "${brightpearl-version}" }',
                                    'contentType' => 'application/json',
                                    'idSetAccepted' => true,
                                    'qualityOfService' => 1,
                                ];
                            }

                            if (in_array('shipment', $wooksType) && (!in_array('goods-out-note.modified.shipped', $check_already_subscribed))) {
                                $arraywebhooklist[] = [
                                    'subscribeTo' => 'goods-out-note.modified.shipped',
                                    'httpMethod' => 'POST',
                                    'uriTemplate' => $Baseurl . "/brightpearl/public/shipment/" . $userIntegrationId . '/' . $Mode,
                                    'bodyTemplate' => '{ "accountCode": "${account-code}", "resourceType": "${resource-type}", "id": "${resource-id}", "lifecycleEvent": "${lifecycle-event}", "fullEvent": "${full-event}", "raisedOn": "${raised-on}", "brightpearlVersion": "${brightpearl-version}" }',
                                    'contentType' => 'application/json',
                                    'idSetAccepted' => true,
                                    'qualityOfService' => 1,
                                ];
                            }

                            if (in_array('shipment', $wooksType) && (!in_array('drop-ship-note.modified.shipped', $check_already_subscribed))) {
                                $arraywebhooklist[] = [
                                    'subscribeTo' => 'drop-ship-note.modified.shipped',
                                    'httpMethod' => 'POST',
                                    'uriTemplate' => $Baseurl . "/brightpearl/public/shipment/" . $userIntegrationId . "/" . $Mode,
                                    'bodyTemplate' => '{"accountCode": "${account-code}", "resourceType": "${resource-type}", "id": "${resource-id}", "lifecycleEvent": "${lifecycle-event}", "fullEvent": "${full-event}", "raisedOn": "${raised-on}", "brightpearlVersion": "${brightpearl-version}"}',
                                    'contentType' => 'application/json',
                                    'idSetAccepted' => true,
                                    'qualityOfService' => 1,
                                ];
                            }

                            if (in_array('good_out_note_created', $wooksType) && (!in_array('goods-out-note.created', $check_already_subscribed))) {
                                $arraywebhooklist[] = [
                                    'subscribeTo' => 'goods-out-note.created',
                                    'httpMethod' => 'POST',
                                    'uriTemplate' => $Baseurl . "/brightpearl/public/shipment/" . $userIntegrationId . '/' . $Mode,
                                    'bodyTemplate' => '{ "accountCode": "${account-code}", "resourceType": "${resource-type}", "id": "${resource-id}", "lifecycleEvent": "${lifecycle-event}", "fullEvent": "${full-event}", "raisedOn": "${raised-on}", "brightpearlVersion": "${brightpearl-version}" }',
                                    'contentType' => 'application/json',
                                    'idSetAccepted' => true,
                                    'qualityOfService' => 1,
                                ];
                            }

                            if (in_array('good_out_note_deleted', $wooksType) && (!in_array('goods-out-note.destroyed', $check_already_subscribed)) && isset(Config::get('apisettings.AllowGONDeletedWebhookCreationInBP')[$DestinationPlatformName])) {
                                //This is basically to create GON deleted hook
                                $arraywebhooklist[] = [
                                    'subscribeTo' => 'goods-out-note.destroyed',
                                    'httpMethod' => 'POST',
                                    'uriTemplate' => $Baseurl . "/brightpearl/public/shipment/" . $userIntegrationId . '/' . $Mode,
                                    'bodyTemplate' => '{ "accountCode": "${account-code}", "resourceType": "${resource-type}", "id": "${resource-id}", "lifecycleEvent": "${lifecycle-event}", "fullEvent": "${full-event}", "raisedOn": "${raised-on}", "brightpearlVersion": "${brightpearl-version}" }',
                                    'contentType' => 'application/json',
                                    'idSetAccepted' => true,
                                    'qualityOfService' => 1,
                                ];
                            }

                            //to avoid  product webhook subscription for child integration
                            $is_parent_intg = true;
                            $integInfo = UserIntegration::where('id', $userIntegrationId)->select('parent_integration_id', 'shared_platform_id')->first();
                            if ($integInfo && $integInfo->parent_integration_id && $integInfo->shared_platform_id) {
                                $platformIDs = explode(',', $integInfo->shared_platform_id);
                                if (in_array($this->platformId, $platformIDs)) { //array filter
                                    $is_parent_intg = false;
                                }
                            }

                            if ($is_parent_intg) {
                                if (in_array('product', $wooksType) && (!in_array('product.created', $check_already_subscribed))) {
                                    $arraywebhooklist[] = [
                                        'subscribeTo' => 'product.created',
                                        'httpMethod' => 'POST',
                                        'uriTemplate' => $Baseurl . "/brightpearl/public/product/" . $userIntegrationId . '/' . $Mode,
                                        'bodyTemplate' => '{ "accountCode": "${account-code}", "resourceType": "${resource-type}", "id": "${resource-id}", "lifecycleEvent": "${lifecycle-event}", "fullEvent": "${full-event}", "raisedOn": "${raised-on}", "brightpearlVersion": "${brightpearl-version}" }',
                                        'contentType' => 'application/json',
                                        'idSetAccepted' => true,
                                        'qualityOfService' => 1,
                                    ];

                                    $arraywebhooklist[] = [
                                        'subscribeTo' => 'product.modified',
                                        'httpMethod' => 'POST',
                                        'uriTemplate' => $Baseurl . "/brightpearl/public/product/" . $userIntegrationId . '/' . $Mode,
                                        'bodyTemplate' => '{ "accountCode": "${account-code}", "resourceType": "${resource-type}", "id": "${resource-id}", "lifecycleEvent": "${lifecycle-event}", "fullEvent": "${full-event}", "raisedOn": "${raised-on}", "brightpearlVersion": "${brightpearl-version}" }',
                                        'contentType' => 'application/json',
                                        'idSetAccepted' => true,
                                        'qualityOfService' => 1,
                                    ];

                                    $arraywebhooklist[] = [
                                        'subscribeTo' => 'product.destroyed',
                                        'httpMethod' => 'POST',
                                        'uriTemplate' => $Baseurl . "/brightpearl/public/product/" . $userIntegrationId . '/' . $Mode,
                                        'bodyTemplate' => '{ "accountCode": "${account-code}", "resourceType": "${resource-type}", "id": "${resource-id}", "lifecycleEvent": "${lifecycle-event}", "fullEvent": "${full-event}", "raisedOn": "${raised-on}", "brightpearlVersion": "${brightpearl-version}" }',
                                        'contentType' => 'application/json',
                                        'idSetAccepted' => true,
                                        'qualityOfService' => 1,
                                    ];
                                }
                            }

                            if (in_array('inventory', $wooksType) && (!in_array('product.modified.on-hand-modified', $check_already_subscribed))) {
                                $arraywebhooklist[] = [
                                    'subscribeTo' => 'product.modified.on-hand-modified',
                                    'httpMethod' => 'POST',
                                    'uriTemplate' => $Baseurl . "/brightpearl/public/inventory/" . $userIntegrationId . '/' . $Mode,
                                    'bodyTemplate' => '{ "accountCode": "${account-code}", "resourceType": "${resource-type}", "id": "${resource-id}", "lifecycleEvent": "${lifecycle-event}", "fullEvent": "${full-event}", "raisedOn": "${raised-on}", "brightpearlVersion": "${brightpearl-version}" }',
                                    'contentType' => 'application/json',
                                    'idSetAccepted' => true,
                                    'qualityOfService' => 1,
                                ];
                            }

                            //sales invoice returns inside sales order object
                            if (in_array('invoice', $wooksType) && (!in_array('order.modified.order-status', $check_already_subscribed))) {
                                $arraywebhooklist[] = [
                                    'subscribeTo' => 'order.modified.order-status',
                                    'httpMethod' => 'POST',
                                    'uriTemplate' => $Baseurl . "/brightpearl/public/invoice/" . $userIntegrationId . '/' . $Mode,
                                    'bodyTemplate' => '{ "accountCode": "${account-code}", "resourceType": "${resource-type}", "id": "${resource-id}", "lifecycleEvent": "${lifecycle-event}", "fullEvent": "${full-event}", "raisedOn": "${raised-on}", "brightpearlVersion": "${brightpearl-version}" }',
                                    'contentType' => 'application/json',
                                    'idSetAccepted' => true,
                                    'qualityOfService' => 1,
                                ];
                            }

                            if (in_array('goodsinnote', $wooksType) && (!in_array('goods-in-note.created', $check_already_subscribed))) {
                                $arraywebhooklist[] = [
                                    'subscribeTo' => 'goods-in-note.created',
                                    'httpMethod' => 'POST',
                                    'uriTemplate' => $Baseurl . "/brightpearl/public/goodsinnote/" . $userIntegrationId . '/' . $Mode,
                                    'bodyTemplate' => '{ "accountCode": "${account-code}", "resourceType": "${resource-type}", "id": "${resource-id}", "lifecycleEvent": "${lifecycle-event}", "fullEvent": "${full-event}", "raisedOn": "${raised-on}", "brightpearlVersion": "${brightpearl-version}" }',
                                    'contentType' => 'application/json',
                                    'idSetAccepted' => true,
                                    'qualityOfService' => 1,
                                ];
                            }

                            if (!empty($arraywebhooklist)) {
                                $message = [];
                                $error_message = '';
                                foreach ($arraywebhooklist as $row) {
                                    $postData = $row;

                                    $headers = $this->bp->MakeHeader($ufound);
                                    $baseUrl = "https://" . $ufound->api_domain . "/public-api/" . $ufound->account_name . $url;

                                    $response = $this->mobj->makeRequest('POST', $baseUrl, $postData, $headers, 'json');
                                    if ($webhook = json_decode($response->getBody(), true)) {
                                        if (!empty($webhook) && isset($webhook['response'])) {
                                            //success
                                            if (is_numeric($webhook['response'])) {
                                                //insert webhook log
                                                $webhookdetails = ['user_id' => $userId, 'user_integration_id' => $userIntegrationId, 'platform_id' => $ufound->platform_id, 'api_id' => $webhook['response'], 'description' => $row['subscribeTo'], 'status' => 1];
                                                $this->mobj->makeInsert('platform_webhook_info', $webhookdetails);
                                            } else {
                                                $message[] = $webhook['response'];
                                            }
                                        } elseif (isset($webhook['error']) || (isset($webhook['errors']) && !isset($webhook['errors'][0]['code']))) {
                                            if (isset($webhook['errors'][0]['message'])) {
                                                $message[] = $this->bp->handleResponseError($webhook);
                                            } else {
                                                $message[] = $webhook['error'];
                                            }
                                        }
                                    } else {
                                        $message[] = "Empty response from API";
                                    }
                                }

                                if (!empty($message)) {
                                    $error_message = implode(" | ", $message);
                                }

                                if (empty($message)) {
                                    $return_response = true;
                                } else {
                                    $return_response = $error_message;
                                }
                            }
                        } else {
                            $return_response = "error can not create webhook";
                        }
                    } elseif ($attempt == 2) {
                        // delete webhook
                        if (!empty($wooksType)) {
                            if (in_array('all', $wooksType)) {
                                $hookList = $this->mobj->getResultByConditions('platform_webhook_info', ['user_integration_id' => $userIntegrationId, 'platform_id' => $ufound->platform_id], ['api_id'], ['id' => 'asc']);
                                if ($hookList->count() > 0) {
                                    $hook = $hookList->pluck('api_id')->toArray();
                                    foreach ($hook as $value) {
                                        $response = $this->DeleteWebhook($value, $userIntegrationId);
                                        if (!is_bool($response)) {
                                            $this->mobj->makeDelete('platform_webhook_info', ['platform_id' => $ufound->platform_id, 'user_integration_id' => $userIntegrationId, 'api_id' => $value]);
                                        }
                                    }
                                }
                                $return_response = true;
                            } else {
                                $hookList = DB::table('platform_webhook_info')->where([['user_integration_id', '=', $userIntegrationId], ['platform_id', '=', $ufound->platform_id]])->whereIn('api_id', $wooksType)->get();

                                if ($hookList->count() > 0) {
                                    $hook = $hookList->pluck('api_id')->toArray();
                                    foreach ($hook as $value) {
                                        $response = $this->DeleteWebhook($value, $userIntegrationId);
                                        if (!is_bool($response)) {
                                            $this->mobj->makeDelete('platform_webhook_info', ['platform_id' => $ufound->platform_id, 'user_integration_id' => $userIntegrationId, 'api_id' => $value]);
                                        }
                                    }
                                    $return_response = true;
                                }
                            }
                        } else {
                            $return_response = "Error: can not delete webhook";
                        }
                    }
                }
            }
        } catch (\Exception $e) {
            Log::error($userIntegrationId . " -> BrightPearlApiController -> CreateOrDeleteWebhook -> " . $e->getLine() . " -> " . $e->getMessage());
            $return_response = $e->getMessage();
        }

        return $return_response;
    }

    /*
     * Get Sales Order GON & Transfer GON && Drop Ship Note
     * wooksType: ["good_out_note_created"] attempt: 1 is_initial_syn: 0 sync_status: Pending transferedOnly:
     */
    public function GetShipment($userId = null, $userIntegrationId = null, $wooksType = [], $attempt = 1, $is_initial_syn = 0, $sync_status = "Pending", $transferedOnly = false, $event, $destination_platform_id)
    {
        // Log::info( "GetShipment :- wooksType: ".json_encode( $wooksType )." attempt: ".$attempt." is_initial_syn: ".$is_initial_syn." sync_status: ".$sync_status." transferedOnly: ".$transferedOnly );
        $return_response = false;

        $tableName = "platform_order";
        $flowEvent = $recordInfo = $recordId = null;
        try {
            if ($is_initial_syn) {
                return $this->CreateOrDeleteWebhook($userId, $userIntegrationId, $wooksType, $attempt);
            } else {
                $platform_account = $this->mobj->getPlatformAccountByUserIntegration($userIntegrationId, $this->platformId, ['access_token', 'platform_id', 'id', 'user_id', 'api_domain', 'account_name', 'app_id', 'app_secret']);
                if ($platform_account) {
                    $DropShipmentCount = 0;
                    /*-----------Start Drop Ship------------*/
                    if ($transferedOnly == false) {
                        $flowEvent = "TRANSFEREDGOODSOUTNOTE";
                        $this->RetryQueryInformation($userIntegrationId, $this->platformId, $flowEvent, 10); //Retry record to process

                        $drop_shipment = $this->mobj->getResultByConditions('platform_order_shipments', ['user_integration_id' => $userIntegrationId, 'platform_id' => $this->platformId, 'sync_status' => $sync_status, 'type' => 'DropShipment'], ['shipment_id'], ['shipment_id' => 'asc'], 10);
                        $drop_shipment_ids = $drop_shipment->pluck('shipment_id')->toArray();

                        $DropShipmentCount = count($drop_shipment_ids);
                        if (!empty($drop_shipment_ids) && count($drop_shipment_ids) > 0) {

                            //store shipment data in array to update at the end
                            $updateShipmentDataTransfer = [];

                            sort($drop_shipment_ids);
                            $DropShipNoteIds = implode(',', $drop_shipment_ids);
                            $response = $this->GetDropShipNotes($userIntegrationId, $DropShipNoteIds);
                            if (!empty($response) && isset($response['response']) && is_array($response['response'])) {
                                $deleteRow = $orderIds = [];

                                if (count($response['response']) > 0) {
                                    foreach ($response['response'] as $key => $value) {
                                        $platform_order_id = $this->FindOrderID($value['orderId'], $userId, $this->platformId, $userIntegrationId);
                                        if ($platform_order_id) {
                                            /* Store Order IDs for checking order status */
                                            array_push($orderIds, $value['orderId']);
                                            $List = ['user_id' => $userId, 'platform_id' => $this->platformId, 'user_integration_id' => $userIntegrationId, 'sync_status' => 'Ready', 'order_id' => $value['orderId'], 'shipment_status' => serialize($value['status']), 'realease_date' => @$value['status']['shippedOn'], 'created_by' => @$value['status']['shippedById'], 'tracking_info' => @$value['shipping']['reference'], 'shipping_method' => @$value['shipping']['shippingMethodId'], 'platform_order_id' => $platform_order_id];

                                            //$this->mobj->makeUpdate('platform_order_shipments', $List, ['shipment_id' => $key, 'user_integration_id' => $userIntegrationId, 'platform_id' => $this->platformId, 'sync_status' => 'Pending', 'type' => 'DropShipment']);

                                            $platform_order_shipment = $this->mobj->getFirstResultByConditions('platform_order_shipments', ['shipment_id' => (string)$key, 'user_integration_id' => $userIntegrationId, 'platform_id' => $this->platformId, 'type' => 'DropShipment'], ['id']);
                                            if ($platform_order_shipment) {

                                                // $this->mobj->makeUpdate('platform_order_shipments', $List, ['id' => $platform_order_shipment->id]);
                                                $updateShipmentDataTransfer[$platform_order_shipment->id] = $List;


                                                $Items = [];
                                                foreach ($value['orderRows'] as $ikey => $ivalue) {
                                                    foreach ($ivalue as $isubvalue) {
                                                        array_push($Items, ['platform_order_shipment_id' => $platform_order_shipment->id, 'row_id' => $ikey, 'product_id' => $isubvalue['productId'], 'location_id' => $isubvalue['locationId'], 'quantity' => $isubvalue['quantity']]);
                                                    }
                                                }

                                                if (!empty($Items)) {
                                                    $this->mobj->makeInsert('platform_order_shipment_lines', $Items);
                                                }
                                            }
                                        } else {
                                            /* push unused record shipment id */
                                            array_push($deleteRow, (string)$key);
                                        }
                                    }
                                }
                            } else {
                                /* Delete unused record if not match with order */
                                DB::table('platform_order_shipments')->where(['user_integration_id' => $userIntegrationId, 'platform_id' => $this->platformId, 'type' => 'DropShipment'])
                                    ->where(function ($query) {
                                        return $query->where('sync_status', 'Pending')->orWhere('sync_status', 'Failed');
                                    })
                                    ->whereIn('shipment_id', $drop_shipment_ids)->delete();
                            }

                            if (!empty($deleteRow)) {
                                /* Delete unused record if not match with order */
                                DB::table('platform_order_shipments')->where(['user_integration_id' => $userIntegrationId, 'platform_id' => $this->platformId, 'type' => 'DropShipment'])
                                    ->where(function ($query) {
                                        return $query->where('sync_status', 'Pending')->orWhere('sync_status', 'Failed');
                                    })
                                    ->whereIn('shipment_id', $deleteRow)->delete();
                            }

                            if (!empty($orderIds)) {

                                $orderIds = array_unique($orderIds);
                                sort($orderIds);
                                $orderIds = implode(',', $orderIds);
                                sleep(1);
                                $response = $this->GetOrderDetails($orderIds, $userIntegrationId, $platform_account);
                                if (isset($response['response']) && !empty($response['response']) && is_array($response['response'])) {
                                    foreach ($response['response'] as $key => $value) {
                                        if ($value['shippingStatusCode'] == 'ASS') {
                                            $status = 'Ready';
                                        } elseif ($value['shippingStatusCode'] == 'SPS') {
                                            $status = 'Partial';
                                        } elseif ($value['shippingStatusCode'] == 'SNS') {
                                            $status = 'Pending';
                                        } elseif ($value['shippingStatusCode'] == 'NST') {
                                            $status = 'Failed';
                                        }

                                        $findOrder = PlatformOrder::select('id', 'shipment_status')->where(['api_order_id' => (string)$value['id'], 'user_integration_id' => $userIntegrationId, 'platform_id' => $this->platformId, 'order_type' => 'SO'])->first();
                                        if ($findOrder) {
                                            /* Prepare data for exception case which is handled by catch part */

                                            $recordInfo = json_encode(['shipment_status' => $status]);
                                            $recordId = $findOrder->id;
                                            /* ------------------------- */
                                            $findOrder->shipment_status = $status;
                                            $findOrder->save();
                                        }
                                    }

                                    //update PlatformOrderShipment at the end
                                    if($updateShipmentDataTransfer) {
                                        foreach($updateShipmentDataTransfer as $key => $value) {
                                            $this->mobj->makeUpdate('platform_order_shipments', $value, ['id' => $key]);
                                        }
                                    }
                                    //end

                                }

                                $return_response = true;
                            } else {
                                $return_response = isset($response['response']) ? $response['response'] : 'API Error';
                            }
                        }
                    }


                    $flowEvent = "SHIPMENT";
                    $this->RetryQueryInformation($userIntegrationId, $this->platformId, $flowEvent, 10); //Retry record to process
                    /*-----------Stop Drop Ship-------------*/
                    $whereConditions = ['user_integration_id' => $userIntegrationId, 'platform_id' => $this->platformId, 'sync_status' => $sync_status, 'user_id' => $userId];

                    if (isset(\Config::get('apisettings.checkWHEventForDestPlatForOnGetShipmentInBP')[$destination_platform_id])) { //destination_platform_id like wayfair
                        if ($event == 'SHIPMENTONCREATE') {
                            $whereConditions['webhook_event'] = 'goods-out-note.created';
                        } else if ($event == 'SHIPMENT') {
                            $whereConditions['webhook_event'] = 'goods-out-note.modified.shipped';
                        }
                    }

                    $list = PlatformOrderShipment::select('shipment_id')->where($whereConditions)->whereIn('type', ['Shipment', 'Transfer'])->orderBy('shipment_id', 'asc')->take(25 - $DropShipmentCount)->get();

                    $shipment_ids = $list->pluck('shipment_id')->toArray();

                    if (!empty($shipment_ids) && count($shipment_ids) > 0) {
                        sort($shipment_ids);
                        $GoodsIDs = implode(',', $shipment_ids);
                        $response = $this->GetGoodsOutNotes($GoodsIDs, $userIntegrationId);
                        if (!empty($response) && isset($response['response']) && is_array($response['response'])) {

                            $deleteRow = $orderIds = [];

                            //store shipment data in array to update at the end
                            $updateShipmentData = [];

                            if (count($response['response']) > 0) {
                                foreach ($response['response'] as $key => $value) {
                                    if ($transferedOnly) {
                                        if (!$value['orderId'] && $value['transfer']) {
                                            app('App\Http\Controllers\Brightpearl\BrightPearlApiSubController')->SaveTransferedGoodsOutNotes($value, $key, $userId, $userIntegrationId);
                                            //Delete processed shipment row
                                            PlatformOrderShipment::where(['platform_id' => $this->platformId, 'user_integration_id' => $userIntegrationId, 'shipment_id' => (string)$key, 'type' => 'Shipment'])->delete();
                                        } else {
                                            /* push unused record shipment id */
                                            array_push($deleteRow, $key);
                                        }
                                    } else {
                                        $platform_order_id = $this->FindOrderID($value['orderId'], $userId, $this->platformId, $userIntegrationId);
                                        if ($platform_order_id) {
                                            /* Store Order IDs for checking order status */
                                            array_push($orderIds, $value['orderId']);
                                            $List = ['user_id' => $userId, 'platform_id' => $this->platformId, 'user_integration_id' => $userIntegrationId, 'sync_status' => 'Ready', 'order_id' => $value['orderId'], 'warehouse_id' => $value['warehouseId'], 'shipment_transfer' => $value['transfer'], 'shipment_status' => serialize($value['status']), 'boxes' => @$value['shipping']['boxes'], 'tracking_info' => @$value['shipping']['reference'], 'shipping_method' => @$value['shipping']['shippingMethodId'], 'realease_date' => @$value['releaseDate'], 'created_on' => $value['createdOn'], 'weight' => @$value['shipping']['weight'], 'created_by' => $value['createdBy'], 'tracking_url' => @$value['labelUri'], 'platform_order_id' => $platform_order_id];
                                            $platform_order_shipment = PlatformOrderShipment::select('id', 'sync_status')->where(['user_integration_id' => $userIntegrationId, 'platform_id' => $this->platformId, 'shipment_id' => (string)$key])->first();

                                            //if shipment find the make it Ready after get data
                                            if ($platform_order_shipment) {

                                                if ($platform_order_shipment->sync_status == 'Pending') {
                                                    // PlatformOrderShipment::where('id', $platform_order_shipment->id)->update($List);
                                                    $updateShipmentData[$platform_order_shipment->id] = $List;
                                                }

                                                $Items = [];
                                                foreach ($value['orderRows'] as $ikey => $ivalue) {
                                                    foreach ($ivalue as $isubvalue) {
                                                        $shipmentLine = PlatformOrderShipmentLine::where(['platform_order_shipment_id' => $platform_order_shipment->id, 'row_id' => $ikey])->count();
                                                        if (!$shipmentLine) {
                                                            array_push($Items, ['platform_order_shipment_id' => $platform_order_shipment->id, 'row_id' => $ikey, 'product_id' => $isubvalue['productId'], 'location_id' => $isubvalue['locationId'], 'quantity' => $isubvalue['quantity'], 'user_batch_reference' => @$isubvalue['userBatchReference']]);
                                                        }
                                                    }
                                                }

                                                if (!empty($Items)) {
                                                    $this->mobj->makeInsert('platform_order_shipment_lines', $Items);
                                                }
                                            }

                                        } else {
                                            /* push unused record shipment id */
                                            array_push($deleteRow, (string)$key);
                                        }
                                    }
                                }
                            } else {
                                /* Delete unused record if not match with order */
                                DB::table('platform_order_shipments')->where(['user_integration_id' => $userIntegrationId, 'platform_id' => $this->platformId])->whereIn('type', ['Shipment', 'Transfer'])
                                    ->where(function ($query) {
                                        return $query->where('sync_status', 'Pending')->orWhere('sync_status', 'Failed');
                                    })
                                    ->whereIn('shipment_id', $shipment_ids)->delete();
                            }

                            if (!empty($deleteRow)) {
                                /* Delete unused record if not match with order */
                                DB::table('platform_order_shipments')->where(['user_integration_id' => $userIntegrationId, 'platform_id' => $this->platformId])->whereIn('type', ['Shipment', 'Transfer'])
                                    ->where(function ($query) {
                                        return $query->where('sync_status', 'Pending')->orWhere('sync_status', 'Failed');
                                    })
                                    ->whereIn('shipment_id', $deleteRow)->delete();
                            }

                            if (!empty($orderIds)) {
                                $orderIds = array_unique($orderIds);
                                sort($orderIds);
                                $orderIds = implode(',', $orderIds);
                                sleep(1);

                                $response = $this->GetOrderDetails($orderIds, $userIntegrationId, $platform_account);
                                if (isset($response['response']) && !empty($response['response']) && is_array($response['response'])) {

                                    foreach ($response['response'] as $key => $value) {
                                        if ($value['shippingStatusCode'] == 'ASS') {
                                            $status = 'Ready';
                                        } elseif ($value['shippingStatusCode'] == 'SPS') {
                                            $status = 'Partial';
                                        } elseif ($value['shippingStatusCode'] == 'SNS') {
                                            $status = 'Pending';
                                        } elseif ($value['shippingStatusCode'] == 'NST') {
                                            $status = 'Failed';
                                        }
                                        $findOrder = PlatformOrder::select('id', 'shipment_status')->where(['api_order_id' => (string)$value['id'], 'user_integration_id' => $userIntegrationId, 'platform_id' => $this->platformId, 'order_type' => 'SO'])->first();
                                        if ($findOrder) {
                                            /* Prepare data for exception case which is handled by catch part */

                                            $recordInfo = json_encode(['shipment_status' => $status]);
                                            $recordId = $findOrder->id;
                                            /* ------------------------- */
                                            //shipontime = ready
                                            if ($event == "SHIPMENTONCREATE") {
                                                $findOrder->shipment_label_status = "Ready";
                                            } else {
                                                $findOrder->shipment_status = $status;
                                            }
                                            $findOrder->save();
                                        }
                                    }


                                    //update PlatformOrderShipment at the end
                                    if($updateShipmentData) {
                                        foreach($updateShipmentData as $key => $value) {
                                            PlatformOrderShipment::where('id', $key)->update($value);
                                        }
                                    }
                                    //end

                                }
                            }


                            $return_response = true;
                        } else {
                            $return_response = isset($response['response']) ? $response['response'] : 'API Error';
                        }
                    }
                }
            }
        } catch (\Exception $e) {
            Log::error($userIntegrationId . ' -> BrightPearlApiController -> GetShipment -> ' . $e->getMessage());
            if ($recordId) {
                $this->SaveQueryInformation($e->getMessage(), $recordId, $userIntegrationId, $this->platformId, $tableName, $flowEvent, $recordInfo); //save record in retry query information table
            }

            $return_response = $e->getMessage();
        }
        return $return_response;
    }

    /* Check Retry Query Records */
    private function RetryQueryInformation($user_integration_id, $platform_id, $flow_type, $limit = 10)
    {
        $allowCheckRecords = PlatformRetryQuery::where(["user_integration_id" => $user_integration_id, 'platform_id' => $platform_id, 'flow_type' => $flow_type])->take($limit)->get();
        if (count($allowCheckRecords)) { //if array has value greater than 0
            foreach ($allowCheckRecords as $value) {
                if ($value->record_id) {
                    $updateInfo = (array) json_decode($value->record_info); //convert json to array
                    if ($updateInfo) {
                        DB::table($value->table_name)->where('id', $value->record_id)->update($updateInfo); //update table information
                        $value->status = 1; //change status=0 to status=1
                        $value->save();
                    }
                }
            }
        }
    }

    /* Insert RetryQueryInformation */
    private function SaveQueryInformation($exception, $record_id, $user_integration_id, $platform_id, $table_name, $flow_type, $record_info)
    {

        if ($exception) {
            if (strpos($exception, 'platform_order') !== false) { //find platform_order in exception error
                PlatformRetryQuery::create(["user_integration_id" => $user_integration_id, 'platform_id' => $platform_id, "table_name" => $table_name, "record_id" => $record_id, "flow_type" => $flow_type, "record_info" => $record_info]);
            }
        }
    }

    /* Bill To | Sold To | ShipTo */
    public function GetOrderAndStoreDetails($userId, $userIntegrationId, $loop = true, $response, $account, $storeLineItems = true, $storeAddress = true, $customFields = false, $OrderKeyAndValues = [], $shipmentOrderLineIds = [], $warehouseAPIIds = [], $user_workflow_rule_id, $platform_workflow_rule_id)
    {
        if ($loop) {
            $order = $needToDeleteOrder = [];
            $mappedOrderStatus = $this->map->getMappedDataByName($userIntegrationId, null, "sorder_status_filter", ['api_id'], "regular", null, "multi", "source");
            $channelFilters = $this->map->getMappedDataByName($userIntegrationId, $platform_workflow_rule_id, "sorder_channel_filter", ['api_id'], 'regular', null, 'multiple');
            foreach ($response as $key => $value) {
                if ($channelFilters) {
                    if (isset($value['assignment']['current'])) {
                        $api_channel_id = isset($value['assignment']['current']['channelId']) && trim($value['assignment']['current']['channelId']) ? trim($value['assignment']['current']['channelId']) : null;
                        if (is_null($api_channel_id)) {
                            $needToDeleteOrder[] = $value['id'];
                            continue;
                        }
                        if (!in_array($api_channel_id, $channelFilters)) {
                            // filter the data according to order channel
                            if (isset($OrderKeyAndValues[$value['id']])) {
                                $needToDeleteOrder[] = $value['id'];
                            }
                            continue;
                        }
                    }
                }
                $ShipmentStatus = "Pending";
                if ($mappedOrderStatus) { // Check whether there are selected order status
                    if (!isset($value['orderStatus']['orderStatusId'])) {
                        continue;
                    }
                    if (in_array($value['orderStatus']['orderStatusId'], $mappedOrderStatus)) {
                        // filter the data according to order status and set ready for shipment status
                        $ShipmentStatus = "Ready";
                    }
                } else {
                    $ShipmentStatus = "Ready";
                }

                if (isset($OrderKeyAndValues[$value['id']])) { //check order id as key in array
                    $shipmentIdsArray = $OrderKeyAndValues[$value['id']];
                    if (count($shipmentIdsArray) > 0) {
                        foreach ($shipmentIdsArray as $shipmentKey => $shipmentValue) {

                            $platform_customer_id = app('App\Http\Controllers\Brightpearl\BrightPearlApiSubController')->SearchCustomer($userId, $userIntegrationId, $value['parties']['customer']['contactId'], $account);
                            $orderDetails = [
                                'user_id' => $userId,
                                'user_integration_id' => $userIntegrationId,
                                'platform_id' => $this->platformId,
                                'order_type' => "SO",
                                'api_order_id' => $value['id'],
                                'order_number' => trim($shipmentValue),
                                'platform_customer_id' => $platform_customer_id,
                                'warehouse_id' => @$value['warehouseId'],
                                'api_order_reference' => $value['reference'],
                                'order_status' => isset($value['orderStatus']['name']) ? $value['orderStatus']['name'] : null,
                                'order_date' => $value['placedOn'],
                                'api_pricelist_id' => @$value['priceListId'],
                                'api_order_payment_status' => strtolower($value['orderPaymentStatus']),
                                'currency' => isset($value['currency']['orderCurrencyCode']) ? $value['currency']['orderCurrencyCode'] : null,
                                'delivery_date' => isset($value['delivery']['deliveryDate']) ? $value['delivery']['deliveryDate'] : null,
                                'shipping_method' => isset($value['delivery']['shippingMethodId']) ? $value['delivery']['shippingMethodId'] : null,
                                'total_tax' => isset($value['totalValue']['taxAmount']) ? $value['totalValue']['taxAmount'] : 0,
                                'total_amount' => isset($value['totalValue']['total']) ? $value['totalValue']['total'] : 0,
                                'net_amount' => isset($value['totalValue']['net']) ? $value['totalValue']['net'] : 0,
                                'sync_status' => $ShipmentStatus,
                                'shipment_status' => $ShipmentStatus,
                            ];

                            $where = [
                                'user_id' => $userId,
                                'user_integration_id' => $userIntegrationId,
                                'platform_id' => $this->platformId,
                                'api_order_id' => $value['id'],
                                'order_number' => trim($shipmentValue),
                                'is_deleted' => 0,
                            ];
                            $exist = PlatformOrder::where($where)->first();
                            if ($exist) {
                                $platform_order_id = $exist->id;
                                $exist->shipment_status = "Ready";
                                $exist->sync_status = $ShipmentStatus;
                                $exist->currency= @$value['currency']['orderCurrencyCode'];
                                $exist->delivery_date =@$value['delivery']['deliveryDate'];
                                $exist->shipping_method =@$value['delivery']['shippingMethodId'];
                                $exist->warehouse_id = @$value['warehouseId'];
                                $exist->api_order_reference = @$value['reference'];
                                $exist->api_pricelist_id = @$value['priceListId'];
                                $exist->save();

                                $order_number = trim($exist->order_number);
                                $order[$order_number] = $exist->id;
                                if ($storeLineItems) { //If you need to store line items

                                    $additionalAccountInfo = PlatformAccountAdditionalInfo::where([['account_id', '=', $account->id], ['user_integration_id', '=', $userIntegrationId]])->select('account_currency_code', 'account_product_lenght_unit', 'account_product_weight_unit', 'account_shipping_nominal_code', 'account_discount_nominal_code', 'account_sale_nominal_code', 'account_purchase_nominal_code', 'account_timezone', 'account_tax_scheme', 'account_giftcard_nominal_code')->first();

                                    if ($additionalAccountInfo) { //Account Detail must be there
                                        if (!empty($value['orderRows'])) {
                                            foreach ($value['orderRows'] as $key => $line) {
                                                if (isset($line['nominalCode'])) { // storing the shipping line only for the first sequence order note
                                                    if (BrightpearlServices::getBPLineItemType($additionalAccountInfo, $line['nominalCode']) == 'SHIPPING') {
                                                        $shipmentValueArr = explode("/", $shipmentValue);
                                                        if (count($shipmentValueArr) > 1 && (int) $shipmentValueArr[1] > 1) {
                                                            continue;
                                                        }
                                                    } elseif (BrightpearlServices::getBPLineItemType($additionalAccountInfo, $line['nominalCode']) == 'ITEM') {
                                                        if (isset($shipmentOrderLineIds[$shipmentValue]) && count($shipmentOrderLineIds[$shipmentValue]) > 0) { // only store the order line which are present in the shipment line
                                                            if (!in_array($key, $shipmentOrderLineIds[$shipmentValue])) {
                                                                continue;
                                                            }
                                                        }
                                                    }
                                                }
                                                // elseif(isset($shipmentOrderLineIds[$shipmentValue]) && count($shipmentOrderLineIds[$shipmentValue]) > 0) { // only store the order line which are present in the shipment line
                                                //     if(!in_array($key, $shipmentOrderLineIds[$shipmentValue])) {
                                                //         continue;
                                                //     }
                                                // }
                                                $lineItem = [
                                                    'platform_order_id' => $platform_order_id,
                                                    'api_order_line_id' => $key,
                                                    'api_product_id' => $line['productId'],
                                                    'product_name' => isset($line['productName']) ? $line['productName'] : null,
                                                    'sku' => isset($line['productSku']) ? $line['productSku'] : null,
                                                    'qty' => isset($line['quantity']['magnitude']) ? $line['quantity']['magnitude'] : 0,
                                                    'unit_price' => isset($line['itemCost']['value']) ? $line['itemCost']['value'] : 0,
                                                    'price' => @$line['productPrice']['value'] ? @$line['productPrice']['value'] : 0,
                                                    'total' => isset($line['rowValue']['rowNet']['value']) ? $line['rowValue']['rowNet']['value'] : 0,
                                                    'total_tax' => isset($line['rowValue']['rowTax']['value']) ? $line['rowValue']['rowTax']['value'] : 0,
                                                    'subtotal' => isset($line['rowValue']['rowNet']['value']) ? $line['rowValue']['rowNet']['value'] : 0,
                                                    'subtotal_tax' => isset($line['rowValue']['rowTax']['value']) ? $line['rowValue']['rowTax']['value'] : 0,
                                                    'taxes' => isset($line['rowValue']['taxClassId']) ? $line['rowValue']['taxClassId'] : null,
                                                    'api_code' => isset($line['nominalCode']) ? $line['nominalCode'] : null,
                                                    'row_type' => isset($line['nominalCode']) ? BrightpearlServices::getBPLineItemType($additionalAccountInfo, $line['nominalCode']) : 'ITEM',
                                                ];

                                                $where = [
                                                    'platform_order_id' => $platform_order_id, 'api_order_line_id' => $key,
                                                ];
                                                PlatformOrderLine::updateOrCreate($where, $lineItem);
                                            }
                                        }
                                    }
                                }
                                if ($storeAddress) { //If you need to store addess

                                    $delivery = isset($value['parties']['delivery']) ? $value['parties']['delivery'] : null;
                                    if (is_array($delivery)) {
                                        $del = [
                                            'platform_order_id' => $platform_order_id,
                                            'address_name' => isset($delivery['addressFullName']) ? $delivery['addressFullName'] : null,
                                            'company' => isset($delivery['companyName']) ? $delivery['companyName'] : null,
                                            'address1' => isset($delivery['addressLine1']) ? $delivery['addressLine1'] : null,
                                            'address2' => isset($delivery['addressLine2']) ? $delivery['addressLine2'] : null,
                                            'address3' => isset($delivery['addressLine3']) ? $delivery['addressLine3'] : null,
                                            'address4' => isset($delivery['addressLine4']) ? $delivery['addressLine4'] : null,
                                            'city' => isset($delivery['addressLine3']) ? $delivery['addressLine3'] : null,
                                            'state' => isset($delivery['addressLine4']) ? $delivery['addressLine4'] : null,
                                            'postal_code' => isset($delivery['postalCode']) ? $delivery['postalCode'] : null,
                                            'country' => isset($delivery['countryIsoCode']) ? $delivery['countryIsoCode'] : null,
                                            'phone_number' => isset($delivery['telephone']) ? $delivery['telephone'] : null,
                                            'email' => isset($delivery['email']) ? $delivery['email'] : '',
                                            'address_type' => "shipping",
                                        ];
                                        PlatformOrderAddress::updateOrCreate(['platform_order_id' => $platform_order_id, 'address_type' => "shipping"],$del);
                                    }
                                    $customer = isset($value['parties']['customer']) ? $value['parties']['customer'] : null;
                                    if (is_array($customer)) {
                                        $cust = [
                                            'platform_order_id' => $platform_order_id,
                                            'address_name' => isset($customer['addressFullName']) ? $customer['addressFullName'] : null,
                                            'company' => isset($customer['companyName']) ? $customer['companyName'] : null,
                                            'address1' => isset($customer['addressLine1']) ? $customer['addressLine1'] : null,
                                            'address2' => isset($customer['addressLine2']) ? $customer['addressLine2'] : null,
                                            'address3' => isset($customer['addressLine3']) ? $customer['addressLine3'] : null,
                                            'address4' => isset($customer['addressLine4']) ? $customer['addressLine4'] : null,
                                            'city' => isset($customer['addressLine3']) ? $customer['addressLine3'] : null,
                                            'state' => isset($customer['addressLine4']) ? $customer['addressLine4'] : null,
                                            'postal_code' => isset($customer['postalCode']) ? $customer['postalCode'] : null,
                                            'country' => isset($customer['countryIsoCode']) ? $customer['countryIsoCode'] : null,
                                            'phone_number' => isset($customer['telephone']) ? $customer['telephone'] : null,
                                            'email' => isset($customer['email']) ? $customer['email'] : '',
                                            'address_type' => "customer",
                                        ];
                                        PlatformOrderAddress::updateOrCreate(['platform_order_id' => $platform_order_id, 'address_type' => "customer"],$cust);

                                        /* Save Customer Detail In Customer Table and link primary id in order table*/
                                        $updateCustomer = PlatformCustomer::updateOrCreate([
                                            'user_id' => $userId,
                                            'user_integration_id' => $userIntegrationId,
                                            'platform_id' => $this->platformId,
                                            'api_customer_id' => (string)$customer['contactId'],
                                        ], [
                                            'user_id' => $userId,
                                            'user_integration_id' => $userIntegrationId,
                                            'platform_id' => $this->platformId,
                                            'api_customer_id' => $customer['contactId'],
                                            'email' => isset($customer['email']) ? $customer['email'] : null,
                                            'customer_name' => $customer['addressFullName'],
                                        ]);
                                        if (isset($updateCustomer->id)) {
                                            PlatformOrder::where('id', $platform_order_id)->update(['platform_customer_id' => $updateCustomer->id]);
                                        }
                                    }
                                    $billing = isset($value['parties']['billing']) ? $value['parties']['billing'] : null;
                                    if (is_array($billing)) {
                                        $bill = [
                                            'platform_order_id' => $platform_order_id,
                                            'address_name' => isset($billing['addressFullName']) ? $billing['addressFullName'] : null,
                                            'company' => isset($billing['companyName']) ? $billing['companyName'] : null,
                                            'address1' => isset($billing['addressLine1']) ? $billing['addressLine1'] : null,
                                            'address2' => isset($billing['addressLine2']) ? $billing['addressLine2'] : null,
                                            'address3' => isset($billing['addressLine3']) ? $billing['addressLine3'] : null,
                                            'address4' => isset($billing['addressLine4']) ? $billing['addressLine4'] : null,
                                            'city' => isset($billing['addressLine3']) ? $billing['addressLine3'] : null,
                                            'state' => isset($billing['addressLine4']) ? $billing['addressLine4'] : null,
                                            'postal_code' => isset($billing['postalCode']) ? $billing['postalCode'] : null,
                                            'country' => isset($billing['countryIsoCode']) ? $billing['countryIsoCode'] : null,
                                            'phone_number' => isset($billing['telephone']) ? $billing['telephone'] : null,
                                            'email' => isset($billing['email']) ? $billing['email'] : '',
                                            'address_type' => "billing",
                                        ];
                                        PlatformOrderAddress::updateOrCreate(['platform_order_id' => $platform_order_id, 'address_type' => "billing"],$bill);

                                    }


                                    // to store the shippedFrom address of the warehouse
                                    $warehouseObject = PlatformObject::where(['name' => 'warehouse', 'status' => 1])->select('id')->first();
                                    if ($warehouseObject) {
                                        $warehouse = PlatformObjectData::where([
                                            //'user_id' => $userId,
                                            'user_integration_id' => $userIntegrationId,
                                            'platform_id' => $this->platformId,
                                            'platform_object_id' => $warehouseObject->id,
                                            'api_id' => isset($warehouseAPIIds[$shipmentValue]) ? $warehouseAPIIds[$shipmentValue] : null,
                                        ])->select('id', 'api_id', 'name')->first();
                                        if ($warehouse) {
                                            $warehouseAddress = PlatformObjectDataAdditionalInformation::where([
                                                'user_integration_id' => $userIntegrationId,
                                                'platform_object_data_id' => $warehouse->id,
                                            ])->first();
                                            if ($warehouseAddress) {
                                                $shippedFromArr = [
                                                    'platform_order_id' => $platform_order_id,
                                                    'address_name' => $warehouse->name,
                                                    'company' => $warehouse->name,
                                                    'address1' => $warehouseAddress->address1,
                                                    'city' => $warehouseAddress->city,
                                                    'state' => $warehouseAddress->state,
                                                    'country' => $warehouseAddress->country,
                                                    'postal_code' => $warehouseAddress->postal_code,
                                                    'address_type' => "shippedFrom",
                                                ];
                                                $this->mobj->makeInsert('platform_order_address', $shippedFromArr);
                                            }
                                        }
                                    }
                                }

                                $this->mobj->makeUpdate('platform_custom_field_values', ['status' => 0], ['record_id' => $platform_order_id, 'user_integration_id' => $userIntegrationId, 'platform_id' => $this->platformId]);
                                if ($customFields) {
                                    // If you need custom fields pass true in parameter
                                    $customFields = $value['customFields'];
                                    $ObjectId = $this->helper->getObjectId('sales_order');

                                    foreach ($customFields as $code => $customField) {
                                        $findRecord = $this->mobj->getFirstResultByConditions('platform_fields', ['platform_id' => $this->platformId, 'user_integration_id' => $userIntegrationId, 'field_type' => 'custom', 'name' => $code, 'platform_object_id' => $ObjectId, 'status' => 1], ['id']);
                                        if (!empty($findRecord->id)) {
                                            $customFieldValue = '';
                                            if (is_array($customField)) {
                                                $customFieldValue = @$customField['value'];
                                            } else {
                                                $customFieldValue = $customField;
                                            }
                                            $fields = array('platform_field_id' => $findRecord->id, 'user_integration_id' => $userIntegrationId, 'platform_id' => $this->platformId, 'field_value' => $customFieldValue, 'record_id' => $platform_order_id, 'status' => 1);
                                            $platform_custom_field_values = $this->mobj->getFirstResultByConditions('platform_custom_field_values', ['record_id' => $platform_order_id, 'platform_field_id' => $findRecord->id, 'user_integration_id' => $userIntegrationId, 'platform_id' => $this->platformId], ['id']);
                                            if ($platform_custom_field_values) {
                                                $this->mobj->makeUpdate('platform_custom_field_values', $fields, ['id' => $platform_custom_field_values->id]);
                                            } else {
                                                $this->mobj->makeInsert('platform_custom_field_values', $fields);
                                            }
                                        }
                                    }
                                }
                            } else {
                                $platform_order_id = $this->mobj->makeInsertGetId('platform_order', $orderDetails); //Order Insert ID
                                $order[$shipmentValue] = $platform_order_id;
                                if ($storeLineItems) { //If you need to store line items

                                    $additionalAccountInfo = PlatformAccountAdditionalInfo::where([['account_id', '=', $account->id], ['user_integration_id', '=', $userIntegrationId]])->select('account_currency_code', 'account_product_lenght_unit', 'account_product_weight_unit', 'account_shipping_nominal_code', 'account_discount_nominal_code', 'account_sale_nominal_code', 'account_purchase_nominal_code', 'account_timezone', 'account_tax_scheme', 'account_giftcard_nominal_code')->first();

                                    if ($additionalAccountInfo) { //Account Detail must be there
                                        if (!empty($value['orderRows'])) {
                                            foreach ($value['orderRows'] as $key => $line) {
                                                if (isset($line['nominalCode'])) { // storing the shipping line only for the first sequence order note
                                                    if (BrightpearlServices::getBPLineItemType($additionalAccountInfo, $line['nominalCode']) == 'SHIPPING') {
                                                        $shipmentValueArr = explode("/", $shipmentValue);
                                                        if (count($shipmentValueArr) > 1 && (int) $shipmentValueArr[1] > 1) {
                                                            continue;
                                                        }
                                                    } elseif (BrightpearlServices::getBPLineItemType($additionalAccountInfo, $line['nominalCode']) == 'ITEM') {
                                                        if (isset($shipmentOrderLineIds[$shipmentValue]) && count($shipmentOrderLineIds[$shipmentValue]) > 0) { // only store the order line which are present in the shipment line
                                                            if (!in_array($key, $shipmentOrderLineIds[$shipmentValue])) {
                                                                continue;
                                                            }
                                                        }
                                                    }
                                                }
                                                // elseif(isset($shipmentOrderLineIds[$shipmentValue]) && count($shipmentOrderLineIds[$shipmentValue]) > 0) { // only store the order line which are present in the shipment line
                                                //     if(!in_array($key, $shipmentOrderLineIds[$shipmentValue])) {
                                                //         continue;
                                                //     }
                                                // }
                                                $lineItem = [
                                                    'platform_order_id' => $platform_order_id,
                                                    'api_order_line_id' => $key,
                                                    'api_product_id' => $line['productId'],
                                                    'product_name' => isset($line['productName']) ? $line['productName'] : null,
                                                    'sku' => isset($line['productSku']) ? $line['productSku'] : null,
                                                    'qty' => isset($line['quantity']['magnitude']) ? $line['quantity']['magnitude'] : 0,
                                                    'unit_price' => isset($line['itemCost']['value']) ? $line['itemCost']['value'] : 0,
                                                    'price' => @$line['productPrice']['value'] ? @$line['productPrice']['value'] : 0,
                                                    'total' => isset($line['rowValue']['rowNet']['value']) ? $line['rowValue']['rowNet']['value'] : 0,
                                                    'total_tax' => isset($line['rowValue']['rowTax']['value']) ? $line['rowValue']['rowTax']['value'] : 0,
                                                    'subtotal' => isset($line['rowValue']['rowNet']['value']) ? $line['rowValue']['rowNet']['value'] : 0,
                                                    'subtotal_tax' => isset($line['rowValue']['rowTax']['value']) ? $line['rowValue']['rowTax']['value'] : 0,
                                                    'taxes' => isset($line['rowValue']['taxClassId']) ? $line['rowValue']['taxClassId'] : null,
                                                    'api_code' => isset($line['nominalCode']) ? $line['nominalCode'] : null,
                                                    'row_type' => isset($line['nominalCode']) ? BrightpearlServices::getBPLineItemType($additionalAccountInfo, $line['nominalCode']) : 'ITEM',
                                                ];

                                                $where = [
                                                    'platform_order_id' => $platform_order_id, 'api_order_line_id' => $key,
                                                ];
                                                PlatformOrderLine::updateOrCreate($where, $lineItem);
                                            }
                                        }
                                    }
                                }
                                if ($storeAddress) { //If you need to store addess

                                    $delivery = isset($value['parties']['delivery']) ? $value['parties']['delivery'] : null;
                                    if (is_array($delivery)) {
                                        $del = [
                                            'platform_order_id' => $platform_order_id,
                                            'address_name' => isset($delivery['addressFullName']) ? $delivery['addressFullName'] : null,
                                            'company' => isset($delivery['companyName']) ? $delivery['companyName'] : null,
                                            'address1' => isset($delivery['addressLine1']) ? $delivery['addressLine1'] : null,
                                            'address2' => isset($delivery['addressLine2']) ? $delivery['addressLine2'] : null,
                                            'address3' => isset($delivery['addressLine3']) ? $delivery['addressLine3'] : null,
                                            'address4' => isset($delivery['addressLine4']) ? $delivery['addressLine4'] : null,
                                            'city' => isset($delivery['addressLine3']) ? $delivery['addressLine3'] : null,
                                            'state' => isset($delivery['addressLine4']) ? $delivery['addressLine4'] : null,
                                            'postal_code' => isset($delivery['postalCode']) ? $delivery['postalCode'] : null,
                                            'country' => isset($delivery['countryIsoCode']) ? $delivery['countryIsoCode'] : null,
                                            'phone_number' => isset($delivery['telephone']) ? $delivery['telephone'] : null,
                                            'email' => isset($delivery['email']) ? $delivery['email'] : '',
                                            'address_type' => "shipping",
                                        ];
                                        PlatformOrderAddress::updateOrCreate(['platform_order_id' => $platform_order_id, 'address_type' => "shipping"],$del);
                                    }
                                    $customer = isset($value['parties']['customer']) ? $value['parties']['customer'] : null;
                                    if (is_array($customer)) {
                                        $cust = [
                                            'platform_order_id' => $platform_order_id,
                                            'address_name' => isset($customer['addressFullName']) ? $customer['addressFullName'] : null,
                                            'company' => isset($customer['companyName']) ? $customer['companyName'] : null,
                                            'address1' => isset($customer['addressLine1']) ? $customer['addressLine1'] : null,
                                            'address2' => isset($customer['addressLine2']) ? $customer['addressLine2'] : null,
                                            'address3' => isset($customer['addressLine3']) ? $customer['addressLine3'] : null,
                                            'address4' => isset($customer['addressLine4']) ? $customer['addressLine4'] : null,
                                            'city' => isset($customer['addressLine3']) ? $customer['addressLine3'] : null,
                                            'state' => isset($customer['addressLine4']) ? $customer['addressLine4'] : null,
                                            'postal_code' => isset($customer['postalCode']) ? $customer['postalCode'] : null,
                                            'country' => isset($customer['countryIsoCode']) ? $customer['countryIsoCode'] : null,
                                            'phone_number' => isset($customer['telephone']) ? $customer['telephone'] : null,
                                            'email' => isset($customer['email']) ? $customer['email'] : '',
                                            'address_type' => "customer",
                                        ];
                                        PlatformOrderAddress::updateOrCreate(['platform_order_id' => $platform_order_id, 'address_type' => "customer"],$cust);

                                        /* Save Customer Detail In Customer Table and link primary id in order table*/
                                        $updateCustomer = PlatformCustomer::updateOrCreate([
                                            'user_id' => $userId,
                                            'user_integration_id' => $userIntegrationId,
                                            'platform_id' => $this->platformId,
                                            'api_customer_id' => $customer['contactId'],
                                        ], [
                                            'user_id' => $userId,
                                            'user_integration_id' => $userIntegrationId,
                                            'platform_id' => $this->platformId,
                                            'api_customer_id' => $customer['contactId'],
                                            'email' => isset($customer['email']) ? $customer['email'] : null,
                                            'customer_name' => $customer['addressFullName'],
                                        ]);
                                        if (isset($updateCustomer->id)) {
                                            PlatformOrder::where('id', $platform_order_id)->update(['platform_customer_id' => $updateCustomer->id]);
                                        }
                                    }
                                    $billing = isset($value['parties']['billing']) ? $value['parties']['billing'] : null;
                                    if (is_array($billing)) {
                                        $bill = [
                                            'platform_order_id' => $platform_order_id,
                                            'address_name' => isset($billing['addressFullName']) ? $billing['addressFullName'] : null,
                                            'company' => isset($billing['companyName']) ? $billing['companyName'] : null,
                                            'address1' => isset($billing['addressLine1']) ? $billing['addressLine1'] : null,
                                            'address2' => isset($billing['addressLine2']) ? $billing['addressLine2'] : null,
                                            'address3' => isset($billing['addressLine3']) ? $billing['addressLine3'] : null,
                                            'address4' => isset($billing['addressLine4']) ? $billing['addressLine4'] : null,
                                            'city' => isset($billing['addressLine3']) ? $billing['addressLine3'] : null,
                                            'state' => isset($billing['addressLine4']) ? $billing['addressLine4'] : null,
                                            'postal_code' => isset($billing['postalCode']) ? $billing['postalCode'] : null,
                                            'country' => isset($billing['countryIsoCode']) ? $billing['countryIsoCode'] : null,
                                            'phone_number' => isset($billing['telephone']) ? $billing['telephone'] : null,
                                            'email' => isset($billing['email']) ? $billing['email'] : '',
                                            'address_type' => "billing",
                                        ];
                                        PlatformOrderAddress::updateOrCreate(['platform_order_id' => $platform_order_id, 'address_type' => "billing"],$bill);

                                    }


                                    // to store the shippedFrom address of the warehouse
                                    $warehouseObject = PlatformObject::where(['name' => 'warehouse', 'status' => 1])->select('id')->first();
                                    if ($warehouseObject) {
                                        $warehouse = PlatformObjectData::where([
                                            //'user_id' => $userId,
                                            'user_integration_id' => $userIntegrationId,
                                            'platform_id' => $this->platformId,
                                            'platform_object_id' => $warehouseObject->id,
                                            'api_id' => isset($warehouseAPIIds[$shipmentValue]) ? $warehouseAPIIds[$shipmentValue] : null,
                                        ])->select('id', 'api_id', 'name')->first();
                                        if ($warehouse) {
                                            $warehouseAddress = PlatformObjectDataAdditionalInformation::where([
                                                'user_integration_id' => $userIntegrationId,
                                                'platform_object_data_id' => $warehouse->id,
                                            ])->first();
                                            if ($warehouseAddress) {
                                                $shippedFromArr = [
                                                    'platform_order_id' => $platform_order_id,
                                                    'address_name' => $warehouse->name,
                                                    'company' => $warehouse->name,
                                                    'address1' => $warehouseAddress->address1,
                                                    'city' => $warehouseAddress->city,
                                                    'state' => $warehouseAddress->state,
                                                    'country' => $warehouseAddress->country,
                                                    'postal_code' => $warehouseAddress->postal_code,
                                                    'address_type' => "shippedFrom",
                                                ];
                                                $this->mobj->makeInsert('platform_order_address', $shippedFromArr);
                                            }
                                        }
                                    }
                                }

                                $this->mobj->makeUpdate('platform_custom_field_values', ['status' => 0], ['record_id' => $platform_order_id, 'user_integration_id' => $userIntegrationId, 'platform_id' => $this->platformId]);
                                if ($customFields) {
                                    // If you need custom fields pass true in parameter
                                    $customFields = $value['customFields'];
                                    $ObjectId = $this->helper->getObjectId('sales_order');

                                    foreach ($customFields as $code => $customField) {
                                        $findRecord = $this->mobj->getFirstResultByConditions('platform_fields', ['platform_id' => $this->platformId, 'user_integration_id' => $userIntegrationId, 'field_type' => 'custom', 'name' => $code, 'platform_object_id' => $ObjectId, 'status' => 1], ['id']);
                                        if (!empty($findRecord->id)) {
                                            $customFieldValue = '';
                                            if (is_array($customField)) {
                                                $customFieldValue = @$customField['value'];
                                            } else {
                                                $customFieldValue = $customField;
                                            }
                                            $fields = array('platform_field_id' => $findRecord->id, 'user_integration_id' => $userIntegrationId, 'platform_id' => $this->platformId, 'field_value' => $customFieldValue, 'record_id' => $platform_order_id, 'status' => 1);
                                            $platform_custom_field_values = $this->mobj->getFirstResultByConditions('platform_custom_field_values', ['record_id' => $platform_order_id, 'platform_field_id' => $findRecord->id, 'user_integration_id' => $userIntegrationId, 'platform_id' => $this->platformId], ['id']);
                                            if ($platform_custom_field_values) {
                                                $this->mobj->makeUpdate('platform_custom_field_values', $fields, ['id' => $platform_custom_field_values->id]);
                                            } else {
                                                $this->mobj->makeInsert('platform_custom_field_values', $fields);
                                            }
                                        }
                                    }
                                }
                            }

                            if ($platform_order_id) {
                                if (isset($value['assignment']['current'])) {
                                    $extra_order_details = [
                                        'platform_order_id' => $platform_order_id,
                                        'api_channel_id' => isset($value['assignment']['current']['channelId']) ? $value['assignment']['current']['channelId'] : null,
                                        'api_owner_id' => isset($value['assignment']['current']['staffOwnerContactId']) ? $value['assignment']['current']['staffOwnerContactId'] : null,
                                    ];
                                    PlatformOrderAdditionalInformation::updateOrCreate(['platform_order_id' => $platform_order_id], $extra_order_details);
                                }
                            }
                        }
                    }
                }
            }
        }
        return ['order' => $order, 'needToDeleteOrder' => $needToDeleteOrder];
    }

    /* Get Sales Order || For Only good out note.created and order not created from our panel */
    public function GetSOGoodOutNoteCreated($userId = null, $userIntegrationId = null, $destination_platform_id = null, array $wooksType, $attempt = 1, $is_initial_syn, $sync_status = "Pending", $transferedOnly = false, $user_workflow_rule_id = null, $platform_workflow_rule_id = null)
    {
        // Log::info( "GetSOGoodOutNoteCreated:- wooksType: ".json_encode( $wooksType )." attempt: ".$attempt." is_initial_syn: ".$is_initial_syn." sync_status: ".$sync_status." transferedOnly: ".$transferedOnly." user_workflow_rule_id: ".$user_workflow_rule_id." platform_workflow_rule_id: ".$platform_workflow_rule_id );
        $return_response = false;
        $limit = 20;
        try {
            if ($is_initial_syn) {
                if (is_array($wooksType) && count($wooksType)) {
                    return $this->CreateOrDeleteWebhook($userId, $userIntegrationId, $wooksType, $attempt, $destination_platform_id);
                } else {
                    return true;
                }
            } elseif ($is_initial_syn == 0) {
                $account = $this->mobj->getPlatformAccountByUserIntegration($userIntegrationId, $this->platformId, ['app_id', 'app_secret', 'platform_id', 'id', 'user_id', 'api_domain', 'access_token', 'account_name']);
                if ($account) {
                    if ($attempt == 1) {
                        $list = PlatformOrderShipment::where([
                            [
                                'platform_id', '=', $this->platformId,
                            ], [
                                'user_integration_id', '=', $userIntegrationId,
                            ], [
                                'sync_status', '=', $sync_status,
                            ],
                        ])->orderBy('shipment_id', 'ASC')->take($limit)->pluck("id","shipment_id")->toArray();

                        if (!empty($list) && count($list) > 0) {
                            $shipmentId=array_keys($list);
                            $shipmentPrimaryIds=array_values($list);
                            sort($shipmentId);
                            $convertIndexArray = $list;
                            $GoodsIDs = implode(",", $shipmentId);
                            $response = $this->GetGoodsOutNotes($GoodsIDs, $userIntegrationId);
                            // Log::channel('webhook')->info("GetGoodsOutNotes ProcessListBefore  -" . $userId . " Integration " . $userIntegrationId . " Response: " . print_r($list, true) . " Created Date : " . date('Y-m-d H:i:s'));
                            if (isset($response['response']) && is_array($response['response']) && !empty($response['response'])) {
                                // Log::channel('webhook')->info("GetGoodsOutNoteProcessListAfter  -" . $userId . " Integration " . $userIntegrationId . " Response: " . print_r($response['response'], true) . " Created Date : " . date('Y-m-d H:i:s'));
                                $BPOrderIDs = $ShipmentArr = $UnmatchedRecord = $matchedRecord = $shipmentOrderLineIds = $warehouseAPIIds = $deleteShipment = [];
                                $mappedWarehouseIds = $this->map->getMappedDataByName($userIntegrationId, null, "order_warehouse_filter", ['api_id'], "regular", null, "multi", "source"); // Get the warehouse api id selected for the integration as multiselect
                                foreach ($response['response'] as $key => $value) {
                                    if (isset($convertIndexArray[$key])) { //here check received shipment id in converted indexed array either set or not if not
                                        $matchedRecord[] = $convertIndexArray[$key];
                                        $find = PlatformOrderShipment::where('id',$convertIndexArray[$key])->first();
                                        if ($find) {
                                            if ($mappedWarehouseIds) { // Check whether there are selected warehouse
                                                if (!in_array($value['warehouseId'], $mappedWarehouseIds)) { // filter the data according to warehouse
                                                    $UnmatchedRecord[] = $find->id;
                                                    continue;
                                                }
                                            }
                                            $Items = [];
                                            if ($transferedOnly) {
                                                if (!$value['orderId'] && $value['transfer']) {
                                                    $find->sync_status = "Ready";
                                                    $find->warehouse_id = $value['warehouseId'];
                                                    $find->to_warehouse_id = $value['targetWarehouseId'];
                                                    $find->shipment_transfer = $value['transfer'];
                                                    $find->shipment_status = serialize($value['status']);
                                                    $find->tracking_info = isset($value['shipping']['reference']) ? $value['shipping']['reference'] : null;
                                                    $find->shipping_method = isset($value['shipping']['shippingMethodId']) ? $value['shipping']['shippingMethodId'] : null;
                                                    $find->realease_date = isset($value['releaseDate']) ? $value['releaseDate'] : null;
                                                    $find->created_on = $value['createdOn'];
                                                    $find->type = PlatformRecordType::TRANSFER;
                                                    $find->created_by = $value['createdBy'];
                                                    $find->stock_transfer_id = $value['stockTransferId'];
                                                    $find->event_owner_id = isset($value['events'][0]['eventOwnerId']) ? $value['events'][0]['eventOwnerId'] : null;
                                                    $find->tracking_url = isset($value['labelUri']) ? $value['labelUri'] : null;
                                                    $find->save();
                                                    if (!empty($value['transferRows'])) {
                                                        foreach ($value['transferRows'] as $ikey => $ivalue) {
                                                            $findLine = PlatformOrderShipmentLine::where(['platform_order_shipment_id'=> $find->id,'product_id'=>$ivalue['productId']])->first();
                                                            if (!$findLine) {
                                                                array_push($Items, [
                                                                    'platform_order_shipment_id' => $find->id,
                                                                    'product_id' => $ivalue['productId'],
                                                                    'location_id' => $ivalue['locationId'],
                                                                    'quantity' => $ivalue['quantity']
                                                                ]);
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if (!in_array(
                                                        $destination_platform_id,
                                                        Config::get('apisettings.AllowShipmentAndTransferTypeInBP')
                                                    )) {
                                                        /* push unused record shipment id */
                                                        array_push($UnmatchedRecord, $key);
                                                    }
                                                }
                                            } else {
                                                if (isset($value['orderId']) && $value['orderId'] != 0 && isset($value['sequence']) && !$value['transfer']) {
                                                    $customOrder=trim($value['orderId'] . "/" . $value['sequence']);
                                                    /* Store BP Order IDs */
                                                    if ($find->order_id && $find->shipment_sequence_number) {
                                                        $ShipmentArr[$find->id] = trim($find->order_id . "/" . $find->shipment_sequence_number);
                                                    } else {
                                                        $ShipmentArr[$find->id] =$customOrder;
                                                    }
                                                    /* Push the shipment primary ids to delete the records after channel filter */
                                                    $deleteShipment[$value['orderId']][] = $find->id;
                                                    if (isset($BPOrderIDs[$value['orderId']])) {
                                                        $BPOrderIDs[$value['orderId']][] = $customOrder;
                                                    } else {
                                                        $BPOrderIDs[$value['orderId']][] = $customOrder;
                                                    }

                                                    $warehouseAPIIds[$customOrder] = $value['warehouseId'];

                                                    //$find->sync_status = "Ready";
                                                    $find->order_id = $value['orderId'];
                                                    $find->warehouse_id = $value['warehouseId'];
                                                    $find->shipment_transfer = $value['transfer'];
                                                    $find->shipment_sequence_number = $value['sequence'];
                                                    $find->shipment_status = serialize($value['status']);
                                                    $find->boxes = isset($value['shipping']['boxes']) ? $value['shipping']['boxes'] : null;
                                                    $find->tracking_info = isset($value['shipping']['reference']) ? $value['shipping']['reference'] : null;
                                                    $find->shipping_method = isset($value['shipping']['shippingMethodId']) ? $value['shipping']['shippingMethodId'] : null;
                                                    $find->realease_date = isset($value['releaseDate']) ? $value['releaseDate'] : null;
                                                    $find->created_on = $value['createdOn'];
                                                    $find->weight = isset($value['shipping']['weight']) ? $value['shipping']['weight'] : null;
                                                    $find->created_by = $value['createdBy'];
                                                    $find->event_owner_id = isset($value['events'][0]['eventOwnerId']) ? $value['events'][0]['eventOwnerId'] : null;
                                                    $find->tracking_url = isset($value['labelUri']) ? $value['labelUri'] : null;
                                                    $find->platform_order_id = null;
                                                    $find->type = PlatformRecordType::SHIPMENT;
                                                    $find->save();

                                                    if (!empty($value['orderRows'])) {
                                                        foreach ($value['orderRows'] as $ikey => $ivalue) {
                                                            foreach ($ivalue as $isubkey => $isubvalue) {
                                                                $findLine = PlatformOrderShipmentLine::where(['platform_order_shipment_id'=> $find->id, 'row_id'=> $ikey,'product_id'=> $isubvalue['productId']])->first();
                                                                if (!$findLine) {
                                                                    array_push($Items, [
                                                                        'platform_order_shipment_id' => $find->id,
                                                                        'row_id' => $ikey,
                                                                        'product_id' => $isubvalue['productId'],
                                                                        'location_id' => $isubvalue['locationId'],
                                                                        'quantity' => $isubvalue['quantity'],
                                                                        'user_batch_reference' => isset($isubvalue['userBatchReference']) ? $isubvalue['userBatchReference'] : null,
                                                                    ]);
                                                                    // store the ids of the shipment line items for storing the order line item
                                                                    $skey = $customOrder;
                                                                    $shipmentOrderLineIds[$skey][] = $ikey;
                                                                }
                                                            }
                                                        }
                                                    }
                                                } else {
                                                    if (!in_array($destination_platform_id, Config::get('apisettings.AllowShipmentAndTransferTypeInBP'))) {
                                                        //When order id is zero and sequence is missing
                                                        $UnmatchedRecord[] = $find->id;
                                                    }
                                                }
                                            }
                                            if (!empty($Items)) {
                                                $this->mobj->makeInsert(
                                                    'platform_order_shipment_lines',
                                                    $Items
                                                );
                                            }
                                        }
                                    }
                                }
                               if (count($matchedRecord)) {
                                    //check diffrence between main "list" array to "matchedRecord" array
                                    $readyToDelete = array_diff($shipmentPrimaryIds, $matchedRecord);
                                } else {
                                    $readyToDelete = $shipmentPrimaryIds;
                                }

                                if (count($readyToDelete) || count($UnmatchedRecord)) {
                                   /* $UnmatchedRecord===> Delete Unmatched warehouse record from shipment table */
                                    $deleteMergeArray = array_merge($readyToDelete, $UnmatchedRecord);
                                    if($deleteMergeArray){
                                        PlatformOrderShipment::whereIn('id', $deleteMergeArray)->delete();
                                    }

                                }

                                $matchedRecord =$readyToDelete=$UnmatchedRecord = null; //unset array to release memory

                                if (count($BPOrderIDs) > 0) {
                                    //   Log::channel('webhook')->info("TotalOrderList  -" . $userId . " Integration " . $userIntegrationId . " Response: " . print_r($BPOrderIDs, true) . " Created Date : " . date('Y-m-d H:i:s'));
                                    /* Retrive only array keys which is BP order ID */
                                    $OrderIDs = array_keys($BPOrderIDs);
                                    /* Unique & Sort the Array */
                                    $OrderIDs = array_unique($OrderIDs);
                                    sort($OrderIDs);
                                    /* Insert BP Order Details */
                                    $orderIds = implode(",", $OrderIDs);
                                    $response = $this->GetOrderDetails($orderIds, $userIntegrationId, $account);
                                    if (isset($response['response']) && !empty($response['response']) && is_array($response['response'])) {

                                        $order = $this->GetOrderAndStoreDetails($userId, $userIntegrationId, true, $response['response'], $account, true, true, true, $BPOrderIDs, $shipmentOrderLineIds, $warehouseAPIIds, $user_workflow_rule_id, $platform_workflow_rule_id);

                                        if ($order['order'] || $order['needToDeleteOrder']) {
                                            foreach ($ShipmentArr as $shipmentKey => $val) {
                                                if (isset($order['order'][$val])) {
                                                    /* First update old ready shipement as inactive because that will be deleted from BP*/
                                                    $count = PlatformOrderShipment::where('platform_order_id', trim($order['order'][$val]))->count();
                                                    if ($count > 0) {
                                                        PlatformOrderShipment::where('platform_order_id', trim($order['order'][$val]))->where('sync_status', 'Ready')->update(['sync_status' => 'Inactive']);
                                                    }
                                                    /* Update Order Primary ID in platform_order_shipments table */
                                                    PlatformOrderShipment::where('id', $shipmentKey)->update(['platform_order_id' => trim($order['order'][$val]), 'sync_status' => "Ready"]);
                                                }
                                            }
                                            if (count($order['needToDeleteOrder'])) {
                                                /* After channel filter if orders have not fulfil the mapping data, delete the shipment records */
                                                foreach ($order['needToDeleteOrder'] as $key => $val) {
                                                    if (isset($deleteShipment[$val])) {
                                                        PlatformOrderShipment::whereIn('id', $deleteShipment[$val])->delete();
                                                    }
                                                }
                                            }

                                            $return_response = true;
                                        } else {
                                            $return_response = isset($response['response']) ? $response['response'] : "API Error";
                                        }
                                        /*  */
                                    } else {
                                        PlatformOrderShipment::where([['platform_id', '=', $this->platformId], ['user_integration_id', '=', $userIntegrationId]])->where(
                                            function ($query) {
                                                return $query
                                                    ->where('sync_status', '=', "Pending")
                                                    ->orWhere('sync_status', '=', "Failed");
                                            }
                                        )->whereIn('shipment_id', $list)->update(['sync_status' => 'Inactive']);
                                    }
                                }
                            } else if (isset($response['response']) && is_array($response['response']) && empty($response['response'])) {
                                PlatformOrderShipment::where([
                                    #                                    ['user_id', '=', $userId,],
                                    ['platform_id', '=', $this->platformId,],
                                    ['user_integration_id', '=', $userIntegrationId,],
                                ])->whereIn('shipment_id', $list)->update(['sync_status' => 'Inactive']);
                            } else {
                                $return_response = $this->bp->handleResponseError($response);
                            }
                        }
                    } elseif ($attempt == 3) {
                        $warehouseIds = $this->map->getMappedDataByName($userIntegrationId, null, "order_warehouse_filter", ['api_id'], "regular", null, "multi", "source"); // Get the warehouse api id selected for the integration as multiselect
                        $channelIds = $this->map->getMappedDataByName($userIntegrationId, NULL, "sorder_channel_filter", ['api_id'], 'regular', null, 'multiple');
                        //attempt=3 means this method run for backup shipment ids
                        /* Find last Goods Out Note time from DB */
                        if ($transferedOnly) {
                            $transfer = "true";
                            $urlname = 'goodsout_transferorder_lasttime';
                            $channelIds = []; //transfer order not use channel attribute
                        } else {
                            $transfer = "false";
                            $urlname = 'goodsout_lasttime';
                        }

                        if (is_array($warehouseIds) && count($warehouseIds)) {
                            $warehouseDataIds = $warehouseIds;
                        } else {
                            $warehouseDataIds[] = 'all';
                        }

                        if (is_array($channelIds) && count($channelIds)) {
                            $channelDataIds = $channelIds;
                        } else {
                            $channelDataIds[] = 'all';
                        }

                        foreach ($warehouseDataIds as $warehouseDataId) {
                            foreach ($channelDataIds as $channelDataId) {
                                $url_filter = '';

                                $filterParameter = '';
                                if ($warehouseDataId != 'all') {
                                    $filterParameter = '&warehouseId=' . $warehouseDataId;
                                }

                                if ($channelDataId == 'all') {
                                    $url_filter = $warehouseDataId . '_' . $channelDataId;
                                } else {
                                    $url_filter = $warehouseDataId . '_' . $channelDataId;

                                    $filterParameter = $filterParameter . '&channelId=' . $channelDataId;
                                }

                                $platform_url = PlatformUrl::select('id', 'url')->where(['user_integration_id' => $userIntegrationId, 'platform_id' => $this->platformId, 'url_name' => $urlname, 'status' => 1, 'url_filter' => $url_filter])->first();
                                if ($platform_url) {
                                    /* If GON last time found */
                                    //$sync_start_date = trim($platform_url->url);

                                    $sync_start_date = new DateTime($platform_url->url);
                                    $sync_start_date->modify('-1 second');
                                    $sync_start_date = $sync_start_date->format(DateTime::ATOM);

                                    $sync_start_date = date(DATE_ISO8601, strtotime($sync_start_date));
                                } else {
                                    $last_shipment = PlatformOrderShipment::select('created_on')->where(['platform_id' => $this->platformId, 'user_integration_id' => $userIntegrationId])->whereNotNull('created_on')->orderBy('created_on', 'desc')->first();
                                    if ($last_shipment) {
                                        $sync_start_date = new DateTime($last_shipment->created_on);
                                        $sync_start_date->modify('-1 second');
                                        $sync_start_date = $sync_start_date->format(DateTime::ATOM);

                                        $sync_start_date = date(DATE_ISO8601, strtotime($sync_start_date));
                                    } else {
                                        /* If GON last time not found | set 1 hr minus from current time*/
                                        $sync_start_date = date(DATE_ISO8601, strtotime('-3 hour'));
                                    }
                                }

                                $end_created_on_date = $sync_start_date;
                                $sync_start_date = str_replace('+', '%2B', $sync_start_date);
                                $end_date = str_replace('+', '%2B', date(DATE_ISO8601));
                                /* Filter by transfer type */

                                $process_limit = 200;

                                $url = "/warehouse-service/goods-note/goods-out-search/?columns=goodsOutNoteId,createdOn" . $filterParameter . "&transfer=" . $transfer . "&pageSize=" . $process_limit . "&sort=createdOn|ASC&createdOn=" . $sync_start_date . "/" . $end_date;
                                $response = $this->bp->GetGoodsOutNotes($account, $url, null);
                                if ($bsgoods = json_decode($response->getBody(), true)) {
                                    if (!empty($bsgoods) && isset($bsgoods['response']['results']) && is_array($bsgoods['response']['results'])) {
                                        $newFilterDateTime = false;
                                        $mainResult = $bsgoods['response']['results'];
                                        foreach ($mainResult as $shipment) {
                                            if (isset($shipment[0])) {
                                                $find = PlatformOrderShipment::where([['platform_id', '=', $this->platformId], ['user_integration_id', '=', $userIntegrationId], ['shipment_id', '=', (string)$shipment[0]]])->first();
                                                if (!$find) {
                                                    PlatformOrderShipment::create(['user_id' => $userId, 'platform_id' => $this->platformId, 'user_integration_id' => $userIntegrationId, 'shipment_id' => $shipment[0], 'sync_status' => "Pending", 'type' => PlatformRecordType::SHIPMENT, 'created_on' => $shipment[1]]);
                                                }
                                                $end_created_on_date = $shipment[1];
                                                $newFilterDateTime = true;
                                            }
                                        }

                                        if ($newFilterDateTime) {
                                            if ($platform_url) {
                                                //Update last goods out note created time
                                                $platform_url->url = $end_created_on_date;
                                                $platform_url->updated_at = date('Y-m-d H:i:s');
                                                $platform_url->save();
                                            } else {
                                                //insert last goods out note created time
                                                $this->platformUrl->insert(['user_id' => $userId, 'platform_id' => $this->platformId, 'user_integration_id' => $userIntegrationId, 'url' => $end_created_on_date, 'url_name' => $urlname, 'url_filter' => $url_filter, 'status' => 1, 'allow_retain' => 1]);
                                            }
                                        }
                                    } else {
                                        $return_response = $this->bp->handleResponseError($bsgoods);
                                    }
                                }

                                /*
                                //if transfrer order not found then udpate default datetime
                                if(empty($platform_url))
                                {
                                    //insert last goods out note created time
                                    $this->platformUrl->insert(['user_id'=>$userId, 'platform_id'=>$this->platformId, 'user_integration_id'=>$userIntegrationId, 'url'=>$end_created_on_date, 'url_name'=>$urlname, 'url_filter'=>$url_filter, 'status'=>1, 'allow_retain'=>1]);
                                }
                                */
                            }
                        }
                        return $return_response;
                    }
                }
            }
        } catch (\Exception $e) {
            $return_response = $e->getMessage();
        }
        return $return_response;
    }
    /* Search Orders & Build Urls by type (type = 'purchase_orders' or type = 'sales_orders' or type = 'transfer_orders' or type = 'sales_credit' or type = 'invoice_orders') */
    public function SearchOrdersByType($userId = null, $userIntegrationId, $PlatformWorkFlowRuleID = null, $UserWorkFlowRuleID = null, $is_initial_sync = 0, $type = 'purchase_orders', $is_updates_allowed = 0, $destination_platform = null, $source_platform = null)
    {
        $error_msg = '';
        try {

            if(!is_null($source_platform) && !is_null($destination_platform)){

                /**
                 * when source & destination both are Brightpearl then it will sync order only in midnight
                 * For Other time & other platform, It will be skiped.
                 *  */
                $accessControl = app('App\Utility\PlatformConfig')->accessControl($source_platform, $destination_platform);

                // if source & destination both are Brightpearl
                if ($accessControl['status'] == true) {

                    date_default_timezone_set("US/Eastern");

                    Storage::disk('local')->append('Rupesh_nightSync_BP_BP.txt', "\r\n" . "Time -> " . date('Y-m-d H:i:s') . "hours : " .date('H') . " | APP_ENV : " .env('APP_ENV'). " | source_platform : ".$source_platform." | destination_platform : ".$destination_platform );

                    // if not in stag & from 12 AM to 4 AM
                    if ((env('APP_ENV') != "stag" && date('H') >= 00 && date('H') <= 04) || env('APP_ENV') == "stag") {
                        //for 5 hrs


                    }else{
                        return true;
                    }
                }
            }

            $account = $this->mobj->getPlatformAccountByUserIntegration($userIntegrationId, $this->platformId, ['access_token', 'platform_id', 'id', 'user_id', 'api_domain', 'account_name', 'app_id', 'app_secret']);
            if ($account) {
                $object_channel_name = $url_name = NULL;

                $filterChannelIds = [];
                $channelFilters = [];
                /** Channel Filter */
                if ($type == 'sales_order_invoices') {
                    $object_channel_name = "sales_order_invoice_channel_filter";
                } elseif ($type == 'sales_credit_invoices') {
                    $object_channel_name = "sales_credit_invoice_channel_filter";
                } elseif ($type == 'purchase_orders') {
                    $object_channel_name = "porder_channel_filter";
                    //new added on 16-08-2023
                    $url_name = 'purchase_order_timelog';
                } elseif ($type == 'sales_orders') {
                    $object_channel_name = "sorder_channel_filter";
                    $url_name = 'sales_order_timelog';
                } elseif ($type == 'invoice_orders') {
                    $object_channel_name = "invoice_channel_filter";
                    $url_name = 'invoice_order_timelog';
                } elseif ($type == 'sales_credit') {
                    $object_channel_name = "sales_credit_channel_filter";
                } else {
                    $object_channel_name = "transfer_order_channel";
                    $url_name = 'transfer_order_timelog';

                    $maps = PlatformDataMapping::where(['platform_object_id' => $this->helper->getObjectId('transfer_order_channel'), 'user_integration_id' => $userIntegrationId, 'status' => 1])->get();
                    foreach ($maps as $map) {
                        $obj = PlatformObjectData::find($map->source_row_id);
                        if ($obj) {
                            array_push($channelFilters, $obj->api_id);
                        }
                    }
                }

                if (!empty($channelFilters)) {
                    $filterChannelIds = array_unique($channelFilters);
                    $filterChannelIds = array_map('trim', $filterChannelIds);
                } else {
                    $ChannelIds = $this->map->getMappedDataByName($userIntegrationId, NULL, $object_channel_name, ['api_id'], 'regular', null, 'multiple');
                    if (is_array($ChannelIds) && count($ChannelIds)) {
                        sort($ChannelIds);
                        $filterChannelIds = array_unique($ChannelIds);
                    } else {
                        $filterChannelIds[] = 'all';
                    }
                }

                /** Status Filter */
                $status_filter_object = '';
                if ($type == 'sales_order_invoices') {
                    $status_filter_object = "sales_order_invoice_status_filter";
                } elseif ($type == 'sales_credit_invoices') {
                    $status_filter_object = "sales_credit_invoice_status_filter";
                } elseif ($type == 'purchase_orders') {
                    $status_filter_object = "porder_status_filter";
                } elseif ($type == 'sales_credit') {
                    $status_filter_object = "sales_credit_status_filter";
                } else {
                    $status_filter_object = "sorder_status_filter";
                }

                $OrderStatusIds = [];
                //get default status filter
                $default_status_filter = $this->map->getMappedDataByName($userIntegrationId, NULL, $status_filter_object, ['api_id', 'name']);
                if ($default_status_filter && $default_status_filter->api_id) {
                    $OrderStatusIds[$default_status_filter->api_id] = $default_status_filter->name;
                } else {
                    //get multiple status filter
                    $statusMap = PlatformDataMapping::where(['platform_object_id' => $this->helper->getObjectId($status_filter_object), 'user_integration_id' => $userIntegrationId, 'status' => 1])->get();
                    foreach ($statusMap as $map) {
                        $obj = PlatformObjectData::find($map->source_row_id);
                        if ($obj && $obj->api_id) {
                            $OrderStatusIds[$obj->api_id] = $obj->name;
                        }
                    }
                }

                if (is_array($OrderStatusIds) && count($OrderStatusIds)) {
                    $filterOrderStatusIds = $OrderStatusIds;
                } else {
                    $filterOrderStatusIds['all'] = 'all';
                }

                foreach ($filterOrderStatusIds as $filterOrderStatusId => $filterOrderStatusName) {
                    foreach ($filterChannelIds as $filterChannelId) {
                        $url_filter = $filterOrderStatusId . '_' . $filterChannelId;
                        $filterParameter = '';

                        if ($filterOrderStatusId != 'all') {
                            $filterParameter = '&orderStatusId=' . $filterOrderStatusId;
                        }

                        if ($filterChannelId != 'all') {
                            $filterParameter = $filterParameter . '&departmentId=' . $filterChannelId;
                        }

                        $platform_url = PlatformUrl::select('id')->where(['user_integration_id' => $userIntegrationId, 'platform_id' => $this->platformId, 'url_name' => $type, 'url_filter' => $url_filter, 'status' => 0])->first();
                        if (is_null($platform_url) || $is_initial_sync) {
                            //for only BP integration
                            $sync_start_date = date('Y-m-d\TH:00:00', strtotime('-1 day'));
                            if ($is_initial_sync) {
                                $getflowEvents = $this->wfsnip->getWorkflowEvents($UserWorkFlowRuleID);
                                if ($getflowEvents && $getflowEvents->sync_start_date) {
                                    $sync_start_date = str_replace(' ', 'T', trim($getflowEvents->sync_start_date));
                                }
                            } else {
                                //Get last fetched order's time
                                $syncTimelogObj = NULL;
                                if ($url_name) {
                                    $syncTimelogObj = PlatformUrl::select('url')->where(['user_integration_id' => $userIntegrationId, 'platform_id' => $this->platformId, 'url_name' => $url_name, 'url_filter' => $url_filter])->first();
                                }

                                if ($syncTimelogObj) {
                                    $sync_start_date = new DateTime($syncTimelogObj->url);
                                    $sync_start_date->modify('-1 second');
                                    $sync_start_date = $sync_start_date->format(DateTime::ATOM);

                                    //$sync_start_date = date(DATE_ISO8601, strtotime($sync_start_date));

                                    $sync_start_date = str_replace(' ', 'T', trim($sync_start_date));
                                } else {
                                    $is_sorting_through_order_date = true;
                                    if ($is_updates_allowed == 1 || isset(Config::get('apisettings.AllowUpdateOnlyOrderStatusInBP')[$destination_platform])) {
                                        //if api_updated_at null then record must be created from mutate part, sort through order_date in platform_order
                                        $platform_order = DB::table('platform_order')->join('platform_order_additional_information', 'platform_order.id', '=', 'platform_order_additional_information.platform_order_id')
                                            ->select('platform_order.api_updated_at', 'platform_order.order_date')
                                            ->where(['platform_order.user_integration_id' => $userIntegrationId, 'platform_order.platform_id' => $this->platformId, 'platform_order.user_workflow_rule_id' => $UserWorkFlowRuleID])
                                            ->where(function ($query) use ($filterChannelId) {
                                                if ($filterChannelId != 'all') {
                                                    $query->where('platform_order_additional_information.api_channel_id', $filterChannelId);
                                                }
                                            })
                                            ->where(function ($query) use ($filterOrderStatusName) {
                                                if ($filterOrderStatusName != 'all') {
                                                    $query->where('platform_order.order_status', $filterOrderStatusName);
                                                }
                                            })
                                            ->orderByRaw("DATE_FORMAT(platform_order.api_updated_at, '%Y-%m-%d %H-%i-%s') DESC")
                                            ->first();
                                        if ($platform_order && $platform_order->api_updated_at) {
                                            $is_sorting_through_order_date = false;
                                        }
                                    }

                                    if ($is_sorting_through_order_date) {
                                        $platform_order = DB::table('platform_order')->join('platform_order_additional_information', 'platform_order.id', '=', 'platform_order_additional_information.platform_order_id')
                                            ->select('platform_order.order_date')
                                            ->where(['platform_order.user_integration_id' => $userIntegrationId, 'platform_order.platform_id' => $this->platformId, 'platform_order.user_workflow_rule_id' => $UserWorkFlowRuleID])
                                            ->where(function ($query) use ($filterChannelId) {
                                                if ($filterChannelId != 'all') {
                                                    $query->where('platform_order_additional_information.api_channel_id', $filterChannelId);
                                                }
                                            })
                                            ->where(function ($query) use ($filterOrderStatusName) {
                                                if ($filterOrderStatusName != 'all') {
                                                    $query->where('platform_order.order_status', $filterOrderStatusName);
                                                }
                                            })
                                            ->orderByRaw("DATE_FORMAT(platform_order.order_date, '%Y-%m-%d %H-%i-%s') DESC")
                                            ->first();
                                    }

                                    if (is_null($platform_order)) {
                                        $is_sorting_through_order_date = true;
                                        if ($is_updates_allowed == 1 || isset(Config::get('apisettings.AllowUpdateOnlyOrderStatusInBP')[$destination_platform])) {
                                            //if api_updated_at null then record must be created from mutate part, sort through order_date in platform_order
                                            $platform_order = DB::table('platform_order')->select('api_updated_at', 'order_date')->where(['user_integration_id' => $userIntegrationId, 'platform_id' => $this->platformId, 'user_workflow_rule_id' => $UserWorkFlowRuleID])->orderByRaw("DATE_FORMAT(api_updated_at, '%Y-%m-%d %H-%i-%s') DESC")->first();
                                            if ($platform_order && $platform_order->api_updated_at) {
                                                $is_sorting_through_order_date = false;
                                            }
                                        }

                                        if ($is_sorting_through_order_date) {
                                            $platform_order = DB::table('platform_order')->select('order_date')->where(['user_integration_id' => $userIntegrationId, 'platform_id' => $this->platformId, 'user_workflow_rule_id' => $UserWorkFlowRuleID])->orderByRaw("DATE_FORMAT(order_date, '%Y-%m-%d %H-%i-%s') DESC")->first();
                                        }
                                    }

                                    if ($platform_order) {
                                        if (($is_updates_allowed == 1 || isset(Config::get('apisettings.AllowUpdateOnlyOrderStatusInBP')[$destination_platform])) && $platform_order->api_updated_at) {
                                            //$sync_start_date = str_replace(' ', 'T', trim($platform_order->api_updated_at));

                                            $sync_start_date = new DateTime($platform_order->api_updated_at);
                                            $sync_start_date->modify('-1 second');
                                            $sync_start_date = $sync_start_date->format(DateTime::ATOM);

                                            //$sync_start_date = date(DATE_ISO8601, strtotime($sync_start_date));

                                            $sync_start_date = str_replace(' ', 'T', trim($sync_start_date));
                                        } else {
                                            //$sync_start_date = str_replace(' ', 'T', trim($platform_order->order_date));

                                            $sync_start_date = new DateTime($platform_order->order_date);
                                            $sync_start_date->modify('-1 second');
                                            $sync_start_date = $sync_start_date->format(DateTime::ATOM);

                                            //$sync_start_date = date(DATE_ISO8601, strtotime($sync_start_date));

                                            $sync_start_date = str_replace(' ', 'T', trim($sync_start_date));
                                        }
                                    } else {
                                        $getflowEvents = $this->wfsnip->getWorkflowEvents($UserWorkFlowRuleID);

                                        if ($getflowEvents && $getflowEvents->sync_start_date) {
                                            $sync_start_date = str_replace(' ', 'T', trim($getflowEvents->sync_start_date));
                                        }
                                    }
                                }
                            }

                            $sync_start_date = str_replace('+', '%2B', $sync_start_date);

                            $offset = 1;
                            do {
                                $url = "/order-service/order-search/?columns=orderId" . $filterParameter . "&pageSize=500&sort=updatedOn|ASC&firstResult=" . $offset;

                                if ($type == "sales_order_invoices") {
                                    $url .= "&orderTypeId=1&isClosed=true"; //For sales order invoice
                                } elseif ($type == "sales_credit_invoices") {
                                    $url .= "&orderTypeId=3&isClosed=true"; //For sales credit invoice
                                } elseif ($type == "purchase_orders") {
                                    $url .= "&orderTypeId=2"; //For purchase order
                                } elseif ($type == "sales_credit") {
                                    $url .= "&orderTypeId=3"; //For sales credit
                                } else {
                                    $url .= "&orderTypeId=1"; //For sales order
                                }

                                if ($is_initial_sync) {
                                    /* In initial sync we are picking orders from created date because if the order is updated then that perticular order may be missed.
                                    Also if we fetch based on updated date then such orders may come which were created long ago.
                                */
                                    $url .= "&createdOn=" . $sync_start_date . '/';
                                } else {
                                    $url .= "&updatedOn=" . $sync_start_date . '/';
                                }

                                $response = $this->bp->GetPurchaseOrders($account, $url);
                                if ($bsOrders = json_decode($response->getBody(), true)) {
                                    if (!empty($bsOrders) && isset($bsOrders['response']['results']) && is_array($bsOrders['response']['results'])) {
                                        $bsOrders_chunks = array_chunk($bsOrders['response']['results'], 50);

                                        $order_uris = [];
                                        foreach ($bsOrders_chunks as $bsOrder_chunk) {
                                            $po_urls = array_column($bsOrder_chunk, 0);
                                            sort($po_urls);

                                            $order_chunk_url = '/order/' . implode(',', $po_urls);

                                            if ($is_updates_allowed == 1 || isset(Config::get('apisettings.AllowUpdateOnlyOrderStatusInBP')[$destination_platform])) {
                                                $platform_url_check = $this->mobj->getFirstResultByConditions('platform_urls', ['url' => $order_chunk_url, 'platform_id' => $this->platformId, 'user_integration_id' => $userIntegrationId, 'url_name' => $type, 'status' => 0, 'url_filter' => $url_filter], ['id']);
                                            } else {
                                                $platform_url_check = $this->mobj->getFirstResultByConditions('platform_urls', ['url' => $order_chunk_url, 'platform_id' => $this->platformId, 'user_integration_id' => $userIntegrationId, 'url_name' => $type, 'url_filter' => $url_filter], ['id']);
                                            }

                                            if (empty($platform_url_check)) {
                                                $order_uris[] = ['url' => $order_chunk_url, 'user_id' => $userId, 'platform_id' => $this->platformId, 'user_integration_id' => $userIntegrationId, 'url_name' => $type, 'url_filter' => $url_filter];
                                            }
                                        }

                                        if (!empty($order_uris)) {
                                            $this->mobj->makeInsert('platform_urls', $order_uris);
                                        }

                                        $offset += 500;
                                    } else {
                                        $error_msg = $response->getBody();
                                    }
                                } else {
                                    $error_msg = "Response body not found";
                                }
                                usleep(100000);
                            } while (!empty($bsOrders['response']['metaData']['morePagesAvailable']));
                        }
                    }
                }

                if ($error_msg) {
                    return $error_msg;
                }
                return true;
            }
        } catch (\Exception $e) {
            Log::error($userIntegrationId . " --> SearchOrdersByType --> " . $e->getMessage());
            return $e->getMessage();
        }
    }

    /* Get Purchase Orders By type (type = 'purchase_orders' or type = 'sales_orders' or type = 'transfer_orders' or type = 'invoice_orders' */
    public function GetOrdersByType($userId = null, $userIntegrationId, $PlatformWorkFlowRuleID = null, $UserWorkFlowRuleID = null, $destination_platform_id = null, $is_initial_sync = 0, $type = 'purchase_orders', $is_updates_allowed = 0)
    {
        $error_msg_arr = [];
        $error_msg = $is_acknowledge = 0;
        try {
            $ufound = $this->mobj->getPlatformAccountByUserIntegration($userIntegrationId, $this->platformId, ['access_token', 'platform_id', 'id', 'user_id', 'api_domain', 'account_name', 'app_id', 'app_secret']);
            if ($ufound && $this->platformId) {
                //Tag filter
                $TagFilterData = $this->map->getMappedDataByName($userIntegrationId, '', "tag", ['api_id'], 'regular', '', 'multiple'); // Get Tag filter data (if tag filter is applied)

                //Channel filter
                $filter_channel = $ChangesStatusAllowed = [];
                if ($type == 'sales_order_invoices') {
                    $channelFilters = [];
                    $maps = PlatformDataMapping::where(['platform_object_id' => $this->helper->getObjectId('sales_order_invoice_channel_filter'), 'user_integration_id' => $userIntegrationId, 'status' => 1])->get();
                    foreach ($maps as $map) {
                        $obj = PlatformObjectData::find($map->source_row_id);
                        if ($obj) {
                            array_push($channelFilters, $obj->api_id);
                        }
                    }
                } elseif ($type == 'sales_credit_invoices') {
                    $channelFilters = [];
                    $maps = PlatformDataMapping::where(['platform_object_id' => $this->helper->getObjectId('sales_credit_invoice_channel_filter'), 'user_integration_id' => $userIntegrationId, 'status' => 1])->get();
                    foreach ($maps as $map) {
                        $obj = PlatformObjectData::find($map->source_row_id);
                        if ($obj) {
                            array_push($channelFilters, $obj->api_id);
                        }
                    }
                } elseif ($type == 'purchase_orders') {

                    $channelFilters = [];
                    $maps = PlatformDataMapping::where(['platform_object_id' => $this->helper->getObjectId('porder_channel_filter'), 'user_integration_id' => $userIntegrationId, 'status' => 1])->get();
                    foreach ($maps as $map) {
                        $obj = PlatformObjectData::find($map->source_row_id);
                        if ($obj) {
                            array_push($channelFilters, $obj->api_id);
                        }
                    }


                    if ($is_updates_allowed == 1) {
                        $ChangesStatusAllowed = $this->map->getMappedDataByName($userIntegrationId, $PlatformWorkFlowRuleID, "default_porder_status", ['name'], "regular", null, "multiple", "source", ['api_id', 'name']);
                        if (!is_array($ChangesStatusAllowed)) {
                            $ChangesStatusAllowed = [];
                        }
                    } else if (isset(Config::get('apisettings.AllowUpdateOnlyOrderStatusInBP')[$destination_platform_id])) {
                        $ChangesStatusAllowed = $this->map->getMappedDataByName($userIntegrationId, null, "default_porder_status", ['name'], "regular", null, "multiple", "source", ['api_id', 'name']);
                        if (!is_array($ChangesStatusAllowed)) {
                            $ChangesStatusAllowed = [];
                        }
                    }
                } elseif ($type == 'sales_orders') {
                    $channelFilters = [];
                    $maps = PlatformDataMapping::where(['platform_object_id' => $this->helper->getObjectId('sorder_channel_filter'), 'user_integration_id' => $userIntegrationId, 'status' => 1])->get();
                    foreach ($maps as $map) {
                        $obj = PlatformObjectData::find($map->source_row_id);
                        if ($obj) {
                            array_push($channelFilters, $obj->api_id);
                        }
                    }

                    $AllowedAcknowledge = $this->map->getMappedDataByName($userIntegrationId, null, "allowed_acknowledge_order", ['api_code']);
                    $is_acknowledge = @$AllowedAcknowledge->api_code ? $AllowedAcknowledge->api_code : 0;

                    // Get Sales Order Custom Field Value
                    $customfielddata = $this->map->getMappedDataByName($userIntegrationId, null, "sales_order_check_custom_field_value", ['custom_data'], "default");
                } elseif ($type == 'invoice_orders') {
                    $channelFilters = $this->map->getMappedDataByName($userIntegrationId, $PlatformWorkFlowRuleID, "invoice_channel_filter", ['api_id'], 'regular', null, 'multiple');
                } elseif ($type == 'sales_credit') {
                    $channelFilters = $this->map->getMappedDataByName($userIntegrationId, $PlatformWorkFlowRuleID, "sales_credit_channel_filter", ['api_id'], 'regular', null, 'multiple');
                    $TagFilterData = null;
                } else {
                    $channelFilters = [];
                    $maps = PlatformDataMapping::where(['platform_object_id' => $this->helper->getObjectId('transfer_order_channel'), 'user_integration_id' => $userIntegrationId, 'status' => 1])->get();
                    foreach ($maps as $map) {
                        $obj = PlatformObjectData::find($map->source_row_id);
                        if ($obj) {
                            array_push($channelFilters, $obj->api_id);
                        }
                    }
                }

                if (!empty($channelFilters)) {
                    $filter_channel = array_unique($channelFilters);
                    $filter_channel = array_map('trim', $filter_channel);
                }

                //Temporary additional status check for invoice orders
                $statusFilter = [];
                $status_filter_object = NULL;
                if ($type == 'invoice_orders' || $type == 'sales_orders' || $type == 'transfer_orders') {
                    $status_filter_object = 'sorder_status_filter';
                } else if ($type == 'purchase_orders') {
                    $status_filter_object = 'porder_status_filter';
                } else if ($type == 'sales_credit') {
                    $status_filter_object = 'sales_credit_status_filter';
                }

                if ($status_filter_object) {
                    $statusMap = PlatformDataMapping::where(['platform_object_id' => $this->helper->getObjectId($status_filter_object), 'user_integration_id' => $userIntegrationId, 'status' => 1])->get();
                    foreach ($statusMap as $key => $map) {
                        $obj = PlatformObjectData::find($map->source_row_id);
                        if ($obj) {
                            array_push($statusFilter, $obj->name);
                        }
                    }
                }

                $additionalAccountInfo = $this->mobj->getFirstResultByConditions('platform_account_addtional_information', ['user_integration_id' => $userIntegrationId, 'account_id' => $ufound->id]);
                if (isset($ufound->platform_id) && $ufound->platform_id == $this->platformId) {
                    //for only BP integration
                    $urls = $this->mobj->getResultByConditions('platform_urls', ['status' => 0,  'platform_id' => $ufound->platform_id, 'user_integration_id' => $userIntegrationId, 'url_name' => $type], ['id', 'url', 'url_filter', 'url_name'], ['created_at' => 'asc'], 2);
                    $array = $urls->toArray();

                    $chunkOfUrls = array_chunk($array, 2, true);
                    if (!empty($chunkOfUrls)) {
                        foreach ($chunkOfUrls as $chunk) {
                            if ($error_msg) {
                                //  break;
                            }

                            foreach ($chunk as $url_obj) {
                                if ($error_msg) {
                                    // break;
                                }
                                $nextTimelog = '';
                                $url_obj = (object) $url_obj;

                                $url = "/order-service" . $url_obj->url . '?includeOptional=customFields';

                                $response = $this->bp->GetPurchaseOrders($ufound, $url);

                                $processed_orders_count = 0;

                                if ($bsOrders = json_decode($response->getBody(), true)) {
                                    if ($userIntegrationId == 106) {
                                        Storage::disk('local')->append('Bhoopendra_Kefron.txt', "\r\n" . "Date -> " . date('Y-m-d H:i:s') . "url : " . $url . " | bsOrders : " . json_encode($bsOrders, true));
                                    }

                                    if (!empty($bsOrders) && isset($bsOrders['response']) && is_array($bsOrders['response'])) {
                                        $this->mobj->makeUpdate('platform_urls', ['status' => 2], ['id' => $url_obj->id]);
                                        // \DB::beginTransaction();
                                        foreach ($bsOrders['response'] as $order) {
                                            // Skip if order is older than 12 days
                                            // if (isset($order['createdOn']) && date_create($order['createdOn']) < date_create("-12 day")) {
                                            //     $processed_orders_count++;
                                            //     continue;
                                            // }
                                            if ($nextTimelog < $order['createdOn']) {
                                                $nextTimelog = $order['createdOn'];
                                            }

                                            // If custom field value exists in order api
                                            if(isset($order['customFields']) && (!empty($customfielddata->custom_data) && trim($customfielddata->custom_data))){
                                                $customefieldresponse = app('App\Http\Controllers\Brightpearl\BrightpearlUtility')->AllowCustomFieldAddOrder($order['customFields'], $customfielddata->custom_data);
                                                if (!$customefieldresponse) {
                                                    $processed_orders_count++;
                                                    continue;
                                                }
                                            }

                                            // Apply tag filter
                                            if (!is_bool($TagFilterData) && $TagFilterData && count($TagFilterData) > 0) {
                                                if (isset($order['parties']['customer']['contactId'])) {
                                                    $contactId = $order['parties']['customer']['contactId'];
                                                    $response = app('App\Http\Controllers\Brightpearl\BrightpearlUtility')->CheckTagFilterApplicability($TagFilterData, $contactId);
                                                    if (!$response) {
                                                        $processed_orders_count++;
                                                        continue;
                                                    }
                                                }
                                            }

                                            $channelId = isset($order['assignment']['current']['channelId']) ? $order['assignment']['current']['channelId'] : 0;
                                            if (count($filter_channel) > 0 && !in_array($channelId, $filter_channel)) {
                                                $processed_orders_count++;
                                                continue;
                                            }
                                            //Channel filter ends

                                            //Status filter check
                                            if ($statusFilter) {
                                                $statusName = isset($order['orderStatus']['name']) ? $order['orderStatus']['name'] : '';
                                                if (($type == 'invoice_orders' || $type == 'sales_orders' || $type == 'transfer_orders' || $type == 'purchase_orders' || $type == 'sales_credit') && !in_array($statusName, $statusFilter)) {
                                                    $processed_orders_count++;
                                                    continue;
                                                }
                                            }
                                            //Status filter ends

                                            $data_fetched_types = [];
                                            $platform_order_id = $line_item_count = 0;
                                            $api_updated_at = "";

                                            $orderTypeCode = $order['orderTypeCode'];
                                            if ($type == 'transfer_orders') {
                                                $orderTypeCode = 'TO';
                                            } elseif ($type == 'invoice_orders') {
                                                $orderTypeCode = 'IO';
                                            } elseif ($type == 'sales_credit' || $type == 'sales_credit_invoices') {
                                                $orderTypeCode = 'SC';
                                            }

                                            $new_order_status = @$order['orderStatus']['name'];
                                            $old_order_status = null;

                                            $platform_order = PlatformOrder::select('id', 'order_status', 'sync_status', 'api_updated_at', 'linked_id', 'invoice_sync_status')->where(['platform_id' => $ufound->platform_id, 'user_integration_id' => $userIntegrationId, 'api_order_id' => (string)$order['id'], 'order_type' => $orderTypeCode])->first();

                                            $isUpdate = true;
                                            if (empty($platform_order)) {
                                                $isUpdate = false;
                                                /** Save Order details */
                                                $order_fields = [
                                                    'user_id' => $userId,
                                                    'user_workflow_rule_id' => $UserWorkFlowRuleID,
                                                    'platform_id' => $ufound->platform_id,
                                                    'user_integration_id' => $userIntegrationId,
                                                    'order_type' => $orderTypeCode,
                                                    'api_order_id' => $order['id'],
                                                    'customer_email' => $order['orderTypeCode'] == 'PO' ? @$order['parties']['supplier']['email'] : @$order['parties']['customer']['email'],
                                                    'order_number' => @$order['id'],
                                                    'api_order_reference' => @$order['reference'],
                                                    'currency' => @$order['currency']['orderCurrencyCode'],
                                                    'order_date' => @$order['createdOn'],
                                                    'tax_date' => isset($order['invoices'][0]['taxDate']) ? $order['invoices'][0]['taxDate'] : '',
                                                    'delivery_date' => @$order['delivery']['deliveryDate'],
                                                    'order_status' => @$order['orderStatus']['name'],
                                                    'api_pricelist_id' => @$order['priceListId'],
                                                    'total_tax' => (empty($order['totalValue']['taxAmount']) ? 0 : $order['totalValue']['taxAmount']),
                                                    'total_amount' => (empty($order['totalValue']['total']) ? 0 : $order['totalValue']['total']),
                                                    'net_amount' => (empty($order['totalValue']['net']) ? 0 : $order['totalValue']['net']),
                                                    'shipping_method' => @$order['delivery']['shippingMethodId'],
                                                    'warehouse_id' => @$order['warehouseId'],
                                                    'api_updated_at' => @$order['updatedOn'],
                                                    'api_order_payment_status' => $this->mobj->mapOrderPaymentStatus(@$order['orderPaymentStatus']),
                                                    'order_updated_at' => date_create(),
                                                ];

                                                if ($type == 'sales_orders' && $is_acknowledge == 1 && $order['acknowledged'] == 0) {
                                                    // && $order['updatedOn']!=$api_updated_at   update at not updating properly
                                                    $order_fields['sync_status'] = 'Pending';
                                                }

                                                if ($type == 'sales_order_invoices' || $type == 'sales_credit_invoices') {
                                                    $order_fields['invoice_sync_status'] = 'Ready';
                                                }

                                                $platform_order_id = $this->mobj->makeInsertGetId('platform_order', $order_fields);
                                            } elseif ($platform_order->sync_status == 'Pending' || $platform_order->sync_status == 'Failed' || (($is_updates_allowed == 1 || isset(Config::get('apisettings.AllowUpdateOnlyOrderStatusInBP')[$destination_platform_id])) && (($type == 'purchase_orders' && in_array($order['orderStatus']['name'], $ChangesStatusAllowed)) || ($type == 'sales_orders' && (($is_acknowledge == 1 && $order['acknowledged'] == 1) || $is_acknowledge == 0))))) {
                                                /*
                                                Update Cases Handling
                                                Allow Cases :
                                                1) DB order status should Pending
                                                2) If Order Updates Allowed we need to allow for PO & status change Allowed
                                                3) If Order Updates Allowed we need to allow for SO & Order Acknowledge true
                                                4) If Order Updates Allowed we need to pass order acknowledge false for all for other integrations
                                                 */
                                                $platform_order_id = $platform_order->id;
                                                if (isset(Config::get('apisettings.AllowUpdateOnlyOrderStatusInBP')[$destination_platform_id])) {
                                                    $order_fields = ['order_status' => @$order['orderStatus']['name'], 'api_updated_at' => @$order['updatedOn']];
                                                } else {

                                                    $old_order_status = $platform_order->order_status;


                                                    $api_updated_at = @$platform_order->api_updated_at;
                                                    /** update Order details */
                                                    $order_fields = ['user_id' => $userId, 'platform_id' => $ufound->platform_id, 'user_integration_id' => $userIntegrationId, 'order_type' => $orderTypeCode, 'api_order_id' => $order['id'], 'customer_email' => $order['orderTypeCode'] == 'PO' ? @$order['parties']['supplier']['email'] : @$order['parties']['customer']['email'], 'order_number' => @$order['id'], 'api_order_reference' => @$order['reference'], 'currency' => @$order['currency']['orderCurrencyCode'], 'order_date' => @$order['createdOn'], 'tax_date' => isset($order['invoices'][0]['taxDate']) ? $order['invoices'][0]['taxDate'] : '', 'delivery_date' => @$order['delivery']['deliveryDate'], 'api_pricelist_id' => @$order['priceListId'], 'order_status' => @$order['orderStatus']['name'], 'total_tax' => (empty($order['totalValue']['taxAmount']) ? 0 : $order['totalValue']['taxAmount']), 'total_amount' => (empty($order['totalValue']['total']) ? 0 : $order['totalValue']['total']), 'net_amount' => (empty($order['totalValue']['net']) ? 0 : $order['totalValue']['net']), 'shipping_method' => @$order['delivery']['shippingMethodId'], 'warehouse_id' => @$order['warehouseId'], 'api_updated_at' => @$order['updatedOn'], 'api_order_payment_status' => $this->mobj->mapOrderPaymentStatus(@$order['orderPaymentStatus'])];



                                                    if (($type == 'sales_order_invoices' || $type == 'sales_credit_invoices') && $platform_order->invoice_sync_status != 'Synced') {
                                                        $order_fields['invoice_sync_status'] = 'Ready';
                                                    }

                                                    if (($is_updates_allowed == 1 && (($type == 'purchase_orders' && in_array($order['orderStatus']['name'], $ChangesStatusAllowed)) || ($type == 'sales_orders' && (($is_acknowledge == 1 && $order['acknowledged'] == 1) || $is_acknowledge == 0)))) || $platform_order->sync_status == 'Failed') {
                                                        if (isset($platform_order->api_updated_at) && isset($order['updatedOn']) && ($order['updatedOn'] != $platform_order->api_updated_at)) {
                                                            //to check whether update time on DB and API are both different
                                                            if ($type == 'sales_orders' && in_array($destination_platform_id, Config::get('apisettings.BpSOStatusCheckUpdate')) && $platform_order->linked_id) {
                                                                if ($new_order_status == $old_order_status) {
                                                                    $order_fields['sync_status'] = 'Synced';
                                                                } else {
                                                                    $order_fields['sync_status'] = 'Ready';
                                                                }
                                                            } else {
                                                                $order_fields['sync_status'] = 'Ready';
                                                            }
                                                        }
                                                    }
                                                }

                                                if ($platform_order->api_updated_at != @$order['updatedOn']) {
                                                    $order_fields['order_updated_at'] = date_create();
                                                }


                                                $this->mobj->makeUpdate('platform_order', $order_fields, ['id' => $platform_order_id]);
                                            } elseif (($type == 'sales_order_invoices' || $type == 'sales_credit_invoices') && $platform_order->invoice_sync_status != 'Synced') {
                                                /** update Order details */
                                                $order_fields = ['user_id' => $userId, 'platform_id' => $ufound->platform_id, 'user_integration_id' => $userIntegrationId, 'order_type' => $orderTypeCode, 'api_order_id' => $order['id'], 'customer_email' => $order['orderTypeCode'] == 'PO' ? @$order['parties']['supplier']['email'] : @$order['parties']['customer']['email'], 'order_number' => @$order['id'], 'api_order_reference' => @$order['reference'], 'currency' => @$order['currency']['orderCurrencyCode'], 'order_date' => @$order['createdOn'], 'tax_date' => isset($order['invoices'][0]['taxDate']) ? $order['invoices'][0]['taxDate'] : '', 'delivery_date' => @$order['delivery']['deliveryDate'], 'api_pricelist_id' => @$order['priceListId'], 'order_status' => @$order['orderStatus']['name'], 'total_tax' => (empty($order['totalValue']['taxAmount']) ? 0 : $order['totalValue']['taxAmount']), 'total_amount' => (empty($order['totalValue']['total']) ? 0 : $order['totalValue']['total']), 'net_amount' => (empty($order['totalValue']['net']) ? 0 : $order['totalValue']['net']), 'shipping_method' => @$order['delivery']['shippingMethodId'], 'warehouse_id' => @$order['warehouseId'], 'api_updated_at' => @$order['updatedOn'], 'api_order_payment_status' => $this->mobj->mapOrderPaymentStatus(@$order['orderPaymentStatus'])];

                                                if ($platform_order->api_updated_at != @$order['updatedOn']) {
                                                    $order_fields['order_updated_at'] = date_create();
                                                }

                                                $order_fields['invoice_sync_status'] = 'Ready';
                                                $this->mobj->makeUpdate('platform_order', $order_fields, ['id' => $platform_order->id]);
                                            }

                                            //sales credit store as a refund
                                            if (($type == 'sales_credit' || $type == 'sales_credit_invoices') && $platform_order_id) {
                                                $order_refund_data = ['user_workflow_rule_id' => $UserWorkFlowRuleID, 'platform_order_id' => $platform_order_id, 'api_id' => $order['id'], 'refund_order_number' => $order['id'], 'date_created' => @$order['createdOn'], 'amount' => (empty($order['totalValue']['total']) ? 0 : $order['totalValue']['total'])];

                                                $platform_order_refund = $this->mobj->getFirstResultByConditions('platform_order_refunds', ['platform_order_id' => $platform_order_id], ['id']);
                                                if (is_null($platform_order_refund)) {
                                                    $order_refund_data['sync_status'] = 'Ready';
                                                    $platform_order_refund_id = $this->mobj->makeInsertGetId('platform_order_refunds', $order_refund_data);

                                                    $this->mobj->makeUpdate('platform_order', ['refund_sync_status' => 'Ready'], ['id' => $platform_order_id]);
                                                } else {
                                                    $platform_order_refund_id = $platform_order_refund->id;
                                                    $this->mobj->makeUpdate('platform_order_refunds', $order_refund_data, ['id' => $platform_order_refund_id]);
                                                }

                                                /** save order line items */
                                                if (!empty($order['orderRows'])) {
                                                    $lines = $order['orderRows'];
                                                    foreach ($lines as $line_id => $line) {
                                                        $order_refund_line_data = array('platform_order_refund_id' => $platform_order_refund_id, 'api_order_line_id' => $line_id, 'api_product_id' => @$line['productId'], 'product_name' => @$line['productName'], 'sku' => @$line['productSku'], 'qty' => ((!empty($line['quantity']['magnitude'])) ? $line['quantity']['magnitude'] : 0), 'price' => @$line['productPrice']['value'] ? @$line['productPrice']['value'] : 0, 'total' => ((!empty($line['rowValue']['rowNet']['value'])) ? $line['rowValue']['rowNet']['value'] : 0), 'total_tax' => ((!empty($line['rowValue']['rowTax']['value'])) ? $line['rowValue']['rowTax']['value'] : 0), 'subtotal' => ((!empty($line['rowValue']['rowNet']['value'])) ? $line['rowValue']['rowNet']['value'] : 0), 'subtotal_tax' => ((!empty($line['rowValue']['rowTax']['value'])) ? $line['rowValue']['rowTax']['value'] : 0), 'taxes' => @$line['rowValue']['taxClassId'], 'row_type' => isset($line['nominalCode']) ? BrightpearlServices::getBPLineItemType($additionalAccountInfo, $line['nominalCode']) : 'ITEM');

                                                        $platform_order_refund_line = $this->mobj->getFirstResultByConditions('platform_order_refund_lines', ['platform_order_refund_id' => $platform_order_refund_id, 'api_order_line_id' => $line_id], ['id']);
                                                        if (is_null($platform_order_refund_line)) {
                                                            $this->mobj->makeInsert('platform_order_refund_lines', $order_refund_line_data);
                                                        } else {
                                                            $this->mobj->makeUpdate('platform_order_refund_lines',  $order_refund_line_data, ['id' => $platform_order_refund_line->id]);
                                                        }
                                                    }
                                                }
                                            }

                                            if (($is_updates_allowed == 1 && (($type == 'purchase_orders' && in_array($order['orderStatus']['name'], $ChangesStatusAllowed)) || ($type == 'sales_orders' && (($is_acknowledge == 1 && $order['acknowledged'] == 1) || $is_acknowledge == 0)))) || (!empty($platform_order) && $platform_order->sync_status == 'Failed')) {
                                                // && $order['updatedOn']!=$api_updated_at  update at not updating properly
                                                // we need to allow this case for updation
                                            } else {
                                                if (($type == 'sales_order_invoices' || $type == 'sales_credit_invoices') && (!empty($platform_order) && $platform_order->invoice_sync_status != 'Synced')) {
                                                    //we need to allow this case for updation
                                                } elseif (!empty($platform_order) && $platform_order->sync_status !== 'Pending') {
                                                    $processed_orders_count++;
                                                    continue;
                                                }
                                            }

                                            if (!$platform_order_id) {
                                                $error_msg = 1;
                                                $error_msg_arr[] = 'Order insertion failed. Order #' . $order['id'];
                                                //break;
                                                continue;
                                            }

                                            if ($order['orderTypeCode'] == 'SO' && $order['orderPaymentStatus'] == 'PAID') {
                                                $res = $this->bp->GetCustomerPaymentsForOrder($ufound, $order['id']);
                                                $res = json_decode($res->getBody());

                                                if ($res && isset($res->response) && isset($res->response->results)) {
                                                    $payments = $res->response->results;
                                                    foreach ($payments as $payment) {
                                                        if (isset($payment[0]) && $payment[0]) {
                                                            $platform_order_transaction = $this->mobj->getFirstResultByConditions('platform_order_transactions', ['platform_order_id' => $platform_order_id, 'api_transaction_index_id' => $payment[0]], ['id']);
                                                            if (is_null($platform_order_transaction)) {
                                                                $this->mobj->makeInsert('platform_order_transactions', ['platform_order_id' => $platform_order_id, 'api_transaction_index_id' => $payment[0], 'transaction_id' => @$payment[2], 'transaction_datetime' => @$payment[12], 'transaction_type' => @$payment[4], 'transaction_method' => @$payment[3], 'transaction_amount' => @$payment[9], 'transaction_reference' => @$payment[1]]);
                                                            } else {
                                                                $this->mobj->makeUpdate('platform_order_transactions', ['transaction_id' => @$payment[2], 'transaction_datetime' => @$payment[12], 'transaction_type' => @$payment[4], 'transaction_method' => @$payment[3], 'transaction_amount' => @$payment[9], 'transaction_reference' => @$payment[1]], ['id' => $platform_order_transaction->id]);
                                                            }
                                                        }
                                                    }
                                                }
                                            }

                                            /** save order additional info */
                                            $is_drop_ship = 0;
                                            if (isset($order['isDropship'])) {
                                                if ($order['isDropship'] == true) {
                                                    $is_drop_ship = 1;
                                                }
                                            }

                                            $assignment = @$order['assignment']['current'];
                                            if ($assignment) {
                                                $fields = array(
                                                    'platform_order_id' => $platform_order_id,
                                                    'api_channel_id' => @$assignment['channelId'],
                                                    'api_owner_id' => @$assignment['staffOwnerContactId'],
                                                    'closed_on' => @$order['closedOn'] ? $order['closedOn'] : null,
                                                    'parent_order_id' => @$order['parentOrderId'] ? $order['parentOrderId'] : 0,
                                                    'exchange_rate' => @$order['currency']['exchangeRate'] ? $order['currency']['exchangeRate'] : 0,
                                                    'is_drop_ship' => $is_drop_ship,
                                                );

                                                $findRecord = $this->mobj->getFirstResultByConditions('platform_order_additional_information', ['platform_order_id' => $platform_order_id], ['id']);
                                                if (!empty($findRecord->id)) {
                                                    $this->mobj->makeUpdate('platform_order_additional_information', $fields, ['id' => $findRecord->id]);

                                                    $data_fetched_types[] = 'additional_information';
                                                } else {
                                                    $additional_information = $this->mobj->makeInsertGetId('platform_order_additional_information', $fields);
                                                    if ($additional_information) {
                                                        $data_fetched_types[] = 'additional_information';
                                                    }
                                                }
                                            }

                                            $platform_customer_id = 0;
                                            /** save customer/supplier details */
                                            if (($order['orderTypeCode'] == 'PO' && isset($order['parties']['supplier'])) || ($order['orderTypeCode'] == 'SO' && isset($order['parties']['customer'])) || ($order['orderTypeCode'] == 'SC' && isset($order['parties']['customer']))) {
                                                $supplier = ($order['orderTypeCode'] == 'PO') ? $order['parties']['supplier'] : $order['parties']['customer'];

                                                $contact_id = $supplier['contactId'];
                                                $fields = array(
                                                    'user_id' => $userId,
                                                    'user_integration_id' => $userIntegrationId,
                                                    'platform_id' => $ufound->platform_id,
                                                    'api_customer_id' => $contact_id,
                                                    'customer_name' => @$supplier['addressFullName'],
                                                    'company_name' => @$supplier['companyName'],
                                                    'phone' => ((@$supplier['telephone']) ? @$supplier['telephone'] : @$supplier['mobileTelephone']),
                                                    'email' => $supplier['email'],
                                                    'address1' => @$supplier['addressLine1'],
                                                    'address2' => @$supplier['addressLine2'],
                                                    'address3' => @$supplier['addressLine3'],
                                                    'postal_addresses' => @$supplier['postalCode'],
                                                    'country' => @$supplier['countryIsoCode'],
                                                );

                                                $findCustomer = $this->mobj->getFirstResultByConditions('platform_customer', ['platform_id' => $ufound->platform_id, 'api_customer_id' => (string)$contact_id, 'user_integration_id' => $userIntegrationId], ['id']);
                                                if (!empty($findCustomer->id)) {
                                                    $platform_customer_id = $findCustomer->id;
                                                    $this->mobj->makeUpdate('platform_customer', $fields, ['id' => $platform_customer_id]);
                                                    $data_fetched_types[] = 'customer';
                                                } else {
                                                    $fields['sync_status'] = 'Ready';
                                                    $platform_customer_id = $this->mobj->makeInsertGetId('platform_customer', $fields);
                                                    if ($platform_customer_id) {
                                                        $data_fetched_types[] = 'customer';
                                                    }
                                                }

                                                if ($platform_customer_id) {
                                                    $this->mobj->makeUpdate('platform_order', ['platform_customer_id' => $platform_customer_id], ['id' => $platform_order_id]);
                                                }

                                                //Calling Only For Additional Info
                                                if ($platform_customer_id && in_array($destination_platform_id, Config::get('apisettings.GetContact'))) {
                                                    $this->GetAdditionalDetailsOfContact($ufound, $platform_customer_id, $contact_id);
                                                }
                                            }

                                            /** save order billing address */
                                            if (!empty($order['parties']['billing'])) {
                                                $supplier = $order['parties']['billing'];

                                                $fields = array(
                                                    'platform_order_id' => $platform_order_id,
                                                    'address_type' => 'billing',
                                                    'address_name' => @$supplier['addressFullName'],
                                                    'company' => @$supplier['companyName'],
                                                    'phone_number' => ((@$supplier['telephone']) ? @$supplier['telephone'] : @$supplier['mobileTelephone']),
                                                    'email' => @$supplier['email'],
                                                    'address1' => @$supplier['addressLine1'],
                                                    'address2' => @$supplier['addressLine2'],
                                                    'address3' => @$supplier['addressLine3'],
                                                    'address4' => @$supplier['addressLine4'],
                                                    'city' => @$supplier['addressLine3'],
                                                    'state' => @$supplier['addressLine4'],
                                                    'postal_code' => @$supplier['postalCode'],
                                                    'country' => @$supplier['countryIsoCode'],
                                                );

                                                $findRecord = $this->mobj->getFirstResultByConditions('platform_order_address', ['platform_order_id' => $platform_order_id, 'address_type' => 'billing'], ['id']);
                                                if (!empty($findRecord->id)) {
                                                    $this->mobj->makeUpdate('platform_order_address', $fields, ['id' => $findRecord->id]);
                                                    $data_fetched_types[] = 'billing_address';
                                                } else {
                                                    $billing_platform_order_address = $this->mobj->makeInsertGetId('platform_order_address', $fields);
                                                    if ($billing_platform_order_address) {
                                                        $data_fetched_types[] = 'billing_address';
                                                    }
                                                }
                                            }

                                            /** save order delivery address */
                                            if (!empty($order['parties']['delivery'])) {
                                                $supplier = $order['parties']['delivery'];

                                                $fields = array(
                                                    'platform_order_id' => $platform_order_id,
                                                    'address_type' => 'shipping',
                                                    'address_name' => @$supplier['addressFullName'],
                                                    'company' => @$supplier['companyName'],
                                                    'phone_number' => ((@$supplier['telephone']) ? @$supplier['telephone'] : @$supplier['mobileTelephone']),
                                                    'email' => @$supplier['email'],
                                                    'address1' => @$supplier['addressLine1'],
                                                    'address2' => @$supplier['addressLine2'],
                                                    'address3' => @$supplier['addressLine3'],
                                                    'address4' => @$supplier['addressLine4'],
                                                    'city' => @$supplier['addressLine3'],
                                                    'state' => @$supplier['addressLine4'],
                                                    'postal_code' => @$supplier['postalCode'],
                                                    'country' => @$supplier['countryIsoCode'],
                                                );

                                                $findRecord = $this->mobj->getFirstResultByConditions('platform_order_address', ['platform_order_id' => $platform_order_id, 'address_type' => 'shipping'], ['id']);
                                                if (!empty($findRecord->id)) {
                                                    $this->mobj->makeUpdate('platform_order_address', $fields, ['id' => $findRecord->id]);

                                                    $data_fetched_types[] = 'shipping_address';
                                                } else {
                                                    $shipping_platform_order_address = $this->mobj->makeInsertGetId('platform_order_address', $fields);
                                                    if ($shipping_platform_order_address) {
                                                        $data_fetched_types[] = 'shipping_address';
                                                    }
                                                }
                                            }

                                            $lines = $exits_platform_order_line_ids = [];

                                            $lines = $order['orderRows'];
                                            if ($userIntegrationId == 501) {
                                                Log::channel('webhook')->info("SC_Line_Items - SCOrderID= " . $order['id'] . " UserID=" . $userId . " Integration " . $userIntegrationId . " Response: " . print_r($lines, true) . " Created Date : " . date('Y-m-d H:i:s'));
                                            }

                                            /** save order line items */
                                            if (!empty($order['orderRows'])) {
                                                $lines = $order['orderRows'];
                                                foreach ($lines as $line_id => $line) {
                                                    $fields = array(
                                                        'platform_order_id' => $platform_order_id,
                                                        'api_order_line_id' => $line_id,
                                                        'api_product_id' => @$line['productId'],
                                                        'product_name' => @$line['productName'],
                                                        'sku' => @$line['productSku'],
                                                        'qty' => ((!empty($line['quantity']['magnitude'])) ? $line['quantity']['magnitude'] : 0),
                                                        'unit_price' => ((!empty($line['itemCost']['value'])) ? $line['itemCost']['value'] : 0),
                                                        'price' => @$line['productPrice']['value'] ? @$line['productPrice']['value'] : 0,
                                                        'total' => ((!empty($line['rowValue']['rowNet']['value'])) ? $line['rowValue']['rowNet']['value'] : 0),
                                                        'total_tax' => ((!empty($line['rowValue']['rowTax']['value'])) ? $line['rowValue']['rowTax']['value'] : 0),
                                                        'subtotal' => ((!empty($line['rowValue']['rowNet']['value'])) ? $line['rowValue']['rowNet']['value'] : 0),
                                                        'subtotal_tax' => ((!empty($line['rowValue']['rowTax']['value'])) ? $line['rowValue']['rowTax']['value'] : 0),
                                                        'taxes' => @$line['rowValue']['taxClassId'], 'api_code' => @$line['nominalCode'],
                                                        'row_type' => isset($line['nominalCode']) ? BrightpearlServices::getBPLineItemType($additionalAccountInfo, $line['nominalCode']) : 'ITEM',
                                                    );

                                                    $findRecord = $this->mobj->getFirstResultByConditions('platform_order_line', ['platform_order_id' => $platform_order_id, 'api_order_line_id' => $line_id], ['id']);
                                                    if (isset($findRecord->id)) {
                                                        $exits_platform_order_line_ids[] = $findRecord->id;

                                                        $this->mobj->makeUpdate('platform_order_line', $fields, ['id' => $findRecord->id]);
                                                        if (!in_array('line_item', $data_fetched_types)) {
                                                            $data_fetched_types[] = 'line_item';
                                                        }
                                                        $line_item_count++;
                                                    } else {
                                                        $platform_order_line = $this->mobj->makeInsertGetId('platform_order_line', $fields);

                                                        $exits_platform_order_line_ids[] = $platform_order_line;

                                                        if ($platform_order_line && !in_array('line_item', $data_fetched_types)) {
                                                            $data_fetched_types[] = 'line_item';
                                                        }
                                                        $line_item_count++;
                                                    }

                                                    /** Save Product */
                                                    if (!empty($line['productId'])) {
                                                        $productId = $line['productId'];

                                                        $fields = array(
                                                            'user_id' => $userId,
                                                            'user_integration_id' => $userIntegrationId,
                                                            'platform_id' => $ufound->platform_id,
                                                            'api_product_id' => $productId,
                                                            //'product_name'=>@$line['productName'],
                                                            'sku' => @$line['productSku'],
                                                            //'price'=>((!empty($line['itemCost']['value'])) ? $line['itemCost']['value'] : 0)
                                                        );

                                                        $findRecord = $this->mobj->getFirstResultByConditions('platform_product', ['platform_id' => $ufound->platform_id, 'api_product_id' => (string)$productId, 'user_integration_id' => $userIntegrationId], ['id']);

                                                        if (!empty($findRecord->id)) {
                                                            if (!in_array('product', $data_fetched_types)) {
                                                                $data_fetched_types[] = 'product';
                                                            }
                                                        } else {
                                                            $platform_product = $this->mobj->makeInsertGetId('platform_product', $fields);

                                                            if ($platform_product && !in_array('product', $data_fetched_types)) {
                                                                $data_fetched_types[] = 'product';
                                                            }
                                                        }
                                                    }
                                                }
                                            }

                                            if ($userIntegrationId == 501) {
                                                Log::channel('webhook')->info("After_SC_Line_Items - SCOrderID= " . $order['id'] . " UserID=" . $userId . " Integration " . $userIntegrationId . " Response: " . print_r($lines, true) . " Created Date : " . date('Y-m-d H:i:s'));
                                            }

                                            if ($is_updates_allowed == 1 && (($type == 'purchase_orders' && in_array($order['orderStatus']['name'], $ChangesStatusAllowed)) || ($type == 'sales_orders' && (($is_acknowledge == 1 && $order['acknowledged'] == 1) || $is_acknowledge == 0)))) {
                                                if ($platform_order_id) {
                                                    PlatformOrderLine::where('platform_order_id', $platform_order_id)->whereNotIn('id', $exits_platform_order_line_ids)->delete();
                                                }
                                            }

                                            $this->mobj->makeUpdate('platform_custom_field_values', ['status' => 0], ['record_id' => $platform_order_id, 'user_integration_id' => $userIntegrationId, 'platform_id' => $this->platformId]);
                                            /** save order custom fields */
                                            if (!empty($order['customFields']) && !$isUpdate) {
                                                $customFields = $order['customFields'];

                                                $ObjectId = $type == 'purchase_orders' ? $this->helper->getObjectId('purchase_order') : $this->helper->getObjectId('sales_order');

                                                foreach ($customFields as $code => $customField) {
                                                    $findRecord = $this->mobj->getFirstResultByConditions('platform_fields', ['platform_id' => $ufound->platform_id, 'user_integration_id' => $userIntegrationId, 'field_type' => 'custom', 'name' => $code, 'platform_object_id' => $ObjectId, 'status' => 1], ['id']);
                                                    if ($findRecord) {
                                                        $customFieldValue = '';
                                                        if (is_array($customField)) {
                                                            $customFieldValue = @$customField['value'];
                                                        } else {
                                                            $customFieldValue = $customField;
                                                        }

                                                        $fields = array('platform_field_id' => $findRecord->id, 'user_integration_id' => $userIntegrationId, 'platform_id' => $ufound->platform_id, 'field_value' => $customFieldValue, 'record_id' => $platform_order_id, 'status' => 1);

                                                        $findRecord = $this->mobj->getFirstResultByConditions('platform_custom_field_values', ['record_id' => $platform_order_id, 'platform_field_id' => $findRecord->id, 'user_integration_id' => $userIntegrationId, 'platform_id' => $ufound->platform_id], ['id']);
                                                        if ($findRecord) {
                                                            $this->mobj->makeUpdate('platform_custom_field_values', $fields, ['id' => $findRecord->id]);
                                                        } else {
                                                            $this->mobj->makeInsert('platform_custom_field_values', $fields);
                                                        }
                                                    }
                                                }
                                            }

                                            if ($type != 'sales_order_invoices' && $type != 'sales_credit_invoices') {
                                                $this->mobj->makeUpdate('platform_order', ['sync_status' => 'Ready'], ['id' => $platform_order_id]);
                                            }

                                            if ($type == 'sales_orders' && in_array($destination_platform_id, Config::get('apisettings.BpSOStatusCheckUpdate')) && $platform_order && $platform_order->linked_id) {
                                                if ($new_order_status == $old_order_status) {
                                                    $this->mobj->makeUpdate('platform_order', ['sync_status' => 'Synced'], ['id' => $platform_order_id]);
                                                }
                                            }

                                            if (!empty($order['invoices'])) {
                                                foreach ($order['invoices'] as $invoice) {
                                                    $existingInvoice = PlatformInvoice::where(['platform_order_id' => $platform_order_id, 'api_invoice_id' => $invoice['invoiceReference']])->first();
                                                    if (!$existingInvoice) {
                                                        $newInvoice = new PlatformInvoice();
                                                        $newInvoice->user_id = $userId;
                                                        $newInvoice->platform_id = $ufound->platform_id;
                                                        $newInvoice->user_integration_id = $userIntegrationId;
                                                        $newInvoice->platform_order_id = $platform_order_id;
                                                        $newInvoice->api_invoice_id = $invoice['invoiceReference'];
                                                        $newInvoice->invoice_date = $invoice['taxDate'];
                                                        $newInvoice->due_date = $invoice['dueDate'];
                                                        $newInvoice->save();
                                                    }
                                                }
                                            }

                                            // REMOVED BECAUSE OF ORDER URL FAILURE - count($data_fetched_types) < 6
                                            if ($line_item_count < count($lines)) {
                                                $this->mobj->makeUpdate('platform_order', ['sync_status' => 'Pending', 'invoice_sync_status' => 'Pending'], ['id' => $platform_order_id]);
                                            } else {
                                                $processed_orders_count++;
                                            }

                                            if (isset($order['shippingStatusCode'])) {
                                                $this->mobj->makeUpdate('platform_order', ['shipment_api_status' => $order['shippingStatusCode']], ['id' => $platform_order_id]);
                                            }

                                            usleep(100000);
                                        }

                                        if ($processed_orders_count >= count($bsOrders['response'])) {
                                            $this->mobj->makeUpdate('platform_urls', ['status' => 1], ['id' => $url_obj->id]);
                                            if (($userIntegrationId == 80 && $url_obj->url_name == 'transfer_orders') || $processed_orders_count == 0) {
                                                Storage::disk('local')->append('BP_Order_URL_Response_' . date("Y_m_d") . '.txt', 'User Integration Id: ' . $userIntegrationId . ', URL: ' . $url . ', processed count: ' . $processed_orders_count . ', response count: ' . count($bsOrders['response']) . ', URL Response: ' . json_encode($bsOrders, true) . PHP_EOL);
                                            }
                                        } else {
                                            $this->mobj->makeUpdate('platform_urls', ['status' => 0], ['id' => $url_obj->id]);
                                        }

                                        // \DB::commit();
                                    } else {
                                        PlatformUrl::where(['user_integration_id' => $userIntegrationId, 'platform_id' => $ufound->platform_id])
                                            ->where('id', $url_obj->id)->update(['status' => 2]);

                                        $error_msg = 1;
                                        $error_msg_arr[] = $response->getBody();
                                    }
                                }

                                //added po
                                if ($nextTimelog && ($type == 'transfer_orders' || $type == 'invoice_orders' || $type == 'sales_orders' || $type == 'purchase_orders' )) {
                                    $url_name = 'invoice_order_timelog';
                                    if ($type == 'transfer_orders') {
                                        $url_name = 'transfer_order_timelog';
                                    } elseif ($type == 'sales_orders') {
                                        $url_name = 'sales_order_timelog';
                                    } elseif ($type == 'purchase_orders') {
                                        //new added on 16-08-2023
                                        $url_name = 'purchase_order_timelog';
                                    }

                                    if ($url_obj->url_filter) {
                                        $nextRef = PlatformUrl::where(['user_integration_id' => $userIntegrationId, 'platform_id' => $ufound->platform_id, 'url_name' => $url_name, 'url_filter' => $url_obj->url_filter])->first();
                                    } else {
                                        $nextRef = PlatformUrl::where(['user_integration_id' => $userIntegrationId, 'platform_id' => $ufound->platform_id, 'url_name' => $url_name])->whereNull('url_filter')->first();
                                    }

                                    if ($nextRef) {
                                        $nextRef->url = $nextTimelog;
                                        $nextRef->allow_retain = 1;
                                    } else {
                                        $nextRef = new PlatformUrl();
                                        $nextRef->user_id = $userId;
                                        $nextRef->user_integration_id = $userIntegrationId;
                                        $nextRef->platform_id = $ufound->platform_id;
                                        $nextRef->url_name = $url_name;
                                        $nextRef->url_filter = $url_obj->url_filter;
                                        $nextRef->url = $nextTimelog;
                                        $nextRef->status = 1;
                                        $nextRef->allow_retain = 1;
                                    }
                                    $nextRef->save();
                                }
                            }
                        }

                        $return_response = count($array) . "- array chunks processed";
                    } else {
                        $return_response = true;
                    }

                    if ($error_msg) {
                        return implode(',', $error_msg_arr);
                    }

                    return $return_response;
                }
            }
        } catch (\Exception $e) {
            //\DB::rollback();
            Log::error($userIntegrationId . "--GetOrdersByType-->" . $e->getMessage() . " At " . $e->getLine());
            return $e->getMessage();
        }
    }

    //GET Additional Detail Of Contact/Customer/Supplier
    public function GetAdditionalDetailsOfContact($account, $platform_customer_id = null, $contact_id, $user_id = null, $user_integration_id = null)
    {
        $url = "contact/" . $contact_id;
        $response = $this->bp->GetCustomers($account, $url);
        if ($res = json_decode($response->getBody(), true)) {
            if (!empty($res) && isset($res['response']) && is_array($res['response'])) {
                $val = @$res['response'][0];
                $account_code = @$res['response'][0]['assignment']['current']['accountReference'];

                $fields = [];
                if (isset($val['contactId']) && isset($val['communication']['emails'])) {
                    $contact_id = $val['contactId'];
                    $first_name = $last_name = $email = $company_id = null;

                    if (isset($val['firstName'])) {
                        $first_name = $val['firstName'];
                    }

                    if (isset($val['lastName'])) {
                        $last_name = $val['lastName'];
                    }

                    if (isset($val['communication'])) {
                        if (isset($val['communication']['emails']['PRI'])) {
                            $email = $val['communication']['emails']['PRI']['email'];
                        } elseif (isset($val['communication']['emails']['SEC'])) {
                            $email = $val['communication']['emails']['SEC']['email'];
                        } elseif (isset($val['communication']['emails']['TER'])) {
                            $email = $val['communication']['emails']['TER']['email'];
                        }
                    }

                    if (isset($val['companyId'])) {
                        $company_id = $val['companyId'];
                    }

                    $fields = array('user_id' => $user_id, 'user_integration_id' => $user_integration_id, 'platform_id' => $this->platformId, 'api_customer_id' => $contact_id, 'first_name' => $first_name, 'last_name' => $last_name, 'email' => $email, 'company_id' => $company_id, 'customer_name' => $first_name . " " . $last_name, 'api_updated_at' => $val['updatedOn'], 'api_customer_code' => $account_code);

                    // Customer PriceList Id
                    if (isset($val['financialDetails']) && isset($val['financialDetails']['priceListId'])) {
                        $fields['api_customer_group_id'] = $val['financialDetails']['priceListId'];
                    }

                    //if Customer type is staff
                    if (isset($val['relationshipToAccount']) && $val['relationshipToAccount']['isStaff'] == true) {
                        $fields['type'] = 'Employee';
                    } elseif (isset($val['relationshipToAccount']) && $val['relationshipToAccount']['isSupplier'] == true) {
                        $fields['type'] = 'Vendor';
                    } else {
                        $fields['type'] = 'Customer';
                    }
                }

                if ($platform_customer_id) {
                    $this->mobj->makeUpdate('platform_customer', ['api_customer_code' => $account_code], ['id' => $platform_customer_id]);
                } else {
                    if (!empty($fields)) {
                        $platform_customer_id = $this->mobj->makeInsertGetId('platform_customer', $fields);
                    }
                }

                return $platform_customer_id;
            }
        }
    }

    // GET GOOD IN NOTE FOR PO
    public function GetGoodsInNotes($GoodsID, $userIntegrationId)
    {
        try {
            $ufound = $this->mobj->getPlatformAccountByUserIntegration($userIntegrationId, $this->platformId, ['access_token', 'platform_id', 'id', 'user_id', 'api_domain', 'account_name', 'app_id', 'app_secret']);
            if ($ufound) {
                $response = $this->bp->GetGoodsInNotes($ufound, null, $GoodsID);
                if ($res = json_decode($response->getBody(), true)) {
                    return $res;
                }
                return false;
            }
        } catch (\Exception $e) {
            Log::error($e->getMessage());
            return false;
        }
    }

    /* Receive PO good in note webhook from BP */
    public function ReceiveGoodsInNoteWebhook(Request $request, $userIntegrationId)
    {
        // Log::info( "ReceiveGoodsInNoteWebhook: ".$request." userIntegrationId: ".$userIntegrationId );
        $mainArr = $InsertData = [];
        if ($request->isMethod('post')) {

            $EventID = "GET_GOODSINNOTE";
            $user_work_flow = [];

            $integration = $this->map->getUserIntegrationDetailsById($userIntegrationId, self::$myPlatform);
            if ($integration) {
                $userId = $integration->user_id;
                $selectFields = ['e.event_id', 'ur.user_id', 'ur.status'];
                $user_work_flow = $this->map->getUserIntegWorkFlow($userIntegrationId, $EventID, $selectFields, self::$myPlatform);

                if (isset($user_work_flow[$EventID])) {
                    $userId = $user_work_flow[$EventID]['user_id'];
                    /* Check whether shipment is ON or OFF */
                    // Log::info( "ReceiveGoodsInNoteWebhook: INArr".in_array($EventID, $user_work_flow) );
                    if ($user_work_flow[$EventID]['status'] == 1) {

                        $body = $request->getContent();
                        $result_data = json_decode($body, 1);
                        // Log::info( "ReceiveGoodsInNoteWebhook: resultData: ".json_encode( $result_data ) );
                        if ($result_data && isset($result_data['id'])) {
                            $product_ids = $result_data['id'];
                            $arr = explode(",", $product_ids);
                            $mainArr = $InsertData = [];
                            foreach ($arr as $val) {
                                if (strpos($val, "-")) {
                                    $break_dash = explode("-", $val);
                                    $range_ids = range($break_dash[0], $break_dash[1]);
                                    foreach ($range_ids as $key) {
                                        array_push($mainArr, $key);
                                    }
                                } else {
                                    array_push($mainArr, $val);
                                }
                            }

                            $mainArr = array_unique($mainArr);
                            if (!empty($mainArr)) {
                                $mainArr = array_unique($mainArr);
                                foreach ($mainArr as $goods_id) {
                                    array_push($InsertData, ['user_id' => $userId, 'platform_id' => $this->platformId, 'user_integration_id' => $userIntegrationId, 'shipment_id' => $goods_id, 'type' => "POShipment", 'sync_status' => "Pending"]);
                                }

                                if (!empty($InsertData)) {
                                    $this->mobj->makeInsert('platform_order_shipments', $InsertData);
                                }
                            }
                        }
                    }
                }
            }
        }

        return json_encode($InsertData);
    }

    /* Process  Good Note In And Get Info update in Table */
    /* Get Goods In Notes */
    public function GetPOGoodsInNotes($userId = null, $userIntegrationId = null, $UserWorkFlow = null, array $wooksType, $attempt = 1, $is_initial_syn, $SourcePlatformName = null, $sync_status = 'Pending')
    {
        // Log::info( 'GetPOGoodsInNotes:- UserWorkFlow: '.$UserWorkFlow.'wooksType: '.json_encode( $wooksType ).' attempt: '.$attempt.' is_initial_syn: '.$is_initial_syn.' sync_status: '.$sync_status );
        $return_response = true;
        try {
            $process_limit = 500;
            $offset = 1;
            $ufound = $this->mobj->getPlatformAccountByUserIntegration($userIntegrationId, $this->platformId, ['app_id', 'app_secret', 'platform_id', 'id', 'user_id', 'api_domain', 'access_token', 'account_name']);
            if ($ufound) {
                if ($attempt == 1 && ($is_initial_syn == 1 || $is_initial_syn == 0)) {
                    // set webhook & pull goods in data
                    if ($is_initial_syn) {
                        $this->CreateOrDeleteWebhook($userId, $userIntegrationId, $wooksType, $attempt);
                    }

                    $check_platform_url = $this->mobj->getFirstResultByConditions('platform_urls', ['url_name' => 'goodsinnote', 'user_integration_id' => $userIntegrationId, 'platform_id' => $this->platformId, 'status' => 0], ['id']);
                    if ($is_initial_syn || is_null($check_platform_url)) {
                        $sync_start_date = date('Y-m-d\TH:00:00', strtotime('-1 day'));

                        if ($is_initial_syn) {
                            $getflowEvents = $this->wfsnip->getWorkflowEvents($UserWorkFlow);

                            if ($getflowEvents && $getflowEvents->sync_start_date) {
                                $sync_start_date = str_replace(' ', 'T', trim($getflowEvents->sync_start_date));
                            }
                            // To fetch offset limit from platform url as 'goodsin_process_limit'
                            $platform_urls_process_limit = $this->platformUrl->where(['user_integration_id' => $userIntegrationId, 'platform_id' => $this->platformId, 'url_name' => 'goodsin_process_limit'])->select('url')->first();
                            if ($platform_urls_process_limit) {
                                $offset = $platform_urls_process_limit->url;
                            }
                        } else {
                            $sync_start_date = date('Y-m-d\TH:00:00', strtotime('-1 hour'));
                            //Get last fetched order's time
                            $platform_url = $this->platformUrl->where(['url_name' => 'goodsin_lasttime', 'user_integration_id' => $userIntegrationId, 'platform_id' => $this->platformId])->select('url')->first();
                            if ($platform_url) {
                                //$sync_start_date = str_replace(' ', 'T', trim($platform_url->url));

                                $sync_start_date = new DateTime($platform_url->url);
                                $sync_start_date->modify('-1 second');
                                $sync_start_date = $sync_start_date->format(DateTime::ATOM);

                                //$sync_start_date = date(DATE_ISO8601, strtotime($sync_start_date));

                                $sync_start_date = str_replace(' ', 'T', trim($sync_start_date));
                            }
                        }

                        $sync_start_date = str_replace('+', '%2B', $sync_start_date);

                        $url = '/warehouse-service/goods-movement-search/?columns=goodsNoteId&goodsNoteTypeCode=GI&pageSize=' . $process_limit . '&sort=updatedOn|ASC&firstResult=' . $offset . '&updatedOn=' . $sync_start_date . '/';

                        $response = $this->bp->GetGoodsInNotes($ufound, $url, null);
                        if ($bsgoods = json_decode($response->getBody(), true)) {
                            if (!empty($bsgoods) && isset($bsgoods['response']['results']) && is_array($bsgoods['response']['results']) && count($bsgoods['response']['results'])) {
                                $goodsInIds = array_column($bsgoods['response']['results'], 0);
                                $goodsInIds = array_unique($goodsInIds);
                                sort($goodsInIds);

                                $order_uris = [];

                                $goods_urls = array_chunk($goodsInIds, 40);
                                foreach ($goods_urls as $goods_url) {
                                    $goods_chunk_url = '/order/*/goods-note/goods-in/' . implode(',', $goods_url);
                                    $platform_goods = $this->platformUrl->where(['url' => $goods_chunk_url, 'user_integration_id' => $userIntegrationId, 'platform_id' => $this->platformId, 'url_name' => 'goodsinnote'])->select('id')->first();
                                    if (empty($platform_goods)) {
                                        $order_uris[] = ['url' => $goods_chunk_url, 'user_id' => $userId, 'platform_id' => $this->platformId, 'user_integration_id' => $userIntegrationId, 'url_name' => 'goodsinnote'];
                                    }
                                }

                                if (!empty($order_uris)) {
                                    $this->mobj->makeInsert('platform_urls', $order_uris);
                                }

                                if ($is_initial_syn) { // offset update and store in platform url for intial sync
                                    $return_response = $process_limit . ' Record processed';
                                    $offset = ($offset == 1) ? $process_limit : $offset + $process_limit;
                                    $this->platformUrl->updateOrCreate(['user_integration_id' => $userIntegrationId, 'platform_id' => $this->platformId, 'url_name' => 'goodsin_process_limit'], ['user_id' => $userId, 'platform_id' => $this->platformId, 'user_integration_id' => $userIntegrationId, 'url_name' => 'goodsin_process_limit', 'url' => $offset]);
                                }
                            } else {
                                if ($bsgoods_res = json_decode($response->getBody(), true)) {
                                    $return_response = $response->getBody();
                                } else {
                                    $return_response = 'Response body not found';
                                }
                            }
                        }
                    }
                    return $return_response;
                } elseif ($attempt == 2 && ($is_initial_syn == 1 || $is_initial_syn == 0)) {
                    // To pull goods in from BP passing urls
                    $urls = $this->mobj->getResultByConditions('platform_urls', ['status' => 0, 'platform_id' => $this->platformId, 'user_integration_id' => $userIntegrationId, 'url_name' => 'goodsinnote'], ['id', 'url'], ['created_at' => 'asc'], 10);
                    $array = json_decode(json_encode($urls), true);

                    $limit = ($is_initial_syn) ? 3 : 1;
                    $chunkOfUrls = array_chunk($array, $limit, true);

                    if (!empty($chunkOfUrls)) {
                        foreach ($chunkOfUrls as $chunk) {
                            foreach ($chunk as $url) {
                                $url = (object) $url;
                                $main_url = '/warehouse-service' . $url->url;
                                $main_url_id = $url->id;

                                $res = $this->bp->GetGoodsInNotes($ufound, $main_url, null);
                                $response = json_decode($res->getBody(), true);
                                if (!empty($response) && isset($response['response']) && is_array($response['response'])) {
                                    $deleteRow = $orderIds = [];
                                    $createdAt = null;
                                    foreach ($response['response'] as $key => $value) {
                                        if (isset($value['orderId'])) {
                                            $createdAt = @$value['receivedOn'];
                                            $OrderPrimary = $this->FindOrderID($value['orderId'], $userId, $this->platformId, $userIntegrationId);

                                            if ($OrderPrimary) {
                                                /* Store Order IDs for checking order status */
                                                $List = [
                                                    'user_id' => $userId,
                                                    'platform_id' => $this->platformId,
                                                    'user_integration_id' => $userIntegrationId,
                                                    //'sync_status'=>'Ready',
                                                    'order_id' => @$value['orderId'],
                                                    'shipment_transfer' => @$value['transfer'],
                                                    'shipment_status' => @$value['goodsNoteStatus'],
                                                    'created_on' => @$value['receivedOn'],
                                                    'created_by' => @$value['createdBy'],
                                                    'shipment_id' => $key,
                                                    'type' => 'POShipment',
                                                    'platform_order_id' => $OrderPrimary,
                                                ];

                                                $platform_order_shipment_id = '';
                                                $lastId_ship = $this->platformOrderShipment->where(['platform_id' => $this->platformId, 'user_integration_id' => $userIntegrationId, 'type' => 'POShipment', 'shipment_id' => (string)$key])->select('id', 'sync_status')->first();
                                                if ($lastId_ship) {
                                                    $platform_order_shipment_id = $lastId_ship->id;

                                                    if ($lastId_ship->sync_status == 'Pending' || $lastId_ship->sync_status == 'Failed') {
                                                        array_push($orderIds, $value['orderId']);
                                                        $List['sync_status'] = 'Ready';
                                                    }

                                                    $this->mobj->makeUpdate('platform_order_shipments', $List, ['platform_id' => $this->platformId, 'user_integration_id' => $userIntegrationId, 'shipment_id' => $key]);
                                                } else {
                                                    array_push($orderIds, $value['orderId']);
                                                    $List['sync_status'] = 'Ready';
                                                    $platform_order_shipment_id = $this->mobj->makeInsertGetId('platform_order_shipments', $List);
                                                }

                                                if ($platform_order_shipment_id != '') {
                                                    $Items = [];
                                                    foreach ($value['goodsMoved'] as $ikey => $ivalue) {
                                                        $ct_ship_line = $this->mobj->getCountsByConditions('platform_order_shipment_lines', ['platform_order_shipment_id' => $platform_order_shipment_id]);
                                                        if ($ct_ship_line == 0) {
                                                            array_push($Items, [
                                                                'platform_order_shipment_id' => $platform_order_shipment_id,
                                                                'row_id' => @$ivalue['purchaseOrderRowId'],
                                                                'product_id' => @$ivalue['productId'],
                                                                'location_id' => @$ivalue['destinationLocationId'],
                                                                'warehouse_id' => @$ivalue['warehouseId'],
                                                                'currency' => @$ivalue['productValue']['currency'],
                                                                'price' => @$ivalue['productValue']['value'],
                                                                'quantity' => @$ivalue['quantity'],
                                                                'user_batch_reference' => isset($value['userBatchReference']) ? $value['userBatchReference'] : null,
                                                            ]);
                                                        }
                                                    }

                                                    if (!empty($Items)) {
                                                        $this->mobj->makeInsert('platform_order_shipment_lines', $Items);
                                                    }
                                                }
                                            } else {
                                                /* push unused record shipment id */
                                                array_push($deleteRow, (string)$key);
                                            }
                                        }
                                    }

                                    if ($is_initial_syn == 0 && $createdAt) {
                                        $this->platformUrl->updateOrCreate(['user_integration_id' => $userIntegrationId, 'platform_id' => $this->platformId, 'url_name' => 'goodsin_lasttime'], ['user_id' => $userId, 'platform_id' => $this->platformId, 'user_integration_id' => $userIntegrationId, 'url_name' => 'goodsin_lasttime', 'url' => $createdAt]);
                                    }

                                    if (!empty($deleteRow)) {
                                        $platform_order_shipment_ids = DB::table('platform_order_shipments')->select('id')->whereIn('shipment_id', $deleteRow)->where(['user_integration_id' => $userIntegrationId, 'platform_id' => $this->platformId, 'type' => 'POShipment'])->pluck('id')->toArray();
                                        if (count($platform_order_shipment_ids)) {
                                            DB::table('platform_order_shipments')->whereIn('id', $platform_order_shipment_ids)
                                                ->update(['updated_at' => date('Y-m-d H:i:s')]);

                                            $oneWeekBackDate = date('Y-m-d', strtotime('-7 days'));
                                            // Delete unused record if not match with order
                                            DB::table('platform_order_shipments')->whereIn('id', $platform_order_shipment_ids)->whereDate('created_at', '<=', $oneWeekBackDate)->whereDate('updated_at', '=', date('Y-m-d'))->delete();
                                        }
                                    }

                                    if (!empty($orderIds)) {
                                        $orderIds = array_unique($orderIds);

                                        DB::table('platform_order')->where(['user_integration_id' => $userIntegrationId, 'platform_id' => $this->platformId, 'order_type' => 'PO'])->whereIn('api_order_id', $orderIds)
                                            ->update(['shipment_status' => 'Ready']);
                                    }

                                    if ($createdAt) {
                                        $this->mobj->makeUpdate('platform_urls', ['status' => 1], ['id' => $main_url_id]);
                                    }
                                } else {
                                    if (isset($response['response'])) {
                                        $return_response = $response['response'];
                                    }
                                }
                            }
                        }
                        $return_response = count($array) . '- array chunks processed';
                    } else {
                        $return_response = true;
                        // not having data
                    }

                    return $return_response;
                } elseif ($attempt == 3 && $is_initial_syn == 0) {
                    $list = $this->mobj->getResultByConditions('platform_order_shipments', ['platform_id' => $this->platformId, 'user_integration_id' => $userIntegrationId, 'type' => 'POShipment', 'sync_status' => $sync_status], ['shipment_id', 'updated_at'], ['updated_at' => 'asc'], 200);
                    $list = $list->pluck('shipment_id')->toArray();
                    if (!empty($list) && count($list) > 0) {
                        sort($list);
                        $GoodsIDs = implode(',', $list);
                        $requestGINs = $list;
                        // Log::info( 'GetPOGoodsInNotes: Ids: '. json_encode( $GoodsIDs ) );
                        $response = $this->GetGoodsInNotes($GoodsIDs, $userIntegrationId);
                        // Log::info( 'GetPOGoodsInNotes: GetGoodsInNotes: '. json_encode( $GoodsIDs ).', Response:'.json_encode( $response ) );
                        if (!empty($response) && isset($response['response']) && is_array($response['response'])) {
                            $responseGINs = $deleteRow = $orderIds = [];
                            foreach ($response['response'] as $key => $value) {
                                $responseGINs[] = $key;
                                if (isset($value['orderId'])) {
                                    $OrderPrimary = $this->FindOrderID($value['orderId'], $userId, $this->platformId, $userIntegrationId);
                                    if ($OrderPrimary) {
                                        /* Store Order IDs for checking order status */
                                        array_push($orderIds, $value['orderId']);
                                        $List = [
                                            'user_id' => $userId,
                                            'platform_id' => $this->platformId,
                                            'user_integration_id' => $userIntegrationId,
                                            'sync_status' => 'Ready',
                                            'order_id' => @$value['orderId'],
                                            'shipment_transfer' => @$value['transfer'],
                                            'shipment_status' => @$value['goodsNoteStatus'],
                                            'created_on' => @$value['receivedOn'],
                                            'created_by' => @$value['createdBy'],
                                            'type' => 'POShipment',
                                            'platform_order_id' => $OrderPrimary,
                                        ];
                                        $this->mobj->makeUpdate('platform_order_shipments', $List, ['platform_id' => $this->platformId, 'user_integration_id' => $userIntegrationId, 'type' => 'POShipment', 'shipment_id' => $key, 'sync_status' => 'Pending']);

                                        $lastId = $this->mobj->getFirstResultByConditions('platform_order_shipments', ['shipment_id' => (string)$key, 'type' => 'POShipment', 'platform_id' => $this->platformId, 'user_integration_id' => $userIntegrationId], ['id']);
                                        if (isset($lastId->id) && $lastId->id != '') {
                                            $Items = [];
                                            foreach ($value['goodsMoved'] as $ikey => $ivalue) {
                                                $ct_ship_line = $this->mobj->getCountsByConditions('platform_order_shipment_lines', ['platform_order_shipment_id' => $lastId->id]);
                                                if ($ct_ship_line == 0) {
                                                    array_push($Items, [
                                                        'platform_order_shipment_id' => $lastId->id,
                                                        'row_id' => @$ivalue['purchaseOrderRowId'],
                                                        'product_id' => @$ivalue['productId'],
                                                        'location_id' => @$ivalue['destinationLocationId'],
                                                        'warehouse_id' => @$ivalue['warehouseId'],
                                                        'currency' => @$ivalue['productValue']['currency'],
                                                        'price' => @$ivalue['productValue']['value'],
                                                        'quantity' => @$ivalue['quantity'],
                                                        'user_batch_reference' => isset($value['userBatchReference']) ? $value['userBatchReference'] : null,
                                                    ]);
                                                }
                                            }

                                            if (!empty($Items)) {
                                                $this->mobj->makeInsert('platform_order_shipment_lines', $Items);
                                            }
                                        }
                                    } else {
                                        /* push unused record shipment id */
                                        array_push($deleteRow, $key);
                                    }
                                }
                            }

                            if (!empty($responseGINs) && count($requestGINs) != count($responseGINs)) {
                                $deleteGINs = array_diff($requestGINs, $responseGINs);

                                $platform_order_shipment_ids = DB::table('platform_order_shipments')->select('id')->whereIn('shipment_id', $deleteGINs)->where(['user_integration_id' => $userIntegrationId, 'platform_id' => $this->platformId, 'type' => 'POShipment'])->pluck('id')->toArray();
                                if (count($platform_order_shipment_ids)) {
                                    DB::table('platform_order_shipments')->whereIn('id', $platform_order_shipment_ids)->delete();
                                }
                            }

                            if (!empty($deleteRow)) {
                                $platform_order_shipment_ids = DB::table('platform_order_shipments')->select('id')->whereIn('shipment_id', $deleteRow)->where(['user_integration_id' => $userIntegrationId, 'platform_id' => $this->platformId, 'type' => 'POShipment'])->pluck('id')->toArray();
                                if (count($platform_order_shipment_ids)) {
                                    DB::table('platform_order_shipments')->whereIn('id', $platform_order_shipment_ids)
                                        ->update(['updated_at' => date('Y-m-d H:i:s')]);

                                    $oneWeekBackDate = date('Y-m-d', strtotime('-7 days'));
                                    // Delete unused record if not match with order
                                    DB::table('platform_order_shipments')->whereIn('id', $platform_order_shipment_ids)->whereDate('created_at', '<=', $oneWeekBackDate)->whereDate('updated_at', '=', date('Y-m-d'))->delete();
                                }
                            }

                            if (!empty($orderIds)) {
                                $orderIds = array_unique($orderIds);

                                DB::table('platform_order')->where(['user_integration_id' => $userIntegrationId, 'platform_id' => $this->platformId, 'order_type' => 'PO'])->whereIn('api_order_id', $orderIds)
                                    ->update(['shipment_status' => 'Ready']);
                            }
                        } else {
                            if (isset($response['response'])) {
                                $return_response = $response['response'];
                            }
                            DB::table('platform_order_shipments')->where(['user_integration_id' => $userIntegrationId, 'platform_id' => $this->platformId, 'type' => 'POShipment', 'sync_status' => $sync_status])->whereIn('shipment_id', $list)
                                ->update(['updated_at' => date('Y-m-d H:i:s')]);
                        }
                    }

                    return $return_response;
                }
            }
        } catch (\Exception $e) {
            Log::error($userIntegrationId . '--GetPOGoodsInNotes-->' . $e->getMessage());
            $return_response = $e->getMessage();
        }
        return $return_response;
    }

    public function GetCustomFieldsList($user_id, $user_integration_id, $object_name = 'purchase_order')
    {
        $return_response = false;
        try {
            $ufound = $this->mobj->getPlatformAccountByUserIntegration($user_integration_id, $this->platformId, ['access_token', 'platform_id', 'id', 'user_id', 'api_domain', 'account_name', 'app_id', 'app_secret']);

            if ($ufound && $this->platformId) {

                if (isset($ufound->platform_id) && $ufound->platform_id == $this->platformId) {
                    //for only BP integration

                    $object_id = $this->helper->getObjectId($object_name);

                    if (isset($object_id)) {

                        $response = $this->bp->GetCustomFieldsList($ufound, $object_name);

                        if ($list = json_decode($response->getBody(), false)) {

                            if (!empty($list) && isset($list->response) && is_array($list->response)) {

                                $this->mobj->makeUpdate('platform_fields', ['status' => 0], ['user_integration_id' => $user_integration_id, 'platform_id' => $this->platformId, 'platform_object_id' => $object_id]);

                                foreach ($list->response as $record) {

                                    //if($record->customFieldType == "TEXT")
                                    //  {
                                    $insertList = ['user_id' => $user_id, 'platform_id' => $this->platformId, 'user_integration_id' => $user_integration_id, 'name' => $record->code, 'custom_field_id' => $record->id, 'field_type' => 'custom', 'custom_field_type' => $record->customFieldType, 'description' => $record->name, 'status' => 1, 'type' => $object_name, 'required' => 'No', 'platform_object_id' => $object_id];
                                    $findRecord = $this->mobj->getFirstResultByConditions('platform_fields', [
                                        //'user_id' => $user_id,
                                        'user_integration_id' => $user_integration_id,
                                        'platform_id' => $this->platformId,
                                        'platform_object_id' => $object_id,
                                        'custom_field_id' => $record->id,
                                        'field_type' => 'custom',
                                        'type' => $object_name,
                                    ], ['id']);
                                    if ($findRecord) {
                                        $this->mobj->makeUpdate(
                                            'platform_fields',
                                            $insertList,
                                            ['id' => $findRecord->id]
                                        );
                                    } else {
                                        $this->mobj->makeInsert('platform_fields', $insertList);
                                    }
                                    //}
                                }
                            }
                            $return_response = true;
                        }
                    }
                }
            }
        } catch (\Exception $e) {
            Log::error($e->getMessage());
            $return_response = $e->getMessage();
        }
        return $return_response;
    }

    public function UpdateOrderStatusAndNotes($userId = null, $userIntegrationId = null, $PlatformWorkFlowRuleID = null, $UserWorkFlow = null, $SourcePlatformName = null, $order_type = "PO", $sync_status = "Ready", $RecordID = null)
    {

        $return_response = true;
        try {
            $recordExist = 0;
            $object_id = $this->helper->getObjectId('purchase_order');

            $ufound = $this->mobj->getPlatformAccountByUserIntegration($userIntegrationId, $this->platformId, ['access_token', 'platform_id', 'id', 'user_id', 'api_domain', 'account_name', 'app_id', 'app_secret']);

            $SourcePlatformId = $this->helper->getPlatformIdByName($SourcePlatformName);
            $SOurceUfound = $this->mobj->getPlatformAccountByUserIntegration($userIntegrationId, $SourcePlatformId, ['app_id', 'app_secret', 'platform_id', 'id', 'user_id', 'api_domain']);

            if ($ufound && $this->platformId && $SourcePlatformId && $SOurceUfound) {
                if (isset($ufound->platform_id) && $ufound->platform_id == $this->platformId) {


                    $wheredata = [
                        //'user_id' => $userId,
                        'user_integration_id' => $userIntegrationId,
                        'platform_id' => $SOurceUfound->platform_id,
                        'order_type' => $order_type,
                    ];

                    if ($RecordID && $RecordID !== 0) {
                        $wheredata['id'] = $RecordID;
                    } else {
                        $wheredata['sync_status'] = $sync_status;
                    }

                    $list = $this->mobj->getResultByConditions('platform_order', $wheredata, ['api_order_id', 'customer_email', 'order_status', 'order_number', 'notes', 'id', 'linked_id'], ['id' => 'asc'], 50);


                    if (!empty($list) && count($list) > 0) {
                        $recordExist = 1;

                        /*$account = $this->mobj->getFirstResultByConditions('platform_account_addtional_information', ['account_id'=>$ufound->id, 'user_integration_id'=>$userIntegrationId],  ['account_currency_code',  'account_shipping_nominal_code', 'account_discount_nominal_code', 'account_timezone'], ['id'=>'asc']);
                        dd($account);
                        if ($account) {
                        if (isset($account->account_timezone)) {

                        date_default_timezone_set($account->account_timezone);
                        }*/

                        foreach ($list as $key => $order) {
                            $id = $order->id;
                            $customer_email = $order->customer_email;
                            $notes = $order->notes;
                            $linked_id = $order->linked_id;
                            $order_status = $order->order_status;
                            $find = $this->FindOrderIDByLinkedID($order->linked_id, ["api_order_id"]);
                            $error = "";

                            $OrderStatus = $this->map->getMappedDataByName($userIntegrationId, $PlatformWorkFlowRuleID, "get_order_status", ['api_id'], "regular", $order_status, "single", "source", ['api_id', 'name']);
                            //dd($OrderStatusID);
                            $OrderStatusID = isset($OrderStatus->api_id) ? $OrderStatus->api_id : null;
                            $OrderStatusName = isset($OrderStatus->name) ? $OrderStatus->name : null;

                            if ($OrderStatusID) {

                                Storage::disk('local')->append('Bhoopendra.txt', "\r\n" . "UpdateOrderStatusAndNotes Date -> " . date('Y-m-d H:i:s') . "userIntegrationId : " . $userIntegrationId . " | api_order_id : " . $find->api_order_id . " | OrderStatusID : " . $OrderStatusID);

                                $changeStatus = $this->UpdateOrderStatus($ufound, $find->api_order_id, $OrderStatusID);
                                if (is_array($changeStatus)) {

                                    Storage::disk('local')->append('Bhoopendra.txt', "\r\n" . "UpdateOrderStatusAndNotes Date -> " . date('Y-m-d H:i:s') . "userIntegrationId : " . $userIntegrationId . " | changeStatus : " . json_encode($changeStatus, true));

                                    if (!isset($changeStatus['errors'])) {
                                        $this->mobj->makeUpdate('platform_order', ['sync_status' => 'Synced'], ['id' => $id]);
                                        $this->mobj->makeUpdate('platform_order', ['sync_status' => 'Synced'], ['id' => $linked_id]);

                                        $this->log->syncLog($userId, $userIntegrationId, $UserWorkFlow, $SourcePlatformId, $this->platformId, $object_id, 'success', $id, null);

                                        Storage::disk('local')->append('Bhoopendra.txt', "\r\n" . "UpdateOrderStatusAndNotes Date -> " . date('Y-m-d H:i:s') . "userIntegrationId : " . $userIntegrationId . " | api_order_id : " . $find->api_order_id . " | notes : " . $notes);

                                        // Adding order notes
                                        $ordernotes = $this->AddOrderNotes($ufound, $find->api_order_id, $notes);
                                        if (is_array($ordernotes)) {

                                            Storage::disk('local')->append('Bhoopendra.txt', "\r\n" . "UpdateOrderStatusAndNotes Date -> " . date('Y-m-d H:i:s') . "userIntegrationId : " . $userIntegrationId . " | ordernotes : " . json_encode($ordernotes, true));

                                            if (isset($ordernotes['errors']) && is_array($ordernotes['errors'])) {

                                                $error = $this->bp->handleResponseError($ordernotes);
                                            }
                                        }

                                        if ($OrderStatusName != null) {

                                            $body = 'Hello, <br/>You have received acknowledgement for order number ' . $find->api_order_id . ' <br/>Please check the below details -<br/>Order status changed in Brightpearl - ' . $OrderStatusName . '<br/>Order notes added under Brightpearl - ' . $notes . '<br/><br/>Thank you';
                                            $subject = 'Order Status Update to ' . $OrderStatusName;

                                            Storage::disk('local')->append('Bhoopendra.txt', "\r\n" . "UpdateOrderStatusAndNotes Date -> " . date('Y-m-d H:i:s') . "userIntegrationId : " . $userIntegrationId . " | api_order_id : " . $find->api_order_id . " | body : " . $body);

                                            $this->SendEmailNotificationToClients($userIntegrationId, $PlatformWorkFlowRuleID, $body, $subject);
                                        }
                                    } else if (isset($changeStatus['errors']) && is_array($changeStatus['errors'])) {

                                        $error = $this->bp->handleResponseError($changeStatus);
                                    } else {

                                        $error = isset($changeStatus['response']) ? ($changeStatus['response']) : "API Error";
                                    }
                                }
                            } else {

                                $error = "Order status not mapped.";
                            }


                            if ($error != '') {

                                $this->mobj->makeUpdate('platform_order', ['sync_status' => 'Failed'], ['id' => $id]);

                                $this->log->syncLog($userId, $userIntegrationId, $UserWorkFlow, $SourcePlatformId, $this->platformId, $object_id, 'failed', $id, $error);

                                $return_response = $error;
                            }
                        }

                        //}

                    }

                    if ($recordExist == 0) {
                        $return_response = "Record not exist";
                    }
                }
            }
        } catch (\Exception $e) {
            Log::error($userIntegrationId . "--UpdateOrderStatusAndNotes-->" . $e->getMessage());
            $return_response = $e->getMessage();
        }
        return $return_response;
    }

    public function SendEmailNotificationToClients($userIntegrationId = null, $PlatformWorkFlowRuleID = null, $body = '', $subject = '')
    {

        $email_notify = $this->map->getMappedDataByName($userIntegrationId, null, "email_notify", ['custom_data'], "default");
        if ($email_notify) {

            if ($email_notify->custom_data != '') {
                $email_ids = explode(',', $email_notify->custom_data);

                foreach ($email_ids as $email) {
                    $arrData = array(
                        'body_msg' => $body,
                        'name' => '',
                        'to' => $email,
                        'to_name' => '',
                        'subject' => $subject,
                        'from' => null,
                        'from_name' => null,
                    );

                    Storage::disk('local')->append('Bhoopendra.txt', "\r\n" . "SendEmailNotificationToClients Date -> " . date('Y-m-d H:i:s') . "userIntegrationId : " . $userIntegrationId . " | email_notify : " . $email_notify->custom_data . " | arrData : " . json_encode($arrData, true));

                    $response = app('App\Http\Controllers\CommonController')->sendMail($arrData, null);
                }
            }
        }
    }

    public function CreatePurchaseOrderInvoice($userId = null, $userIntegrationId = null, $WorkFlowID = null, $UserWorkFlow = null, $SourcePlatformName = null, $sync_status = "Ready", $RecordID = null)
    {

        $this->mobj->AddMemory();
        $return_response = false;
        try {

            $object_id = $this->helper->getObjectId('invoice');

            $ufound = $this->mobj->getPlatformAccountByUserIntegration($userIntegrationId, $this->platformId, ['access_token', 'platform_id', 'id', 'user_id', 'api_domain', 'account_name', 'app_id', 'app_secret']);

            $SourcePlatformId = $this->helper->getPlatformIdByName($SourcePlatformName);
            $SOurceUfound = $this->mobj->getPlatformAccountByUserIntegration($userIntegrationId, $SourcePlatformId, ['app_id', 'app_secret', 'platform_id', 'id', 'user_id', 'api_domain']);

            if ($ufound && $this->platformId && $SourcePlatformId && $SOurceUfound) {
                if (isset($ufound->platform_id) && $ufound->platform_id == $this->platformId) {

                    $wheredata = ['pi.user_integration_id' => $userIntegrationId, 'pi.platform_id' => $SOurceUfound->platform_id];
                    if ($RecordID && $RecordID !== 0) {
                        $wheredata['pi.id'] = $RecordID;
                    } else {
                        $wheredata['pi.sync_status'] = $sync_status;
                    }

                    $list = DB::table('platform_invoice as pi')
                        ->leftJoin("platform_order as po", function ($join) {
                            $join->on("pi.platform_order_id", "=", "po.id");
                        })->where($wheredata)->select(['pi.id', 'pi.invoice_code', 'pi.customer_name', 'pi.ref_number', 'pi.message', 'pi.api_tax_code', 'pi.currency', 'pi.exchange_rate', 'pi.net_total', 'pi.total_tax', 'pi.order_doc_number', 'pi.invoice_date', 'pi.linked_id', 'pi.platform_order_id', 'pi.total_amt', 'pi.due_date', 'pi.is_pre_payment', 'po.total_amount as order_total_amount', 'pi.api_customer_code'])->groupBy('pi.ref_number')->orderBy('pi.id', 'asc')->take(30)->get();

                    if (!empty($list) && count($list) > 0) {

                        $statusId = $this->map->getMappedDataByName($userIntegrationId, $WorkFlowID, "default_purchase_invoice_status", ['api_id']);

                        $NominalCode = $this->map->getMappedDataByName($userIntegrationId, null, "default_nominal_code", ['custom_data'], "default");
                        $default_nominal_code = @$NominalCode->custom_data ? $NominalCode->custom_data : '';

                        $CreditNominalCode = $this->map->getMappedDataByName($userIntegrationId, null, "default_credit_nominal_code", ['custom_data'], "default");
                        $default_credit_nominal_code = @$CreditNominalCode->custom_data ? $CreditNominalCode->custom_data : '';

                        $TaxNominalCode = $this->map->getMappedDataByName($userIntegrationId, null, "default_tax_nominal_code", ['custom_data'], "default");
                        $default_tax_nominal_code = @$TaxNominalCode->custom_data ? $TaxNominalCode->custom_data : '';

                        $DueDays = $this->map->getMappedDataByName($userIntegrationId, $WorkFlowID, "due_days", ['custom_data'], "default");
                        $due_days = @$DueDays->custom_data ? $DueDays->custom_data : '';

                        $TaxCode = $this->map->getMappedDataByName($userIntegrationId, $WorkFlowID, "default_pinvoice_taxcode", ['api_id'], 'default');
                        $default_tax_id = isset($TaxCode) && $TaxCode ? $TaxCode->api_id : NULL;

                        Storage::disk('local')->append('Bhoopendra.txt', "\r\n" . "Date -> " . date('Y-m-d H:i:s') . "CreatePurchaseOrderInvoice");

                        /*$account = $this->mobj->getFirstResultByConditions('platform_account_addtional_information', ['account_id'=>$ufound->id, 'user_integration_id'=>$userIntegrationId],  ['account_currency_code',  'account_shipping_nominal_code', 'account_discount_nominal_code', 'account_timezone'], ['id'=>'asc']);
                        dd($account);
                        if ($account) {
                        if (isset($account->account_timezone)) {

                        date_default_timezone_set($account->account_timezone);
                        }*/

                        $exchange_rates = [];

                        foreach ($list as $key => $invoice) {
                            $id = $invoice->id;
                            $nominal_code = @$invoice->invoice_code ? $invoice->invoice_code : $default_nominal_code;
                            $txn_date = $invoice->invoice_date;
                            $contact_id = $invoice->customer_name;
                            $api_customer_code = $invoice->api_customer_code;
                            $invoice_ref = $invoice->ref_number;
                            $description = $invoice->message;
                            $tax_code = $invoice->api_tax_code;
                            $currency = $invoice->currency;
                            $exchange_rate = $invoice->exchange_rate;
                            $net_amount = $invoice->net_total;
                            $tax_amount = $invoice->total_tax;
                            $order_id = $invoice->order_doc_number;
                            $platform_order_id = @$invoice->platform_order_id ? $invoice->platform_order_id : 0;
                            $total_amt = $invoice->total_amt;
                            $order_total_amount = $invoice->order_total_amount;

                            $due_date = $invoice->due_date;
                            $is_pre_payment = $invoice->is_pre_payment;

                            //$linked_id = $invoice->linked_id;
                            //$order_status = $invoice->order_status;

                            if ($SourcePlatformName == 'spscommerce' && $order_total_amount != $total_amt && $platform_order_id != 0) {
                                //Note - Mail Send to client if invoice amount does not match with order amount

                                $error = "Mismatched Invoice Amount.";
                                $this->mobj->makeUpdate('platform_invoice', ['sync_status' => 'Failed'], ['id' => $id]);
                                $this->mobj->makeUpdate('platform_order', ['invoice_sync_status' => 'Failed'], ['id' => $platform_order_id]);

                                $this->log->syncLog($userId, $userIntegrationId, $UserWorkFlow, $SourcePlatformId, $this->platformId, $object_id, 'failed', $id, $error);

                                $return_response = $error;

                                $body = 'Hi, <br/>Your Invoice ' . $invoice_ref . ' amount is not matching with Brightpearl Order no. ' . $order_id . '.';
                                $subject = 'Invoice ' . $invoice_ref . ' failed due to amount mismatch';

                                $this->SendEmailNotificationToClients($userIntegrationId, $WorkFlowID, $body, $subject);
                            } else {




                                $is_create_invoice = 0;
                                if (isset(Config::get('apisettings.AllowJournalEntryInBP')[$SourcePlatformName])) {

                                    //if ($platform_order_id == '' || $platform_order_id == 0) {
                                    $error = '';
                                    if (!isset($exchange_rates[$currency])) {
                                        $response_currency = $this->bp->searchCurrency($ufound, $currency);
                                        $response_currency = json_decode($response_currency->getBody(), true);
                                        $live_exchange_rate = @$response_currency['response']['results'][0][4] ? @$response_currency['response']['results'][0][4] : '';

                                        if ($live_exchange_rate != '') {

                                            $exchange_rates[$currency] = $live_exchange_rate;
                                            $is_create_journal = 1;
                                        } else if (isset($response_currency['errors'])) {
                                            $error = $this->bp->handleResponseError($response_currency);
                                            if ($error == 'You have sent too many requests. Please wait before sending another request') {
                                                sleep(1);
                                                continue;
                                            } else {
                                                $error = "Unexpected, Brightpearl internal error, please resync again";
                                                if (isset($response_currency['response']) && !is_int($response_currency['response'])) {
                                                    $error = $response_currency['response'];
                                                }
                                            }
                                        } else {
                                            $error = "Unexpected, Brightpearl internal error, please resync again";
                                            if (isset($response_currency['response']) && !is_int($response_currency['response'])) {
                                                $error = $response_currency['response'];
                                            }
                                        }

                                        if ($error != '') {
                                            $platform_invoice_ids = PlatformInvoice::where('ref_number', $invoice_ref)->pluck("id")->toArray();
                                            PlatformInvoice::whereIn('id', $platform_invoice_ids)->update(['sync_status' => 'Failed']);

                                            PlatformOrder::where('id', $platform_order_id)->update(['invoice_sync_status' => 'Failed']);
                                            foreach ($platform_invoice_ids as $platform_invoice_id) {
                                                $this->log->syncLog($userId, $userIntegrationId, $UserWorkFlow, $SourcePlatformId, $this->platformId, $object_id, 'failed', $platform_invoice_id, $error);
                                            }
                                        }
                                    } else {
                                        $is_create_journal = 1;
                                    }


                                    if ($is_create_journal == 1) {

                                        //3)  Prepayment (True) + PO Number (No) ->  Create Ledger (Journal Type -> PI (Purchase Invoice))
                                        //4)  Prepayment (False) + PO Number (No) -> Create Ledger (Journal Type -> PI (Purchase Invoice))
                                        app('App\Http\Controllers\Brightpearl\BrightPearlApiSubController')->CreateBrightpearlInvoiceJournalEntry($ufound, $userId, $userIntegrationId, $WorkFlowID, $UserWorkFlow, $SourcePlatformId, $object_id, $id, $api_customer_code, $invoice_ref, $txn_date, $due_date, $currency, $exchange_rates[$currency], $description, $nominal_code, $net_amount, $default_tax_id, $default_credit_nominal_code, $default_tax_nominal_code, $platform_order_id, $order_id);
                                    }





                                    /*} else {
                                        //1)  Prepayment (True) + PO Number (Yes) ->  Invoice Closed we will not create ledger/journal
                                        //2)  Prepayment (False) + PO Number (Yes) -> Invoice Closed  we will not create ledger/journal
                                        $is_create_invoice = 1;
                                    }*/
                                } else {
                                    $is_create_invoice = 1;
                                }


                                if ($is_create_invoice == 1) {


                                    //Note - Brightpearl order accepting only one time invoice later you won't allow to add or edit for multiple invoice

                                    $post_data = array();
                                    $post_data['invoiceReference'] = $invoice_ref;
                                    $post_data['taxDate'] = str_replace('+00:00', '.000Z', gmdate('c', strtotime($txn_date)));
                                    if ($due_days != '' && is_numeric($due_days)) {
                                        $post_data['dueDate'] = str_replace('+00:00', '.000Z', gmdate('c', strtotime("+" . $due_days . " days", strtotime($txn_date))));
                                    } else {
                                        $post_data['dueDate'] = str_replace('+00:00', '.000Z', gmdate('c', strtotime($txn_date)));
                                    }
                                    $post_data['orderIds'] = [$order_id];

                                    Storage::disk('local')->append('Bhoopendra.txt', "\r\n" . "Date -> " . date('Y-m-d H:i:s') . "userIntegrationId : " . $userIntegrationId . " | post_data : " . json_encode($post_data, true));

                                    $responseBP = $this->bp->CreatePurchaseOrderClose($ufound, null, $post_data, 'json');
                                    $response_data = json_decode($responseBP->getBody(), true);

                                    Storage::disk('local')->append('Bhoopendra.txt', "\r\n" . "Date -> " . date('Y-m-d H:i:s') . "userIntegrationId : " . $userIntegrationId . " | response_data : " . json_encode($response_data, true));

                                    if (isset($response_data) && empty($response_data)) {

                                        $return_response = true;

                                        $this->mobj->makeUpdate('platform_invoice', ['sync_status' => 'Synced'], ['id' => $id]);

                                        $this->mobj->makeUpdate('platform_order', ['invoice_sync_status' => 'Synced'], ['id' => $platform_order_id]);

                                        $this->log->syncLog($userId, $userIntegrationId, $UserWorkFlow, $SourcePlatformId, $this->platformId, $object_id, 'synced', $id, null);
                                    } else if (isset($response_data['errors'])) {

                                        $error = $this->bp->handleResponseError($response_data);
                                        if (empty($error)) {
                                            $error = "Unexpected, Brightpearl internal error, please resync again";
                                        }
                                        $this->mobj->makeUpdate('platform_invoice', ['sync_status' => 'Failed'], ['id' => $id]);
                                        $this->mobj->makeUpdate('platform_order', ['invoice_sync_status' => 'Failed'], ['id' => $platform_order_id]);

                                        $this->log->syncLog($userId, $userIntegrationId, $UserWorkFlow, $SourcePlatformId, $this->platformId, $object_id, 'failed', $id, $error);

                                        $return_response = $error;
                                    } else {

                                        if (isset($response_data['response']) && !is_int($response_data['response'])) {
                                            $error = $response_data['response'];
                                        }
                                        if (empty($error)) {
                                            $error = "Unexpected, Brightpearl internal error, please resync again";
                                        }
                                        $this->mobj->makeUpdate('platform_invoice', ['sync_status' => 'Failed'], ['id' => $id]);
                                        $this->mobj->makeUpdate('platform_order', ['invoice_sync_status' => 'Failed'], ['id' => $platform_order_id]);
                                        $this->log->syncLog($userId, $userIntegrationId, $UserWorkFlow, $SourcePlatformId, $this->platformId, $object_id, 'failed', $id, $error);

                                        $return_response = $error;
                                    }
                                }






                                /*

                                // Imp-Note : Please donot remove this code. this works for partial payment & status change of order. we commented due to PO close for invoice need for now. it is working code

                                $response_currency = $this->bp->GetCurrency($ufound, $currency);
                                $currency_id = "";
                                if ($result_currency = json_decode($response_currency->getBody(), true)) {
                                if (isset($result_currency['response']['results'][0][0])) {
                                $currency_id = $result_currency['response']['results'][0][0];
                                }
                                }

                                $res_tax_code = DB::table('platform_object_data as pod')
                                ->join("platform_objects as po", function ($join) {
                                $join->on("pod.platform_object_id", "=", "po.id")
                                ->on("pod.status", "=", "po.status");
                                })->where(['po.name'=>'taxcode', 'po.status'=>1, 'pod.user_id'=>$userId, 'pod.user_integration_id'=>$userIntegrationId, 'pod.api_code'=>$tax_code])->select(['api_id'])->first();

                                $tax_id = @$res_tax_code->api_id ? $res_tax_code->api_id : '';

                                if ($tax_id == '') {
                                $TaxCode = $this->map->getMappedDataByName($userIntegrationId, $WorkFlowID, "default_pinvoice_taxcode", ['api_id'], 'default');
                                $tax_id = isset($TaxCode) && $TaxCode ? $TaxCode->api_id : NULL;
                                }

                                $post_data = array();
                                $post_data['header']['invoiceIdentifier']['invoiceRef'] = $invoice_ref;
                                $post_data['header']['invoiceIdentifier']['contactId'] = $contact_id;
                                $post_data['header']['taxDate'] = date('Y-m-d', strtotime($txn_date));
                                $post_data['header']['description'] = $description;
                                if ($currency_id != '') {
                                $post_data['header']['currencyId'] = $currency_id;
                                }
                                $post_data['header']['exchangeRate'] = $exchange_rate;

                                $post_data['lines'][0]['net'] = $net_amount;
                                $post_data['lines'][0]['tax'] = $tax_amount;
                                if ($nominal_code != '') {
                                $post_data['lines'][0]['nominalCode'] = $nominal_code;
                                }
                                if ($tax_id != '') {
                                $post_data['lines'][0]['taxClassId'] = $tax_id;
                                }
                                $post_data['lines'][0]['orderId'] = $order_id;

                                Storage::disk('local')->append('Bhoopendra.txt', "\r\n" . "Date -> " . date('Y-m-d H:i:s') .  "userIntegrationId : " . $userIntegrationId . " | post_data : " . json_encode($post_data, true));

                                $responseBP = $this->CreatePOInvoiceInBrightpearl($ufound, $userIntegrationId, $post_data);

                                Storage::disk('local')->append('Bhoopendra.txt', "\r\n" . "Date -> " . date('Y-m-d H:i:s') .  "userIntegrationId : " . $userIntegrationId . " | responseBP : " . json_encode($responseBP, true));

                                if (isset($responseBP['response'])) {

                                $return_response = true;

                                $linked_id = $this->mobj->makeInsertGetId('platform_invoice', [
                                'user_id'=>$userId,
                                'platform_id'=>$this->platformId,
                                'user_integration_id'=>$userIntegrationId,
                                'api_invoice_id'=>$responseBP['response'],
                                'sync_status'=>'Synced',
                                'linked_id'=>$id,
                                ]);
                                $this->mobj->makeUpdate('platform_invoice', ['linked_id'=>$linked_id, 'sync_status'=>'Synced'], ['id'=>$id]);

                                $this->mobj->makeUpdate('platform_order', ['invoice_sync_status'=>'Synced'], ['id'=>$platform_order_id]);

                                $this->log->syncLog($userId, $userIntegrationId, $UserWorkFlow,  $SourcePlatformId, $this->platformId, $object_id, 'synced', $id, NULL);

                                // update order status for invoice

                                Storage::disk('local')->append('Bhoopendra.txt', "\r\n" . "Date -> " . date('Y-m-d H:i:s') .  "userIntegrationId : " . $userIntegrationId . " | statusId : " . $statusId->api_id);

                                if (isset($statusId->api_id)) {

                                $OrderStatusID = $statusId->api_id;

                                $changeStatus = $this->UpdateOrderStatus($ufound, $order_id, $OrderStatusID);

                                Storage::disk('local')->append('Bhoopendra.txt', "\r\n" . "Date -> " . date('Y-m-d H:i:s') .  "userIntegrationId : " . $userIntegrationId . " | post_data : " . json_encode($changeStatus, true));

                                if (is_array($changeStatus)) {

                                if (!isset($changeStatus['errors'])) {

                                $return_response = true;
                                } else if (isset($changeStatus['errors']) && is_array($changeStatus['errors'])) {

                                $error = $this->bp->handleResponseError($changeStatus);
                                $this->log->syncLog($userId, $userIntegrationId, $UserWorkFlow, $SourcePlatformId, $this->platformId, $object_id, 'failed', $id, $error);
                                $return_response = false;
                                } else {
                                $return_response = isset($changeStatus['response']) ? ($changeStatus['response']) : "API Error";
                                }
                                }
                                }
                                } else if (isset($responseBP['errors'])) {

                                $error = $this->bp->handleResponseError($responseBP);
                                if (empty($error)) {
                                $error = "Unexpected, Brightpearl internal error, please resync again";
                                }
                                $this->mobj->makeUpdate('platform_invoice', ['sync_status'=>'Failed'], ['id'=>$id]);
                                $this->mobj->makeUpdate('platform_order', ['invoice_sync_status'=>'Failed'], ['id'=>$platform_order_id]);

                                $this->log->syncLog($userId, $userIntegrationId, $UserWorkFlow, $SourcePlatformId, $this->platformId,  $object_id, 'failed', $id, $error);

                                $return_response = $error;
                                } else {

                                if (isset($responseBP['response']) && !is_int($responseBP['response'])) {
                                $error = $responseBP['response'];
                                }
                                if (empty($error)) {
                                $error = "Unexpected, Brightpearl internal error, please resync again";
                                }
                                $this->mobj->makeUpdate('platform_invoice', ['sync_status'=>'Failed'], ['id'=>$id]);
                                $this->mobj->makeUpdate('platform_order', ['invoice_sync_status'=>'Failed'], ['id'=>$platform_order_id]);
                                $this->log->syncLog($userId, $userIntegrationId, $UserWorkFlow, $SourcePlatformId, $this->platformId,  $object_id, 'failed', $id, $error);

                                $return_response = $error;
                                }

                             */
                            }
                        }
                    }
                }
            }
        } catch (\Exception $e) {
            Log::error($userIntegrationId . "--CreatePurchaseOrderInvoice-->" . $e->getMessage());
            $return_response = $e->getMessage();
        }

        return $return_response;
    }

    /* Create PO inovice In BP */
    public function CreatePOInvoiceInBrightpearl($ufound = null, $userIntegrationId = null, array $postData)
    {
        try {
            if ($ufound) {

                $response = $this->bp->CreatePOInvoice($ufound, null, $postData, 'json');

                if ($order = json_decode($response->getBody(), true)) {

                    return $order;
                }
                return false;
            } else {
                $ufound = $this->mobj->getPlatformAccountByUserIntegration($userIntegrationId, $this->platformId, ['access_token', 'platform_id', 'id', 'user_id', 'api_domain', 'account_name', 'app_id', 'app_secret']);
                if ($ufound && $this->platformId) {
                    if (isset($ufound->platform_id) && $ufound->platform_id == $this->platformId) { //for only BP integration

                        $response = $this->bp->CreatePOInvoice($ufound, null, $postData, 'json');

                        if ($order = json_decode($response->getBody(), true)) {

                            return $order;
                        }
                        return false;
                    }
                }
            }
        } catch (\Exception $e) {
            Log::error($userIntegrationId . "--CreatePOInvoiceInBrightpearl-->" . $e->getMessage());
            return false;
        }
    }

    /* Update Brightpearl Inventory || Also handle the tbl inventory credit inventory */
    public function SyncInventory1($user_id = '', $user_integration_id = '', $source_platform_name = '', $platform_workflow_rule_id = '', $user_workflow_rule_id = '', $sync_status = "Ready", $record_id = '')
    {
        try {
            $defInventPriceListMap = false;
            $sel_def_inv_priclist_objId = null;
            /* ---Get Default inventory PriceList Mapping--- */
            $defInvPriceListObj = $this->helper->getObjectId('inventory_pricelist');
            $sel_def_inv_priclist_objId = $this->map->getMappedApiIdByObjectId($user_integration_id, $defInvPriceListObj, 'default', 'id');

            if ($sel_def_inv_priclist_objId) {
                $defInventPriceListMap = true;
            }

            $process_limit = 50;
            if (isset(Config::get('apifetchlimit.SyncInventoryInBP')[$source_platform_name])) {
                $process_limit = Config::get('apifetchlimit.SyncInventoryInBP')[$source_platform_name]; //override process limit
            }
            $return = true;
            $Inventory_arr = [];

            $source_platform_id = $this->helper->getPlatformIdByName($source_platform_name);

            $inventory_object_id = $this->helper->getObjectId('inventory');
            $warehouse_object_id = $this->helper->getObjectId('warehouse');
            $inventory_warehouse_object_id = $this->helper->getObjectId('inventory_warehouse');
            /* Destination Platform Account Credentials */
            $ufound = $this->mobj->getPlatformAccountByUserIntegration($user_integration_id, $this->platformId, ['access_token', 'platform_id', 'id', 'user_id', 'api_domain', 'account_name', 'app_id', 'app_secret']);
            /* ----------------------------------------- */

            /* Find BP account additinal information for currency */
            $accountInformation = $this->mobj->getFirstResultByConditions('platform_account_addtional_information', ['account_id' => $ufound->id, 'user_integration_id' => $user_integration_id], ['account_currency_code'], ['id' => 'asc']);
            $account_currency_code = isset($accountInformation->account_currency_code) ? $accountInformation->account_currency_code : "";
            /* ------------------------------------------------------ */

            if ($ufound) {
                $DefaultInventoryWarehouseLocation = null;
                $DefaultInventoryWarehouseId = null;
                /* Find Default Warehouse */
                $DefaultWarehouseId = $this->map->getMappedDataByName($user_integration_id, $platform_workflow_rule_id, "inventory_warehouse", ['api_id']);

                if ($DefaultWarehouseId) {

                    $DefaultInventoryWarehouseLocation = $this->GetWarehouseDefaultLocation($user_integration_id, $DefaultWarehouseId->api_id);
                    if (!$DefaultInventoryWarehouseLocation) {
                        $DefaultInventoryWarehouseLocation = null;
                    }
                    $DefaultInventoryWarehouseId = $DefaultWarehouseId->api_id;
                    /* Find only source platform warehouse list */
                    $MappedWarehouseArray = $this->map->getManyToOneWarehouseMapping($warehouse_object_id, $user_integration_id, true, $user_id, $source_platform_id);
                } else {
                    /* Find many to one & one to one warehouse mapping */
                    $MappedWarehouseArray = $this->map->getManyToOneWarehouseMapping($inventory_warehouse_object_id, $user_integration_id);
                }
                if ($DefaultInventoryWarehouseId && count($MappedWarehouseArray['mapped_warehouse']) > 0) {
                    return "We can't have both one to one or default warehouse mapping for inventory sync, please do the correct mapping";
                }

                /* -------------------------------------- */
                /* Identify Product Uniqueness */
                $identity = app('App\Http\Controllers\Brightpearl\BrightpearlUtility')->ProductIdentityMapping($user_integration_id, $platform_workflow_rule_id);
                $source_identity = $identity['source_identity']; //Source Identity
                $destination_identity = $identity['destination_identity']; //Destination Identity
                /* Source & Destination Identity not null or empty */
                if ($destination_identity && $source_identity) {
                    do {
                        $allow_next_call = false;

                        if ($record_id) { //If single record found
                            $Inventory_arr = DB::table('platform_product as source_platform_product')
                                ->join('platform_product as destination_platform_product', 'destination_platform_product.' . $destination_identity, '=', 'source_platform_product.' . $source_identity)
                                ->select('source_platform_product.id', 'destination_platform_product.sku', 'destination_platform_product.api_product_id', 'destination_platform_product.id as destination_platform_product_id')
                                ->where(['source_platform_product.user_integration_id' => $user_integration_id, 'destination_platform_product.user_integration_id' => $user_integration_id])
                                ->where(['source_platform_product.platform_id' => $source_platform_id, 'destination_platform_product.platform_id' => $this->platformId])
                                ->where('source_platform_product.id', $record_id)
                                ->where('source_platform_product.is_deleted', 0)
                                ->where('destination_platform_product.is_deleted', 0)
                                ->limit($process_limit)
                                ->distinct()
                                ->get();
                        } else {
                            $Inventory_arr = DB::table('platform_product as source_platform_product')
                                ->join('platform_product as destination_platform_product', 'destination_platform_product.' . $destination_identity, '=', 'source_platform_product.' . $source_identity)
                                ->select('source_platform_product.id', 'destination_platform_product.sku', 'destination_platform_product.api_product_id', 'destination_platform_product.id as destination_platform_product_id')
                                ->where(['source_platform_product.inventory_sync_status' => $sync_status, 'source_platform_product.user_integration_id' => $user_integration_id, 'destination_platform_product.user_integration_id' => $user_integration_id])
                                ->where(['source_platform_product.platform_id' => $source_platform_id, 'destination_platform_product.platform_id' => $this->platformId])
                                ->where('source_platform_product.is_deleted', 0)
                                ->where('destination_platform_product.is_deleted', 0)
                                ->orderBy('source_platform_product.updated_at', 'asc')
                                ->limit($process_limit)
                                ->distinct()
                                ->get();

                            if (!count($Inventory_arr)) { //if Ready not exist then pick Failed inventory.
                                $Inventory_arr = DB::table('platform_product as source_platform_product')
                                    ->join('platform_product as destination_platform_product', 'destination_platform_product.' . $destination_identity, '=', 'source_platform_product.' . $source_identity)
                                    ->select('source_platform_product.id', 'destination_platform_product.sku', 'destination_platform_product.api_product_id', 'destination_platform_product.id as destination_platform_product_id')
                                    ->where(['source_platform_product.inventory_sync_status' => 'Failed', 'source_platform_product.user_integration_id' => $user_integration_id, 'destination_platform_product.user_integration_id' => $user_integration_id])
                                    ->where(['source_platform_product.platform_id' => $source_platform_id, 'destination_platform_product.platform_id' => $this->platformId])
                                    ->where('source_platform_product.is_deleted', 0)
                                    ->where('destination_platform_product.is_deleted', 0)
                                    ->orderBy('source_platform_product.updated_at', 'asc')
                                    ->limit($process_limit)
                                    ->distinct()
                                    ->get();
                            }
                        }

                        if ($Inventory_arr && count($Inventory_arr) == $process_limit) {
                            // Don't want to loop contineously
                            $allow_next_call = false;
                        }

                        if ($Inventory_arr && count($Inventory_arr)) {
                            $inv = new PlatformProductInventory();
                            foreach ($Inventory_arr as $Inventory) {
                                $condition = ['user_integration_id' => $user_integration_id, 'platform_product_id' => $Inventory->id];
                                $query_first = $inv->where($condition)->where('sync_status', '!=', 'Synced');
                                $product_inventory_arr = $query_first->select('id', 'api_warehouse_id', 'quantity', 'platform_product_id')->get();

                                /*
                                //changed conditon , 'api_product_id'=>$Inventory->api_product_id made it by platform_product_id
                                if(count($product_inventory_arr) < 0)
                                {
                                    $condition = ['user_id'=>$user_id, 'user_integration_id'=>$user_integration_id, 'sku'=>$Inventory->sku];
                                    $query_first = $inv->where($condition)->where('sync_status', '!=', 'Synced');
                                    $product_inventory_arr = $query_first->select('id', 'api_warehouse_id', 'quantity', 'platform_product_id')->get();
                                }
                                */

                                if (count($product_inventory_arr) > 0) {
                                    $getinventoryurl = $Inventory->api_product_id . '?includeOptional=breakDownByLocation';
                                    $response = $this->bp->GetInventory($ufound, $getinventoryurl, 0);
                                    $BpGetInventory = json_decode($response->getBody(), true);

                                    if (isset($BpGetInventory['response']) && is_array($BpGetInventory['response'])) {
                                        $product_synced_error = $credit_user_workflow_rule_id = null;
                                        $platform_refund_ids = $inventory_credit_ids = [];
                                        $defaultLocationMemo = [];
                                        // dd($MappedWarehouseArray['mapped_warehouse']);
                                        if (isset($MappedWarehouseArray) && is_array($MappedWarehouseArray)) {
                                            foreach ($MappedWarehouseArray['mapped_warehouse'] as $map_warehouse_key => $mapped_warehouse) {
                                                $product_inventory_arr = $inv->where($condition)->whereIn('api_warehouse_id', $mapped_warehouse)->select('id', 'api_warehouse_id', 'quantity', 'platform_product_id')->get();

                                                if (count($product_inventory_arr) > 0) {
                                                    //flag to identify when we have mant to one warehouse mapping
                                                    $flagToHandleSumOfInventory = $notRun = true;
                                                    $duplicateWarehouse = [];
                                                    foreach ($product_inventory_arr as $product_inventory) {
                                                        /* Find Inventory Credit from Inventory credit table */
                                                        $credits = app('App\Http\Controllers\Brightpearl\BrightpearlApiSubDivController')->GetInventoryCredits($product_inventory->id);
                                                        if ($credits['total_quantity'] > 0) { //If total_quantity>0
                                                            $product_inventory->quantity = $product_inventory->quantity + $credits['total_quantity']; //Sum total qty + credit qty
                                                            $platform_refund_ids = $credits['platform_refund_id'];
                                                            $inventory_credit_ids = $credits['inventory_credit_ids'];
                                                            $credit_user_workflow_rule_id = $credits['user_workflow_rule_id'];
                                                        }
                                                        //Set default update qty
                                                        $update_quantity = 0;
                                                        /*---Find one to one inventory warehouse mapping ---*/
                                                        $defaultLocation = null;
                                                        $InventoryWarehouseId = null;
                                                        $warehouseId = $this->map->getMappedDataByName($user_integration_id, null, "inventory_warehouse", ['api_id'], 'regular', $product_inventory->api_warehouse_id);

                                                        if ($warehouseId) {
                                                            $InventoryWarehouseId = $warehouseId->api_id;
                                                            if (isset($duplicateWarehouse[$InventoryWarehouseId])) {
                                                                $notRun = false;
                                                            } else {
                                                                $duplicateWarehouse[$InventoryWarehouseId] = $InventoryWarehouseId;
                                                            }
                                                            if ($map_warehouse_key == $InventoryWarehouseId && count($mapped_warehouse) > 1 && $flagToHandleSumOfInventory) {
                                                                /* override variable value */
                                                                $product_inventory->quantity = $inv->where($condition)->whereIn('api_warehouse_id', $mapped_warehouse)->sum('quantity');

                                                                $flagToHandleSumOfInventory = false;
                                                            }
                                                            if (isset($defaultLocationMemo[$defaultLocation])) {
                                                                $defaultLocation = $defaultLocationMemo[$defaultLocation];
                                                            } else {

                                                                $defaultLocation = $this->GetWarehouseDefaultLocation($user_integration_id, $warehouseId->api_id);
                                                                if ($defaultLocation) {
                                                                    $defaultLocationMemo[$defaultLocation] = $defaultLocation;
                                                                }
                                                            }
                                                        } else {
                                                            if ($DefaultInventoryWarehouseLocation) {
                                                                $defaultLocation = $DefaultInventoryWarehouseLocation;
                                                                $InventoryWarehouseId = $DefaultInventoryWarehouseId;
                                                                if ($flagToHandleSumOfInventory) {
                                                                    $product_inventory->quantity = $inv->where($condition)->whereIn('api_warehouse_id', $mapped_warehouse)->sum('quantity');
                                                                    $flagToHandleSumOfInventory = false;
                                                                }
                                                            } else {

                                                                continue;
                                                            }
                                                        }

                                                        /*----Stop to find inventory warehouse-------*/

                                                        $update_inventory_data = [];
                                                        $priceListValue = '0';

                                                        if ($notRun) {
                                                            //Set Price list if mapping exists or set it to default
                                                            if ($defInventPriceListMap) {
                                                                if ($sel_def_inv_priclist_objId) {
                                                                    $prodPriceListData = $this->mobj->getFirstResultByConditions('platform_porduct_price_list', ['platform_product_id' => $Inventory->destination_platform_product_id, 'platform_object_data_id' => $sel_def_inv_priclist_objId], ['price', 'api_currency_code']); //get product Price List details

                                                                    if ($prodPriceListData) {
                                                                        $priceListValue = $prodPriceListData->price;
                                                                        $account_currency_code = $prodPriceListData->api_currency_code;
                                                                    }
                                                                }
                                                            }
                                                        }

                                                        if ($defaultLocation) {

                                                            if ($notRun) {

                                                                $inventory = $BpGetInventory['response'];

                                                                /* Start Main Loop- Inventory Calculation */
                                                                foreach ($inventory as $pr => $Inv_arr) {
                                                                    $quantity = 0;
                                                                    $reason = '';
                                                                    if (count($Inv_arr['warehouses']) > 0) {
                                                                        $findWarehouse = 0;

                                                                        foreach ($Inv_arr['warehouses'] as $warehouse => $Inv) {
                                                                            if ($warehouse == $InventoryWarehouseId) {

                                                                                foreach ($Inv['byLocation'] as $location_id => $byLocation_data) {
                                                                                    $quantity = $byLocation_data['onHand'];
                                                                                    if ($location_id == $defaultLocation) {

                                                                                        $findWarehouse = 1;
                                                                                        $finalQtyArray = $this->CalculatInventoryQty($quantity, $product_inventory->quantity);
                                                                                        if ($finalQtyArray) {
                                                                                            $update_quantity = $finalQtyArray['update_qty'];
                                                                                            $reason = $finalQtyArray['reason'];
                                                                                        } else {
                                                                                            $update_quantity = 0;
                                                                                            $reason = "";
                                                                                        }
                                                                                        if ($update_quantity != 0) {
                                                                                            $update_inventory_data[] = array("locationId" => $location_id, "productId" => $Inventory->api_product_id, "reason" => $reason, "quantity" => $update_quantity, "cost" => ['currency' => $account_currency_code, 'value' => $priceListValue]);
                                                                                        }
                                                                                    }
                                                                                }
                                                                            }
                                                                        }

                                                                        if ($findWarehouse == 0) {
                                                                            // $quantity = isset($Inv_arr['total']['onHand']) ? $Inv_arr['total']['onHand'] : 0;
                                                                            $quantity = 0;

                                                                            $finalQtyArray = $this->CalculatInventoryQty($quantity, $product_inventory->quantity);
                                                                            if ($finalQtyArray) {
                                                                                $update_quantity = $finalQtyArray['update_qty'];
                                                                                $reason = $finalQtyArray['reason'];
                                                                            } else {
                                                                                $update_quantity = 0;
                                                                                $reason = "";
                                                                            }

                                                                            if ($update_quantity != 0) {
                                                                                $reason = "Added by APIWORX";
                                                                                $update_inventory_data[] = array("locationId" => $defaultLocation, "productId" => $Inventory->api_product_id, "reason" => $reason, "quantity" => $update_quantity, "cost" => ['currency' => $account_currency_code, 'value' => $priceListValue]);
                                                                            }
                                                                        }
                                                                    } else {
                                                                        // if warehouse not get from Bp inventory
                                                                        // $quantity = isset($Inv_arr['total']['onHand']) ? $Inv_arr['total']['onHand'] : 0;
                                                                        $quantity = 0;

                                                                        $finalQtyArray = $this->CalculatInventoryQty($quantity, $product_inventory->quantity);
                                                                        if ($finalQtyArray) {
                                                                            $update_quantity = $finalQtyArray['update_qty'];
                                                                            $reason = $finalQtyArray['reason'];
                                                                        } else {
                                                                            $update_quantity = 0;
                                                                            $reason = "";
                                                                        }

                                                                        if ($update_quantity != 0) {
                                                                            $update_inventory_data[] = array("locationId" => $defaultLocation, "productId" => $Inventory->api_product_id, "reason" => $reason, "quantity" => $update_quantity, "cost" => ['currency' => $account_currency_code, 'value' => $priceListValue]);
                                                                        }
                                                                    }
                                                                }
                                                                /* End Main Loop- Inventory Calculation */
                                                            }
                                                            if (count($update_inventory_data) > 0) {
                                                                //dd($update_inventory_data);
                                                                $curl_post_data['corrections'] = $update_inventory_data;
                                                                $response = $this->bp->UpdateInventory($ufound, $InventoryWarehouseId, $curl_post_data);
                                                                $Inventory_data = json_decode($response->getBody(), true);
                                                                if (isset($Inventory_data['response'])) {
                                                                    $this->mobj->makeUpdate('platform_product_inventory', ['sync_status' => 'Synced'], ['id' => $product_inventory->id]);
                                                                    if (count($inventory_credit_ids)) {
                                                                        /* ---Update Inventory Credit Status--- */
                                                                        app('App\Http\Controllers\Brightpearl\BrightpearlApiSubDivController')->UpdateInventoryCreditStatus($inventory_credit_ids);
                                                                        /* ---Update Refund Order Status Status--- */
                                                                        app('App\Http\Controllers\Brightpearl\BrightpearlApiSubDivController')->UpdateOrderRefundStatus($platform_refund_ids, $user_id, $user_integration_id, $credit_user_workflow_rule_id, $source_platform_id);
                                                                    }
                                                                } elseif (isset($Inventory_data['errors'])) {
                                                                    $product_synced_error = @$Inventory_data['errors'][0]['message'];
                                                                    $this->mobj->makeUpdate('platform_product_inventory', ['sync_status' => 'Failed'], ['id' => $product_inventory->id]);

                                                                    //log error of bp inventory sync
                                                                    Storage::disk('local')->append('error_debug.txt', 'Bp - ' . $source_platform_name . ', sync resp userInteg - ' . $user_integration_id . json_encode($Inventory_data, true));
                                                                    Storage::disk('local')->append('error_debug.txt', 'Bp - ' . $source_platform_name . ', sync curl post data UserInteg - ' . $user_integration_id . json_encode($curl_post_data, true));
                                                                }
                                                            } else {
                                                                if ($update_quantity == 0) {
                                                                    $sync_status = "Synced";
                                                                } else {
                                                                    $product_synced_error = 'Inventory information not Found';
                                                                    $sync_status = "Failed";
                                                                }

                                                                $this->mobj->makeUpdate('platform_product_inventory', ['sync_status' => $sync_status], ['id' => $product_inventory->id]);
                                                            }
                                                        } else {
                                                            $product_synced_error = 'Default warehouse location not found for selected inventory warehouse.';
                                                            $sync_status = "Failed";

                                                            $this->mobj->makeUpdate('platform_product_inventory', ['sync_status' => $sync_status], ['id' => $product_inventory->id]);
                                                        }
                                                    }
                                                    if ($product_synced_error) {
                                                        $return = $product_synced_error;
                                                        $this->mobj->makeUpdate('platform_product', ['inventory_sync_status' => "Failed"], ['id' => $Inventory->id]);
                                                        $this->log->syncLog($user_id, $user_integration_id, $user_workflow_rule_id, $source_platform_id, $this->platformId, $inventory_object_id, "failed", $Inventory->id, $product_synced_error);
                                                    } else {
                                                        $this->mobj->makeUpdate('platform_product', ['inventory_sync_status' => "Synced"], ['id' => $Inventory->id]);
                                                        $this->log->syncLog($user_id, $user_integration_id, $user_workflow_rule_id, $source_platform_id, $this->platformId, $inventory_object_id, "success", $Inventory->id, 'Inventory synced successfully!');
                                                    }
                                                }
                                            }
                                        }
                                    } elseif (isset($BpGetInventory['errors'][0]['message'])) {
                                        $return = $BpGetInventory['errors'][0]['message'];
                                        if (in_array($source_platform_name, Config::get('apisettings.UpdateInventoryStatusIgnored')) && ($BpGetInventory['errors'][0]['message'] == 'This is a non stock tracked product.' || $BpGetInventory['errors'][0]['message'] == 'These are non stock tracked products.') ) {
                                            $return = true;
                                            $this->mobj->makeUpdate('platform_product', ['inventory_sync_status' => 'Ignore'], ['id' => $Inventory->id]);
                                            $this->log->syncLog($user_id, $user_integration_id, $user_workflow_rule_id, $source_platform_id, $this->platformId, $inventory_object_id, 'failed', $Inventory->id, $BpGetInventory['errors'][0]['message']);
                                        } else {
                                            $this->mobj->makeUpdate('platform_product', ['inventory_sync_status' => 'Failed'], ['id' => $Inventory->id]);
                                            $this->log->syncLog($user_id, $user_integration_id, $user_workflow_rule_id, $source_platform_id, $this->platformId, $inventory_object_id, 'failed', $Inventory->id, $BpGetInventory['errors'][0]['message']);
                                        }
                                    }
                                } else {
                                    if (in_array($source_platform_name, Config::get('apisettings.UpdateInventoryStatusIgnored'))) {
                                        $return = true;
                                        $this->mobj->makeUpdate('platform_product', ['inventory_sync_status' => 'Ignore'], ['id' => $Inventory->id]);
                                        $this->log->syncLog($user_id, $user_integration_id, $user_workflow_rule_id, $source_platform_id, $this->platformId, $inventory_object_id, 'failed', $Inventory->id, 'Inventory information not found!');
                                    } else {

                                        $this->mobj->makeUpdate('platform_product', ['inventory_sync_status' => 'Synced'], ['id' => $Inventory->id]);
                                        $this->log->syncLog($user_id, $user_integration_id, $user_workflow_rule_id, $source_platform_id, $this->platformId, $inventory_object_id, 'success', $Inventory->id, 'Inventory synced!');
                                    }
                                }
                            }
                        }
                    } while ($allow_next_call);
                }
            }
        } catch (\Exception $e) {
            Log::error($user_integration_id . " -> BrightPearlApiController -> SyncInventory -> " . $e->getLine() . " -> " . $e->getMessage());
            $return = $e->getMessage();
        }
        return $return;
    }

    /* Update Brightpearl Inventory || Also handle the tbl inventory credit inventory */
    public function SyncInventory($user_id = '', $user_integration_id = '', $source_platform_name = '', $platform_workflow_rule_id = '', $user_workflow_rule_id = '', $sync_status = "Ready", $record_id = '')
    {
        try {
            $defInventPriceListMap = false;
            $sel_def_inv_priclist_objId = null;
            /* ---Get Default inventory PriceList Mapping--- */
            $defInvPriceListObj = $this->helper->getObjectId('inventory_pricelist');
            $sel_def_inv_priclist_objId = $this->map->getMappedApiIdByObjectId($user_integration_id, $defInvPriceListObj, 'default', 'id');

            if ($sel_def_inv_priclist_objId) {
                $defInventPriceListMap = true;
            }
            $process_limit = 50;
            if (isset(Config::get('apifetchlimit.SyncInventoryInBP')[$source_platform_name])) {
                $process_limit = Config::get('apifetchlimit.SyncInventoryInBP')[$source_platform_name]; //override process limit
            }
            $return = true;
            $defaultLOB = 0; // Define default Line Of Business (LOB)
            $Inventory_arr = [];

            $source_platform_id = $this->helper->getPlatformIdByName($source_platform_name);
            if (isset(Config::get('apisettings.FindLOBToSyncInventoryInBP')[$source_platform_name])) {
                //find default Line Of Business (LOB) from infoplus to sync speacific Line Of Business (LOB) Product's Inventory to Brightpearl
                $defaultLOB = $this->integrationCommonHelper->findDefaultLineOfBusiness($user_integration_id);
            }

            $inventory_object_id = $this->helper->getObjectId('inventory');
            /* Destination Platform Account Credentials */
            $ufound = $this->mobj->getPlatformAccountByUserIntegration($user_integration_id, $this->platformId, ['access_token', 'platform_id', 'id', 'user_id', 'api_domain', 'account_name', 'app_id', 'app_secret']);
            /* ----------------------------------------- */

            /* Find BP account additinal information for currency */
            $accountInformation = $this->mobj->getFirstResultByConditions('platform_account_addtional_information', ['account_id' => $ufound->id, 'user_integration_id' => $user_integration_id], ['account_currency_code'], ['id' => 'asc']);
            $account_currency_code = isset($accountInformation->account_currency_code) ? $accountInformation->account_currency_code : "";
            /* ------------------------------------------------------ */


            if ($ufound) {
                $DefaultInventoryWarehouseLocation = null;
                $DefaultInventoryWarehouseId = null;
                /* Find Default Warehouse */
                $DefaultWarehouseId = $this->map->getMappedDataByName($user_integration_id, $platform_workflow_rule_id, "inventory_warehouse", ['api_id']);

                if ($DefaultWarehouseId) {
                    $DefaultInventoryWarehouseLocation = $this->GetWarehouseDefaultLocation($user_integration_id, $DefaultWarehouseId->api_id);
                    $DefaultInventoryWarehouseId = $DefaultWarehouseId->api_id;
                }
                /* -------------------------------------- */
                /* Identify Product Uniqueness */
                $identity = app('App\Http\Controllers\Brightpearl\BrightpearlUtility')->ProductIdentityMapping($user_integration_id, $platform_workflow_rule_id);
                $source_identity = $identity['source_identity']; //Source Identity
                $destination_identity = $identity['destination_identity']; //Destination Identity
                /* Source & Destination Identity not null or empty */
                if ($destination_identity && $source_identity) {
                    do {
                        $allow_next_call = false;

                        if ($record_id) { //If single record found
                            $Inventory_arr = DB::table('platform_product as source_platform_product')
                                ->join('platform_product as destination_platform_product', 'destination_platform_product.' . $destination_identity, '=', 'source_platform_product.' . $source_identity)
                                ->select('source_platform_product.id', 'destination_platform_product.sku', 'destination_platform_product.api_product_id', 'destination_platform_product.id as destination_platform_product_id')
                                ->where(['source_platform_product.user_integration_id' => $user_integration_id, 'destination_platform_product.user_integration_id' => $user_integration_id])
                                ->where(['source_platform_product.platform_id' => $source_platform_id, 'destination_platform_product.platform_id' => $this->platformId])
                                ->where('source_platform_product.id', $record_id)
                                ->where('source_platform_product.is_deleted', 0)
                                ->where('destination_platform_product.is_deleted', 0)
                                ->limit($process_limit)
                                ->distinct()
                                ->get();
                        } else {
                            $query = DB::table('platform_product as source_platform_product')
                                ->join('platform_product as destination_platform_product', 'destination_platform_product.' . $destination_identity, '=', 'source_platform_product.' . $source_identity);
                            if ($defaultLOB) {
                                $query->join('platform_product_detail_attributes as at', 'at.platform_product_id', '=', 'source_platform_product.id')->where('at.lob', $defaultLOB);
                            }
                            $Inventory_arr = $query->where(['source_platform_product.inventory_sync_status' => $sync_status, 'source_platform_product.user_integration_id' => $user_integration_id, 'destination_platform_product.user_integration_id' => $user_integration_id])
                                ->where(['source_platform_product.platform_id' => $source_platform_id, 'destination_platform_product.platform_id' => $this->platformId])->select('source_platform_product.id', 'destination_platform_product.sku', 'destination_platform_product.api_product_id', 'destination_platform_product.id as destination_platform_product_id')
                                ->where('source_platform_product.is_deleted', 0)
                                ->where('destination_platform_product.is_deleted', 0)
                                ->orderBy('source_platform_product.updated_at', 'asc')
                                ->limit($process_limit)
                                ->distinct()
                                ->get();

                            if (!count($Inventory_arr)) { //if Ready not exist then pick Failed inventory.
                                $query = DB::table('platform_product as source_platform_product')
                                    ->join('platform_product as destination_platform_product', 'destination_platform_product.' . $destination_identity, '=', 'source_platform_product.' . $source_identity);
                                if ($defaultLOB) {
                                    $query->join('platform_product_detail_attributes as at', 'at.platform_product_id', '=', 'source_platform_product.id')->where('at.lob', $defaultLOB);
                                }
                                $Inventory_arr = $query->select('source_platform_product.id', 'destination_platform_product.sku', 'destination_platform_product.api_product_id', 'destination_platform_product.id as destination_platform_product_id')
                                    ->where(['source_platform_product.inventory_sync_status' => 'Failed', 'source_platform_product.user_integration_id' => $user_integration_id, 'destination_platform_product.user_integration_id' => $user_integration_id])
                                    ->where(['source_platform_product.platform_id' => $source_platform_id, 'destination_platform_product.platform_id' => $this->platformId])
                                    ->where('source_platform_product.is_deleted', 0)
                                    ->where('destination_platform_product.is_deleted', 0)
                                    ->orderBy('source_platform_product.updated_at', 'asc')
                                    ->limit($process_limit)
                                    ->distinct()
                                    ->get();
                            }
                        }

                        if ($Inventory_arr && count($Inventory_arr) == $process_limit) {
                            // Don't want to loop contineously
                            $allow_next_call = false;
                        }

                        if ($Inventory_arr && count($Inventory_arr)) {
                            foreach ($Inventory_arr as $Inventory) {

                                $product_inventory_arr = PlatformProductInventory::where(['user_id' => $user_id, 'user_integration_id' => $user_integration_id, 'platform_product_id' => $Inventory->id])->whereIn('sync_status', ['Ready', 'Failed'])->select('id', 'api_warehouse_id', 'quantity', 'platform_product_id')->get();


                                if (count($product_inventory_arr)) {
                                    $is_bundle_item = 0;
                                    $getinventoryurl = $Inventory->api_product_id . '?includeOptional=breakDownByLocation';
                                    $response = $this->bp->GetInventory($ufound, $getinventoryurl, 0);
                                    $BpGetInventory = json_decode($response->getBody(), true);
                                    if (isset($BpGetInventory['response']) && is_array($BpGetInventory['response'])) {
                                        $product_synced_error = $credit_user_workflow_rule_id = null;
                                        $platform_refund_ids = $inventory_credit_ids = [];
                                        foreach ($product_inventory_arr as $product_inventory) {
                                            /* Find Inventory Credit from Inventory credit table */
                                            $credits = app('App\Http\Controllers\Brightpearl\BrightpearlApiSubDivController')->GetInventoryCredits($product_inventory->id);

                                            if ($credits['total_quantity'] > 0) { //If total_quantity>0
                                                $product_inventory->quantity = $product_inventory->quantity + $credits['total_quantity']; //Sum total qty + credit qty
                                                $platform_refund_ids = $credits['platform_refund_id'];
                                                $inventory_credit_ids = $credits['inventory_credit_ids'];
                                                $credit_user_workflow_rule_id = $credits['user_workflow_rule_id'];
                                            }

                                            /* ------------------------------------------------- */

                                            $update_inventory_data = [];
                                            $priceListValue = 0;
                                            //Set Price list if mapping exists or set it to default
                                            if ($defInventPriceListMap) {
                                                if ($sel_def_inv_priclist_objId) {
                                                    $prodPriceListData = $this->mobj->getFirstResultByConditions('platform_porduct_price_list', ['platform_product_id' => $Inventory->destination_platform_product_id, 'platform_object_data_id' => $sel_def_inv_priclist_objId], ['price', 'api_currency_code']); //get product Price List details

                                                    if ($prodPriceListData) {
                                                        $priceListValue = $prodPriceListData->price;
                                                        $account_currency_code = $prodPriceListData->api_currency_code;
                                                    }
                                                }
                                            }
                                            //End

                                            //Set default update qty
                                            $update_quantity = 0;

                                            /*---Find one to one inventory warehouse mapping ---*/
                                            $defaultLocation = null;
                                            $InventoryWarehouseId = null;
                                            $warehouseId = $this->map->getMappedDataByName($user_integration_id, null, "inventory_warehouse", ['api_id'], 'regular', $product_inventory->api_warehouse_id);

                                            if ($warehouseId) {
                                                $defaultLocation = $this->GetWarehouseDefaultLocation($user_integration_id, $warehouseId->api_id);
                                                $InventoryWarehouseId = $warehouseId->api_id;
                                            } else {
                                                if ($DefaultInventoryWarehouseLocation) {
                                                    $defaultLocation = $DefaultInventoryWarehouseLocation;
                                                    $InventoryWarehouseId = $DefaultInventoryWarehouseId;
                                                } else {
                                                    continue;
                                                }
                                            }

                                            /*----stop to find inventory warehouse-------*/

                                            if ($defaultLocation) {
                                                $inventory = $BpGetInventory['response'];
                                                foreach ($inventory as $pr => $Inv_arr) {
                                                    $quantity = 0;
                                                    $reason = '';
                                                    if (count($Inv_arr['warehouses']) > 0) {
                                                        $findWarehouse = 0;
                                                        foreach ($Inv_arr['warehouses'] as $warehouse => $Inv) {
                                                            if ($warehouse == $InventoryWarehouseId) {
                                                                foreach ($Inv['byLocation'] as $location_id => $byLocation_data) {
                                                                    $quantity = $byLocation_data['onHand'];
                                                                    if ($location_id == $defaultLocation) {

                                                                        $findWarehouse = 1;

                                                                        $finalQtyArray = $this->CalculatInventoryQty($quantity, $product_inventory->quantity);
                                                                        if ($finalQtyArray) {
                                                                            $update_quantity = $finalQtyArray['update_qty'];
                                                                            $reason = $finalQtyArray['reason'];
                                                                        } else {
                                                                            $update_quantity = 0;
                                                                            $reason = "";
                                                                        }
                                                                        if ($update_quantity != 0) {
                                                                            $update_inventory_data[] = array("locationId" => $location_id, "productId" => $Inventory->api_product_id, "reason" => $reason, "quantity" => $update_quantity, "cost" => ['currency' => $account_currency_code, 'value' => $priceListValue]);
                                                                        }
                                                                    }
                                                                }
                                                            }
                                                        }

                                                        if ($findWarehouse == 0) {
                                                            // $quantity = isset($Inv_arr['total']['onHand']) ? $Inv_arr['total']['onHand'] : 0;
                                                            $quantity = 0;

                                                            $finalQtyArray = $this->CalculatInventoryQty($quantity, $product_inventory->quantity);
                                                            if ($finalQtyArray) {
                                                                $update_quantity = $finalQtyArray['update_qty'];
                                                                $reason = $finalQtyArray['reason'];
                                                            } else {
                                                                $update_quantity = 0;
                                                                $reason = "";
                                                            }

                                                            if ($update_quantity != 0) {
                                                                $reason = "Add stock to warehouse";
                                                                $update_inventory_data[] = array("locationId" => $defaultLocation, "productId" => $Inventory->api_product_id, "reason" => $reason, "quantity" => $update_quantity, "cost" => ['currency' => $account_currency_code, 'value' => $priceListValue]);
                                                            }
                                                        }
                                                    } else {
                                                        // if warehouse not get from Bp inventory
                                                        // $quantity = isset($Inv_arr['total']['onHand']) ? $Inv_arr['total']['onHand'] : 0;
                                                        $quantity = 0;

                                                        $finalQtyArray = $this->CalculatInventoryQty($quantity, $product_inventory->quantity);
                                                        if ($finalQtyArray) {
                                                            $update_quantity = $finalQtyArray['update_qty'];
                                                            $reason = $finalQtyArray['reason'];
                                                        } else {
                                                            $update_quantity = 0;
                                                            $reason = "";
                                                        }

                                                        if ($update_quantity != 0) {
                                                            $update_inventory_data[] = array("locationId" => $defaultLocation, "productId" => $Inventory->api_product_id, "reason" => $reason, "quantity" => $update_quantity, "cost" => ['currency' => $account_currency_code, 'value' => $priceListValue]);
                                                        }
                                                    }
                                                }

                                                if (count($update_inventory_data) > 0) {

                                                    $curl_post_data['corrections'] = $update_inventory_data;

                                                    $response = $this->bp->UpdateInventory($ufound, $InventoryWarehouseId, $curl_post_data);
                                                    $Inventory_data = json_decode($response->getBody(), true);
                                                    if (isset($Inventory_data['response'])) {
                                                        $this->mobj->makeUpdate('platform_product_inventory', ['sync_status' => 'Synced'], ['id' => $product_inventory->id]);
                                                        if (count($inventory_credit_ids)) {
                                                            /* ---Update Inventory Credit Status--- */
                                                            app('App\Http\Controllers\Brightpearl\BrightpearlApiSubDivController')->UpdateInventoryCreditStatus($inventory_credit_ids);
                                                            /* ---Update Refund Order Status Status--- */
                                                            app('App\Http\Controllers\Brightpearl\BrightpearlApiSubDivController')->UpdateOrderRefundStatus($platform_refund_ids, $user_id, $user_integration_id, $credit_user_workflow_rule_id, $source_platform_id);
                                                        }
                                                    } elseif (isset($Inventory_data['errors'])) {
                                                        $product_synced_error = @$Inventory_data['errors'][0]['message'];
                                                        $this->mobj->makeUpdate('platform_product_inventory', ['sync_status' => 'Failed'], ['id' => $product_inventory->id]);

                                                        //log error of bp inventory sync
                                                        Storage::disk('local')->append('error_debug.txt', 'Bp - ' . $source_platform_name . ', sync resp userInteg - ' . $user_integration_id . json_encode($Inventory_data, true));
                                                        Storage::disk('local')->append('error_debug.txt', 'Bp - ' . $source_platform_name . ', sync curl post data UserInteg - ' . $user_integration_id . json_encode($curl_post_data, true));
                                                    }
                                                } else {
                                                    if ($update_quantity == 0) {
                                                        $sync_status = "Synced";
                                                    } else {
                                                        $product_synced_error = 'Inventory information not Found';
                                                        $sync_status = "Failed";
                                                    }

                                                    $this->mobj->makeUpdate('platform_product_inventory', ['sync_status' => $sync_status], ['id' => $product_inventory->id]);
                                                }
                                            } else {
                                                $product_synced_error = 'Default warehouse location not found for selected inventory warehouse.';
                                                $sync_status = "Failed";

                                                $this->mobj->makeUpdate('platform_product_inventory', ['sync_status' => $sync_status], ['id' => $product_inventory->id]);
                                            }
                                        }
                                        if ($product_synced_error) {
                                            $return = $product_synced_error;
                                            $this->mobj->makeUpdate('platform_product', ['inventory_sync_status' => "Failed"], ['id' => $Inventory->id]);
                                            $this->log->syncLog($user_id, $user_integration_id, $user_workflow_rule_id, $source_platform_id, $this->platformId, $inventory_object_id, "failed", $Inventory->id, $product_synced_error);
                                        } else {
                                            $this->mobj->makeUpdate('platform_product', ['inventory_sync_status' => "Synced", 'adjustment_sync_status' => "Synced"], ['id' => $Inventory->id]);
                                            $this->log->syncLog($user_id, $user_integration_id, $user_workflow_rule_id, $source_platform_id, $this->platformId, $inventory_object_id, "success", $Inventory->id, 'Inventory synced successfully!');

                                            //update Audit trail also...if snapshot is synced..
                                            PlatformInventoryTrail::where(['platform_product_id' => $Inventory->id, 'sync_status' => 'Ready'])->update(['sync_status' => 'Synced']);
                                        }
                                    } elseif (isset($BpGetInventory['errors'][0]['message'])) {
                                        $return = $BpGetInventory['errors'][0]['message'];
                                        if (in_array($source_platform_name, Config::get('apisettings.UpdateInventoryStatusIgnored')) && ($BpGetInventory['errors'][0]['message'] == 'This is a non stock tracked product.' || $BpGetInventory['errors'][0]['message'] == 'These are non stock tracked products.') ) {
                                            $return = true;
                                            $this->mobj->makeUpdate('platform_product', ['inventory_sync_status' => 'Ignore'], ['id' => $Inventory->id]);
                                            $this->log->syncLog($user_id, $user_integration_id, $user_workflow_rule_id, $source_platform_id, $this->platformId, $inventory_object_id, 'failed', $Inventory->id, $BpGetInventory['errors'][0]['message']);
                                        } else {
                                            $this->mobj->makeUpdate('platform_product', ['inventory_sync_status' => 'Failed'], ['id' => $Inventory->id]);
                                            $this->log->syncLog($user_id, $user_integration_id, $user_workflow_rule_id, $source_platform_id, $this->platformId, $inventory_object_id, 'failed', $Inventory->id, $BpGetInventory['errors'][0]['message']);
                                        }
                                    }
                                } else {
                                    if (in_array($source_platform_name, Config::get('apisettings.UpdateInventoryStatusIgnored'))) {
                                        $return = true;
                                        $this->mobj->makeUpdate('platform_product', ['inventory_sync_status' => 'Ignore'], ['id' => $Inventory->id]);
                                        $this->log->syncLog($user_id, $user_integration_id, $user_workflow_rule_id, $source_platform_id, $this->platformId, $inventory_object_id, 'failed', $Inventory->id, 'Inventory information not found!');
                                    } else {
                                        $this->mobj->makeUpdate('platform_product', ['inventory_sync_status' => 'Synced'], ['id' => $Inventory->id]);
                                        $this->log->syncLog($user_id, $user_integration_id, $user_workflow_rule_id, $source_platform_id, $this->platformId, $inventory_object_id, 'success', $Inventory->id, 'Inventory synced!');
                                    }
                                }
                            }
                        }
                    } while ($allow_next_call);
                }
            }
        } catch (\Exception $e) {
            Log::error($user_integration_id . " -> BrightPearlApiController -> SyncInventory -> " . $e->getLine() . " -> " . $e->getMessage());
            $return = $e->getMessage();
        }
        return $return;
    }


    //calculation inventory adjustment
    public function CalculatInventoryQty($bp_quantity = 0, $product_inventory_quantity = 0)
    {
        $finalQtyArray = [];
        $update_stock = ($bp_quantity) - ($product_inventory_quantity);
        if ($update_stock > 0) {
            //check update stock is greate the bp existing qty
            if ($update_stock > $bp_quantity) {
                $extraQty = $update_stock - $bp_quantity;
                $update_quantity = - ($update_stock - $extraQty);
            } else {
                $update_quantity = - ($update_stock);
            }
            $reason = "Removed by APIWORX";
        } else if ($update_stock == 0) {
            $update_quantity = 0;
            $reason = "Invenory are same";
        } else {
            $update_quantity = abs($update_stock);
            $reason = "Added by APIWORX";
        }

        $finalQtyArray['update_qty'] = $update_quantity;
        $finalQtyArray['reason'] = $reason;

        return $finalQtyArray;
    }


    public function GetWarehouseDefaultLocation($userIntegrationId, $warehouseId)
    {
        $ufound = $this->mobj->getPlatformAccountByUserIntegration($userIntegrationId, $this->platformId, ['access_token', 'platform_id', 'id', 'user_id', 'api_domain', 'account_name', 'app_id', 'app_secret']);
        if ($ufound) {
            $response = $this->bp->GetWarehouseDefaultLocation($ufound, $warehouseId);
            if ($response) {
                $response_data = json_decode($response->getBody(), true);
                if (isset($response_data['response']) && is_integer($response_data['response'])) {
                    return $response_data['response'];
                } else {
                    //return $response_data['errors'];
                }
            }
        }
        return 0;
    }

    /*
     * UPDATE SHIPMENT | UPDATE TRACKING INFO & SHIPPING METHOD IN SHIPMENT
     */
    public function SyncTrackingInformation($userId, $userIntegrationId, $PlatformWorkFlowRuleID, $UserWorkFlowRuleID, $SourcePlatformName, $sync_status = "Ready", $RecordID = 0)
    {
        $return_response = false;
        try {
            $limit = 25;
            $object_id = $this->helper->getObjectId('sales_order');
            $ufound = $this->mobj->getPlatformAccountByUserIntegration($userIntegrationId, $this->platformId, ['access_token', 'platform_id', 'id', 'user_id', 'api_domain', 'account_name', 'app_id', 'app_secret']);

            $SourcePlatformId = $this->helper->getPlatformIdByName($SourcePlatformName);
            $SOurceUfound = $this->mobj->getPlatformAccountByUserIntegration($userIntegrationId, $SourcePlatformId, ['access_token', 'platform_id', 'id', 'user_id', 'api_domain', 'account_name', 'app_id', 'app_secret', 'secret_key', 'marketplace_id']);

            if ($ufound && $this->platformId && $SourcePlatformId && $SOurceUfound) {

                if (isset($ufound->platform_id) && $ufound->platform_id == $this->platformId) {
                    $query = PlatformOrderShipment::with('platformOrder', 'platformShipment:id,shipment_id,order_id,shipment_sequence_number,platform_order_id')->select('id', 'user_id', 'platform_id', 'user_integration_id', 'shipment_id', 'sync_status', 'tracking_info', 'realease_date', 'platform_order_id', 'order_id', 'shipping_method', 'linked_id', 'carrier_code', 'tracking_url', 'weight', 'boxes');
                    if ($RecordID && $RecordID !== 0) {
                        $query->where('platform_order_id', $RecordID);
                    } else {
                        $query->where([
                            [
                                'platform_id', '=', $SourcePlatformId,
                            ], [
                                'user_integration_id', '=', $userIntegrationId,
                            ], [
                                'sync_status', '=', $sync_status,
                            ],
                        ]);
                    }
                    $list = $query->orderBy('order_id', 'ASC')->take($limit)->get();

                    if (!empty($list) && count($list) > 0) {
                        /*--Start getting default shipping method--- */
                        $shippingMethodId = $this->map->getMappedDataByName($userIntegrationId, $PlatformWorkFlowRuleID, "sorder_shipping_method", ['api_id']);
                        $shippingId = isset($shippingMethodId) && $shippingMethodId ? $shippingMethodId->api_id : null;
                        /* ---End getting default shipping method-- */
                        $shipping_method_object_id = $this->helper->getObjectId('shipping_method');
                        $sourceMethodMemo = $OneToOneShippingMethodMemo = [];
                        foreach ($list as $key => $shipment) {
                            if ($shipment->linked_id && isset($shipment->platformShipment->shipment_id)) {
                                $sourceMethod = (object) ['api_id' => null]; //cast array to object
                                $sales_order_shipping_method = (object) ['api_id' => null]; //cast array to object
                                $indexId = $userIntegrationId . "_" . $SourcePlatformId . "_" . $shipment->shipping_method;
                                if (isset(Config::get('apisettings.FindShippingMethodForShiphawkForTrackingInformationInBP')[$SourcePlatformName])) {
                                    /* If source platform is shiphawk We don't need to call to get shipping method by name */
                                    $sourceMethod->api_id = $shipment->shipping_method;
                                } else {

                                    if (isset($sourceMethodMemo[$indexId])) {
                                        /* Pick Values From Caching */
                                        $sourceMethod->api_id = $sourceMethodMemo[$indexId];
                                    } else {
                                        $sourceMethod = $this->map->getObjectDataByFilterData($userId, $userIntegrationId, $SourcePlatformId, $shipping_method_object_id, "api_id", $shipment->shipping_method, ["api_id"]);
                                        if (isset($sourceMethod->api_id)) {
                                            $sourceMethodMemo[$indexId] = $sourceMethod->api_id;
                                        }
                                    }
                                }
                                if (isset($sourceMethod->api_id)) {

                                    $is_mapping_check = true;
                                    if (isset(Config::get('apisettings.FindShippingMethodFor3PLForTrackingInformationInBP')[$SourcePlatformName])) {
                                        $is_mapping_check = false;
                                        // Find Shipping Method From 3pl and explode in 2 variable- 1st by "space" and 2nd by "-"
                                        /*****Case-1*****/
                                        $strpos = strpos($sourceMethod->api_id, " "); //find first space
                                        if ($strpos !== false) {
                                            $firstShippingMethodName = substr($sourceMethod->api_id, 0, $strpos);
                                        } else {
                                            //if space not found then find fist "-"
                                            $strpos = strpos($sourceMethod->api_id, "-");
                                            if ($strpos !== false) {
                                                $firstShippingMethodName = substr($sourceMethod->api_id, 0, $strpos);
                                            } else {
                                                $firstShippingMethodName = $sourceMethod->api_id;
                                            }
                                        }
                                        /*****End Case-1******/
                                        /******Case-2*****/
                                        $strpos2 = strpos($sourceMethod->api_id, "-"); //find first "-"
                                        if ($strpos2 !== false) {
                                            $secondShippingMethodName = substr($sourceMethod->api_id, 0, $strpos2);
                                        } else {
                                            $secondShippingMethodName = $sourceMethod->api_id;
                                        }
                                        /******End Case-2********/
                                        $find_shipping_method = PlatformObjectData::select('api_id')->where([
                                            //['user_id', '=', $userId],
                                            ['user_integration_id', '=', $userIntegrationId],
                                            ['platform_id', '=', $this->platformId],
                                            ['platform_object_id', '=', $shipping_method_object_id],
                                            ['status', '=', 1],
                                        ])->where(function ($query) use ($firstShippingMethodName, $secondShippingMethodName) {
                                            $query->where('name', 'like', $firstShippingMethodName . "%")
                                                ->orWhere('name', 'like', $secondShippingMethodName . "%");
                                        })->first();
                                        // $find_shipping_method = $this->map->getObjectDataByFilterData($userId, $userIntegrationId, $this->platformId, $object_id, "name",  $sourceMethod->api_id, ["api_id"],'like','%',"last");//like is operator and second one is operator argument like % and last one is wildcart position | if you pass

                                        if (isset($find_shipping_method->api_id)) {
                                            $shippingId = $find_shipping_method->api_id;
                                        }
                                    }
                                    if ($is_mapping_check) {
                                        /* Find One to One Shipping Method Mapping using api_id | don't need to check by name  */

                                        if (isset($OneToOneShippingMethodMemo[$indexId])) {
                                            /* Pick Values From Caching */
                                            $sales_order_shipping_method->api_id = $OneToOneShippingMethodMemo[$indexId];
                                        } else {
                                            $sales_order_shipping_method = $this->map->getMappedDataByName($userIntegrationId, $PlatformWorkFlowRuleID, "sorder_shipping_method", ['api_id'], 'regular', $shipment->shipping_method);
                                            if (isset($sales_order_shipping_method->api_id)) {
                                                $OneToOneShippingMethodMemo[$indexId] = $sales_order_shipping_method->api_id;
                                            }
                                        }

                                        if (isset($sales_order_shipping_method->api_id)) {
                                            $shippingId = $sales_order_shipping_method->api_id;
                                        } else {
                                            if (!isset(Config::get('apisettings.FindShippingMethodForShiphawkForTrackingInformationInBP')[$SourcePlatformName])) {
                                                /* If  one to one mapping not found */
                                                $find_shipping_method = $this->map->getObjectDataByFilterData($userId, $userIntegrationId, $this->platformId, $shipping_method_object_id, "name", $sourceMethod->api_id, ["api_id"]);
                                                if (isset($find_shipping_method->api_id)) {
                                                    $shippingId = $find_shipping_method->api_id;
                                                }
                                            }
                                        }
                                    }
                                }
                                $postArr['priority'] = false;
                                if ($shippingId) {
                                    $postArr['shipping']["shippingMethodId"] = $shippingId;
                                }
                                if ($shipment->tracking_info) {
                                    $postArr['shipping']["reference"] = (strlen($shipment->tracking_info) > 64) ? substr($shipment->tracking_info, 0, 64) : $shipment->tracking_info;
                                }
                                if ($shipment->boxes) {
                                    $postArr['shipping']["boxes"] = $shipment->boxes;
                                }
                                if ($shipment->weight) {
                                    $postArr['shipping']["weight"] = $shipment->weight;
                                }
                                if ($shipment->tracking_url) {
                                    $postArr['labelUri'] = (strlen($shipment->tracking_url) > 512) ? substr($shipment->tracking_url, 0, 512) : $shipment->tracking_url;
                                }

                                //for sending shiphawk second or more shipment information in note in bp
                                $allowPutGoodsOutNotes = true;
                                if (isset(\Config::get('apisettings.sendSecondOrMoreShipmentInfoInNoteInBp')[$SourcePlatformName]) && $shipment->platformShipment->shipment_sequence_number > 1) {
                                    $alreadySyncedShipment = PlatformOrderShipment::where(['order_id' => $shipment->platformShipment->order_id, 'sync_status' => 'Synced'])
                                        ->first();
                                    if ($alreadySyncedShipment) {
                                        $allowPutGoodsOutNotes = false;
                                        $this->sendNoteForShipmentInformation($ufound, $shipment, "");

                                        $shipment->sync_status = "Synced";
                                        $shipment->save();

                                        //synced order
                                        $order = PlatformOrder::find($shipment->platform_order_id);
                                        if ($order->shipment_status != 'Synced') {
                                            $order->shipment_status = "Synced";
                                            $order->save();
                                        }



                                        $this->log->syncLog($userId, $userIntegrationId, $UserWorkFlowRuleID, $SourcePlatformId, $this->platformId, $object_id, 'synced', $shipment->platform_order_id, null);
                                    }
                                }

                                //update tracking number in order custom field..
                                // if ($SourcePlatformName == 'shipstation') {
                                if (isset(\Config::get('apisettings.UpdateTrackingInfoOnCustomFieldInBp')[$SourcePlatformName])) {
                                    $api_order_id = $shipment->platformShipment->order_id; // brightpearl order_id
                                    $platform_order_id = $shipment->platformShipment->platform_order_id;

                                    if ($shipment->tracking_info) {

                                        //single tracking info
                                        $tracking_info = $shipment->tracking_info;

                                        $list_track_info = PlatformOrderShipment::where(['platform_order_id' => $shipment->platform_order_id])->whereNotNull('tracking_info')->select('tracking_info')->pluck('tracking_info')->toArray();
                                        if (count($list_track_info) > 1) {

                                            $count_synced_tracking = PlatformOrderShipment::where(['platform_order_id' => $shipment->platform_order_id])->whereNotNull('tracking_info')->where('sync_status', 'Synced')->count();

                                            if ($count_synced_tracking > 0) {

                                                //sync shipment as synced
                                                $shipment->sync_status = "Synced";
                                                $shipment->save();

                                                //synced order
                                                $order = PlatformOrder::find($shipment->platform_order_id);
                                                if ($order->shipment_status != 'Synced') {
                                                    $order->shipment_status = "Synced";
                                                    $order->save();
                                                }


                                                $this->log->syncLog($userId, $userIntegrationId, $UserWorkFlowRuleID, $SourcePlatformId, $this->platformId, $object_id, 'synced', $shipment->platform_order_id, null);

                                                return true;
                                            } else {
                                                $tracking_info = implode(",", $list_track_info);
                                            }
                                        }
                                        //end

                                        $this->updateSingleCustomFieldByFieldName($ufound, $userIntegrationId, $object_id, $api_order_id, $tracking_info, 'TRACKING_NUMBER');
                                    }

                                    //update order line...
                                    app('App\Http\Controllers\Brightpearl\BrightPearlApiSubController')->UpdateOrderLine($userIntegrationId, $ufound, $platform_order_id, $api_order_id, 'SHIPPING');
                                }
                                //end update tracking info in custom field


                                if ($allowPutGoodsOutNotes) {
                                    $response = $this->bp->PutGoodsOutNotes(
                                        $ufound,
                                        null,
                                        $postArr,
                                        $shipment->platformShipment->shipment_id
                                    );

                                    $response_data = json_decode($response->getBody(), true);

                                    // \Log::channel('webhook')->info("shipostres -" .json_encode($response_data) ." Created Date : " . date('Y-m-d H:i:s'));
                                    if (isset($response_data) && empty($response_data)) {

                                        if (in_array($SourcePlatformName, \Config::get('apisettings.GOFinalShipment'))) { // Calling Only For Goods Out Note Final Shipment

                                            $response = $this->bp->PostGoodsOutNoteEvent($ufound, null, [
                                                "events" => [
                                                    [
                                                        "eventCode" => "SHW",
                                                        "occured" => date(DATE_ISO8601),
                                                        "eventOwnerId" => rand(2, 2),
                                                    ],
                                                ],
                                            ], $shipment->platformShipment->shipment_id);
                                            $eventResponse = json_decode($response->getBody(), true);
                                            if (isset($eventResponse) && empty($eventResponse)) {

                                                // Sending the shipment information note for specific platforms
                                                if (in_array($SourcePlatformName, \Config::get('apisettings.shipmentInformationNotes'))) {



                                                    if ($SourcePlatformName == 'amazonmcf') {
                                                        $noteForShipmentInformation = "Goods shipped on Amazon shipment {$shipment->platformOrder->order_number}, shipped on {$shipment->realease_date}. Package Number {$shipment->platformShipment->shipment_id}, sent via {$shipment->carrier_code}, tracking number {$shipment->tracking_info}.";

                                                        $this->sendNoteForShipmentInformation($ufound, $shipment, $noteForShipmentInformation);
                                                    } else {
                                                        $this->sendNoteForShipmentInformation($ufound, $shipment, "");
                                                    }
                                                }

                                                $shipment->sync_status = "Synced";
                                                $shipment->save();
                                                $order = PlatformOrder::find($shipment->platform_order_id);
                                                $order->shipment_status = "Synced";
                                                $order->save();
                                                $this->log->syncLog($userId, $userIntegrationId, $UserWorkFlowRuleID, $SourcePlatformId, $this->platformId, $object_id, 'synced', $shipment->platform_order_id, null);
                                            } else if (isset($response_data['errors']) || isset($response_data['response'])) {
                                                $shipment->sync_status = "Failed";
                                                $shipment->save();
                                                $order = PlatformOrder::find($shipment->platform_order_id);
                                                $order->shipment_status = "Failed";
                                                $order->save();
                                                $error = $this->bp->handleResponseError($response_data);
                                                /* Customize BP Errors */
                                                $GON = $shipment->platformShipment->order_id . "/" . $shipment->platformShipment->shipment_sequence_number;
                                                $response = app('App\Http\Controllers\Brightpearl\BrightpearlUtility')->MakeCustomError($error, $GON);
                                                if ($response['status'] == 1) {
                                                    $error = $response['status_text'];
                                                }
                                                $this->log->syncLog($userId, $userIntegrationId, $UserWorkFlowRuleID, $SourcePlatformId, $this->platformId, $object_id, 'failed', $shipment->platform_order_id, $error);
                                            }
                                        } else {
                                            $shipment->sync_status = "Synced";
                                            $shipment->save();
                                            $order = PlatformOrder::find($shipment->platform_order_id);
                                            $order->shipment_status = "Synced";
                                            $order->save();
                                            $this->log->syncLog($userId, $userIntegrationId, $UserWorkFlowRuleID, $SourcePlatformId, $this->platformId, $object_id, 'synced', $shipment->platform_order_id, null);
                                        }
                                    } else if (isset($response_data['errors']) || isset($response_data['response'])) {
                                        $shipment->sync_status = "Failed";
                                        $shipment->save();
                                        $order = PlatformOrder::find($shipment->platform_order_id);
                                        $order->shipment_status = "Failed";
                                        $order->save();
                                        $error = $this->bp->handleResponseError($response_data);
                                        /* Customize BP Errors */
                                        $GON = $shipment->platformShipment->order_id . "/" . $shipment->platformShipment->shipment_sequence_number;
                                        $response = app('App\Http\Controllers\Brightpearl\BrightpearlUtility')->MakeCustomError($error, $GON);
                                        if ($response['status'] == 1) {
                                            $error = $response['status_text'];
                                        }
                                        /* ------------------- */

                                        $this->log->syncLog($userId, $userIntegrationId, $UserWorkFlowRuleID, $SourcePlatformId, $this->platformId, $object_id, 'failed', $shipment->platform_order_id, $error);
                                    }
                                }
                            }
                        }
                        $return_response = true;
                    }
                }
            }
        } catch (\Exception $e) {

            $return_response = $e->getMessage();
        }
        return $return_response;
    }

    //for sending second or more shipment information in note in bp
    public function sendNoteForShipmentInformation($ufound, $shipment, $noteForShipmentInformation = "")
    {
        if (empty($noteForShipmentInformation)) {
            $noteForShipmentInformation = "Goods Out Note {$shipment->platformShipment->order_id} shipped on " . date('M/d/Y') . " by {$shipment->carrier_code}. Tracking Reference {$shipment->tracking_info}";
        }

        $shipmentnoteResp = app('App\Http\Controllers\Brightpearl\BrightPearlApiController')->AddOrderNotes($ufound, $shipment->platformShipment->order_id, $noteForShipmentInformation);
        if ($shipmentnoteResp && !isset($shipmentnoteResp['errors'])) {
            \Storage::disk('local')->append('tt.txt', 'Note for order id - ' . $shipment->platformShipment->order_id);
        }
    }

    /* Update Order Status And Goods Out Note- under GON update events as live shipped,pack,print,pick */
    //  public function UpdateOrder

    /* Create Purchase Order Invoice Payment */
    public function CreatePOInvoicePayment($userId = null, $userIntegrationId = null, array $postData, $invoice_payment_type = 'NonPOInvoice')
    {
        try {

            $ufound = $this->mobj->getPlatformAccountByUserIntegration($userIntegrationId, $this->platformId, ['access_token', 'platform_id', 'id', 'user_id', 'api_domain', 'account_name', 'app_id', 'app_secret']);
            if ($ufound && $this->platformId) {
                if (isset($ufound->platform_id) && $ufound->platform_id == $this->platformId) { //for only BP integration

                    $response = $this->bp->CreatePOInvoicePayment($ufound, null, $postData, 'json', $invoice_payment_type);

                    if ($order = json_decode($response->getBody(), true)) {

                        return $order;
                    }
                    return false;
                }
            }
        } catch (\Exception $e) {
            Log::error($e->getMessage());
            return false;
        }
    }

    /* Sync purchase Order Invoice Payment In BP */
    public function CreatePurchaseOrderInvoicePayment($userId, $userIntegrationId, $SourcePlatformName, $WorkFlowID, $UserWorkFlow, $invoice_payment_type = 'NonPOInvoice', $sync_status = 'Ready', $RecordID = null)
    {

        $this->mobj->AddMemory();

        $return_response = true;
        try {
            $limit = 30;
            $object_id = $this->helper->getObjectId('purchase_order_invoice_payment');
            $ufound = $this->mobj->getPlatformAccountByUserIntegration($userIntegrationId, $this->platformId, ['access_token', 'platform_id', 'id', 'user_id', 'api_domain', 'account_name', 'app_id', 'app_secret']);

            $SourcePlatformId = $this->helper->getPlatformIdByName($SourcePlatformName);

            if ($ufound && $this->platformId && $SourcePlatformId) {

                if (isset($ufound->platform_id) && $ufound->platform_id == $this->platformId) {


                    $wheredata = ['pot.platform_id' => $SourcePlatformId, 'pot.user_integration_id' => $userIntegrationId];
                    if ($invoice_payment_type != 'NonPOInvoice') {
                        $wheredata['pi.sync_status'] = 'Synced';
                    }
                    if ($RecordID && $RecordID !== 0) {
                        $wheredata['pot.id'] = $RecordID;
                    } else {
                        $wheredata['pot.sync_status'] = $sync_status;
                    }

                    $query = DB::table('platform_order_transactions as pot');

                    if ($invoice_payment_type != 'NonPOInvoice') {
                        $query->join('platform_invoice as pi', function ($join) {
                            $join->on('pot.user_integration_id', '=', 'pi.user_integration_id')
                                ->on('pot.transaction_reference', '=', 'pi.ref_number');
                        });
                    }

                    $transaction_ids = $query->where($wheredata)->select('pot.transaction_id')->orderBy('pot.id', 'ASC')->take($limit)->groupBy('pot.transaction_id')->pluck('pot.transaction_id');

                    if (!empty($transaction_ids) && count($transaction_ids) > 0) {
                        foreach ($transaction_ids as $transaction_id) {


                            $where_transactions = ['pot.platform_id' => $SourcePlatformId, 'pot.user_integration_id' => $userIntegrationId, 'pot.transaction_id' => $transaction_id];
                            if ($invoice_payment_type != 'NonPOInvoice') {
                                $where_transactions['pot.sync_status'] = $sync_status;
                            }


                            $transaction_list = DB::table('platform_order_transactions as pot')->leftJoin('platform_customer as pc', 'pot.platform_customer_id', '=', 'pc.id')->leftJoin('platform_order as po', function ($join) {
                                $join->on('po.user_integration_id', '=', 'pot.user_integration_id')
                                    ->on('po.id', '=', 'pot.platform_order_id');
                            })->select('pot.id', 'pot.platform_order_id', 'pot.transaction_id', 'pot.transaction_datetime', 'pot.transaction_type', 'pot.transaction_method', 'pot.transaction_amount', 'pot.transaction_reference', 'pot.platform_customer_id', 'pot.currency_code', 'pot.exchange_rate', 'pot.bank_account', 'pot.linked_id', 'pot.transaction_response_text', 'po.api_order_id', 'pc.api_customer_id', 'po.invoice_sync_status', 'pot.api_customer_code')->where($where_transactions)->orderBy('pot.id', 'ASC')->get();


                            if (!empty($transaction_list) && count($transaction_list) > 0) {

                                Storage::disk('local')->append('Bhoopendra.txt', "\r\n" . "Date -> " . date('Y-m-d H:i:s') . "userIntegrationId : " . $userIntegrationId . "CreatePurchaseOrderInvoicePayment" . $invoice_payment_type);

                                $exchange_rates = [];



                                $api_customer_id = @$transaction_list[0]->api_customer_id ? @$transaction_list[0]->api_customer_id : '';
                                if (isset(Config::get('apisettings.CheckAccountCodeInBP')[$SourcePlatformName])) {
                                    $find = PlatformCustomer::select('api_customer_id')->where(['platform_id' => $this->platformId, 'user_integration_id' => $userIntegrationId, 'api_customer_code' => $transaction_list[0]->api_customer_code])->first();
                                    $api_customer_id = @$find->api_customer_id ? @$find->api_customer_id : '';
                                }

                                if ($api_customer_id) {

                                    $error = '';
                                    $is_create_payment = 0;
                                    if (!isset($exchange_rates[$transaction_list[0]->currency_code])) {
                                        $response_currency = $this->bp->searchCurrency($ufound, $transaction_list[0]->currency_code);

                                        $response_currency = json_decode($response_currency->getBody(), true);

                                        $live_exchange_rate = @$response_currency['response']['results'][0][4] ? @$response_currency['response']['results'][0][4] : '';

                                        if ($live_exchange_rate != '') {

                                            $exchange_rates[$transaction_list[0]->currency_code] = $live_exchange_rate;
                                            $is_create_payment = 1;
                                        } else if ($live_exchange_rate == '') {

                                            $error = "Currency not exist in Brightpearl.";
                                        } else if (isset($response_currency['errors'])) {
                                            $error = $this->bp->handleResponseError($response_currency);
                                            if ($error == 'You have sent too many requests. Please wait before sending another request') {
                                                sleep(1);
                                                continue;
                                            } else {
                                                $error = "Unexpected, Brightpearl internal error, please resync again";
                                                if (isset($response_currency['response'])) {
                                                    $error = $response_currency['response'];
                                                }
                                            }
                                        } else {
                                            $error = "Unexpected, Brightpearl internal error, please resync again";

                                            if (isset($response_currency['response'])) {
                                                $error = $response_currency['response'];
                                            }
                                        }
                                    } else {
                                        $is_create_payment = 1;
                                    }
                                    if ($error != '') {
                                        $return_response = $error;
                                    }



                                    if ($transaction_list[0]->currency_code != '' && $transaction_list[0]->transaction_datetime != '' && $transaction_list[0]->transaction_reference != '' && $transaction_list[0]->bank_account != '' && $is_create_payment == 1) {


                                        $response_currency = $this->bp->GetCurrency($ufound, $transaction_list[0]->currency_code);
                                        $currency_id = "";
                                        if ($result_currency = json_decode($response_currency->getBody(), true)) {
                                            if (isset($result_currency['response']['results'][0][0])) {
                                                $currency_id = $result_currency['response']['results'][0][0];
                                            }
                                        }

                                        if ($currency_id != '') {

                                            $PostPayment = [];
                                            $PostPayment['header']['contactId'] = $api_customer_id;
                                            $PostPayment['header']['bankAccountNominalCode'] = $transaction_list[0]->bank_account;
                                            $PostPayment['header']['description'] = "Payment Reference : " . $transaction_id; //$transaction_list[0]->transaction_response_text;
                                            $PostPayment['header']['taxDate'] = date('Y-m-d', strtotime($transaction_list[0]->transaction_datetime));
                                            $PostPayment['header']['currencyId'] = $currency_id;
                                            $PostPayment['header']['exchangeRate'] = @$exchange_rates[$transaction_list[0]->currency_code] ? $exchange_rates[$transaction_list[0]->currency_code] : 0; //@$payment->exchange_rate ? $payment->exchange_rate : 0;

                                            $m = 0;

                                            foreach ($transaction_list as $payment) {

                                                $PostPayment['payments'][$m]['invoiceRef'] = $payment->transaction_reference;
                                                if (isset($payment->api_order_id) && $payment->api_order_id != '') {
                                                    $PostPayment['payments'][$m]['orderId'] = $payment->api_order_id;
                                                }

                                                $PostPayment['payments'][$m]['value'] = $payment->transaction_amount;
                                                $m++;
                                            }
                                            //dd($PostPayment);
                                            // echo "<pre>";
                                            // print_r($PostPayment);

                                            $paymentResponseBP = $this->CreatePOInvoicePayment($userId, $userIntegrationId, $PostPayment, 'NonPOInvoice');
                                            //echo "<pre>";
                                            // print_r($paymentResponseBP);

                                            Storage::disk('local')->append('Bhoopendra.txt', "\r\n" . "Date -> " . date('Y-m-d H:i:s') . "userIntegrationId : " . $userIntegrationId . " | paymentResponseBP : " . json_encode($paymentResponseBP, true));

                                            if (isset($paymentResponseBP['response'])) {

                                                $linked_id = $this->mobj->makeInsertGetId('platform_order_transactions', [
                                                    'platform_id' => $this->platformId,
                                                    'user_integration_id' => $userIntegrationId,
                                                    'api_transaction_index_id' => $paymentResponseBP['response'],
                                                    'sync_status' => 'Synced',
                                                    'linked_id' => $transaction_list[0]->id,
                                                ]);

                                                foreach ($transaction_list as $payment) {
                                                    $id = $payment->id;
                                                    $this->mobj->makeUpdate('platform_order_transactions', ['linked_id' => $linked_id, 'sync_status' => 'Synced'], ['id' => $id]);

                                                    if ($payment->platform_order_id) {
                                                        $this->mobj->makeUpdate('platform_order', ['transaction_sync_status' => 'Synced'], ['id' => $payment->platform_order_id]);
                                                    }

                                                    $this->log->syncLog($userId, $userIntegrationId, $UserWorkFlow, $SourcePlatformId, $this->platformId, $object_id, 'success', $id, null);
                                                }
                                            } else {

                                                $return_response = $error = $this->bp->handleResponseError($paymentResponseBP);
                                                foreach ($transaction_list as $payment) {
                                                    $id = $payment->id;
                                                    $this->mobj->makeUpdate('platform_order_transactions', ['sync_status' => 'Failed'], ['id' => $id]);

                                                    if ($payment->platform_order_id) {
                                                        $this->mobj->makeUpdate('platform_order', ['transaction_sync_status' => 'Failed'], ['id' => $payment->platform_order_id]);
                                                    }

                                                    $this->log->syncLog($userId, $userIntegrationId, $UserWorkFlow, $SourcePlatformId, $this->platformId, $object_id, 'failed', $id, $error);
                                                }
                                            }
                                        } else {
                                            $return_response = $error = "currency is missing or not identified.";
                                            foreach ($transaction_list as $payment) {
                                                $id = $payment->id;
                                                $this->mobj->makeUpdate('platform_order_transactions', ['sync_status' => 'Failed'], ['id' => $id]);
                                                if ($payment->platform_order_id) {
                                                    $this->mobj->makeUpdate('platform_order', ['transaction_sync_status' => 'Failed'], ['id' => $payment->platform_order_id]);
                                                }

                                                $this->log->syncLog($userId, $userIntegrationId, $UserWorkFlow, $SourcePlatformId, $this->platformId, $object_id, 'failed', $id, $error);
                                            }
                                        }
                                    } else {

                                        if ($error == '') {
                                            $return_response = $error = "payment details are missing";
                                        }
                                        foreach ($transaction_list as $payment) {
                                            $id = $payment->id;
                                            $this->mobj->makeUpdate('platform_order_transactions', ['sync_status' => 'Failed'], ['id' => $id]);
                                            if ($payment->platform_order_id) {
                                                $this->mobj->makeUpdate('platform_order', ['transaction_sync_status' => 'Failed'], ['id' => $payment->platform_order_id]);
                                            }

                                            $this->log->syncLog($userId, $userIntegrationId, $UserWorkFlow, $SourcePlatformId, $this->platformId, $object_id, 'failed', $id, $error);
                                        }
                                    }
                                } else {
                                    $return_response = $error = "supplier not found";
                                    foreach ($transaction_list as $payment) {
                                        $id = $payment->id;
                                        $this->mobj->makeUpdate('platform_order_transactions', ['sync_status' => 'Failed'], ['id' => $id]);

                                        if ($payment->platform_order_id) {
                                            $this->mobj->makeUpdate('platform_order', ['transaction_sync_status' => 'Failed'], ['id' => $payment->platform_order_id]);
                                        }

                                        $this->log->syncLog($userId, $userIntegrationId, $UserWorkFlow, $SourcePlatformId, $this->platformId, $object_id, 'failed', $id, $error);
                                    }
                                }
                            }
                        }
                    }
                }
            }
        } catch (\Exception $e) {
            Log::error($userIntegrationId . "--CreatePurchaseOrderInvoicePayment-->" . $e->getMessage());
            $return_response = $e->getMessage();
        }
        return $return_response;
    }

    //here in this function kefron payment things done but we try to move it on above new function when testing complete from kefron till please do not remove it.
    public function CreatePurchaseOrderInvoicePaymentOld($userId, $userIntegrationId, $SourcePlatformName, $WorkFlowID, $UserWorkFlow, $invoice_payment_type = 'NonPOInvoice', $sync_status = 'Ready', $RecordID = null)
    {

        $this->mobj->AddMemory();

        $return_response = false;
        try {
            $limit = 50;
            $object_id = $this->helper->getObjectId('purchase_order_invoice_payment');
            $ufound = $this->mobj->getPlatformAccountByUserIntegration($userIntegrationId, $this->platformId, ['access_token', 'platform_id', 'id', 'user_id', 'api_domain', 'account_name', 'app_id', 'app_secret']);

            $SourcePlatformId = $this->helper->getPlatformIdByName($SourcePlatformName);

            if ($ufound && $this->platformId && $SourcePlatformId) {

                if (isset($ufound->platform_id) && $ufound->platform_id == $this->platformId) {


                    $wheredata = ['pot.platform_id' => $SourcePlatformId, 'pot.user_integration_id' => $userIntegrationId, 'pi.sync_status' => 'Synced'];
                    if ($RecordID && $RecordID !== 0) {
                        $wheredata['pot.id'] = $RecordID;
                    } else {
                        $wheredata['pot.sync_status'] = $sync_status;
                    }

                    if ($invoice_payment_type == 'NonPOInvoice') {

                        $list = DB::table('platform_order_transactions as pot')->join('platform_invoice as pi', function ($join) {
                            $join->on('pot.user_integration_id', '=', 'pi.user_integration_id')
                                ->on('pot.transaction_reference', '=', 'pi.ref_number');
                        })->leftJoin('platform_customer as pc', 'pot.platform_customer_id', '=', 'pc.id')->select('pot.id', 'pot.platform_order_id', 'pot.transaction_id', 'pot.transaction_datetime', 'pot.transaction_type', 'pot.transaction_method', 'pot.transaction_amount', 'pot.transaction_reference', 'pot.platform_customer_id', 'pot.currency_code', 'pot.exchange_rate', 'pot.bank_account', 'pot.linked_id', 'pot.transaction_response_text', 'pc.api_customer_id', 'pot.api_customer_code')->where($wheredata)->orderBy('id', 'ASC')->take($limit)->get();
                    } else {

                        $list = DB::table('platform_order_transactions as pot')->join('platform_invoice as pi', function ($join) {
                            $join->on('pot.user_integration_id', '=', 'pi.user_integration_id')
                                ->on('pot.transaction_reference', '=', 'pi.ref_number');
                        })->leftJoin('platform_customer as pc', 'pot.platform_customer_id', '=', 'pc.id')->leftJoin('platform_order as po', 'pot.platform_order_id', '=', 'po.id')->select('pot.id', 'pot.platform_order_id', 'pot.transaction_id', 'pot.transaction_datetime', 'pot.transaction_type', 'pot.transaction_method', 'pot.transaction_amount', 'pot.transaction_reference', 'pot.platform_customer_id', 'pot.currency_code', 'pot.exchange_rate', 'pot.bank_account', 'pot.linked_id', 'pot.transaction_response_text', 'po.api_order_id', 'pc.api_customer_id', 'po.invoice_sync_status', 'pot.api_customer_code')->where($wheredata)->orderBy('id', 'ASC')->take($limit)->get();
                    }


                    if (!empty($list) && count($list) > 0) {

                        Storage::disk('local')->append('Bhoopendra.txt', "\r\n" . "Date -> " . date('Y-m-d H:i:s') . "userIntegrationId : " . $userIntegrationId . "CreatePurchaseOrderInvoicePayment" . $invoice_payment_type);

                        $exchange_rates = [];

                        foreach ($list as $payment) {

                            $id = $payment->id;

                            $api_customer_id = @$payment->api_customer_id ? @$payment->api_customer_id : '';
                            if (isset(Config::get('apisettings.CheckAccountCodeInBP')[$SourcePlatformName])) {
                                $find = PlatformCustomer::select('api_customer_id')->where(['platform_id' => $this->platformId, 'user_integration_id' => $userIntegrationId, 'api_customer_code' => $payment->api_customer_code])->first();
                                $api_customer_id = @$find->api_customer_id ? @$find->api_customer_id : '';
                            }

                            if ($api_customer_id) {

                                $error = '';
                                $is_create_payment = 0;
                                if (!isset($exchange_rates[$payment->currency_code])) {
                                    $response_currency = $this->bp->searchCurrency($ufound, $payment->currency_code);
                                    $response_currency = json_decode($response_currency->getBody(), true);
                                    $live_exchange_rate = @$response_currency['response']['results'][0][4] ? @$response_currency['response']['results'][0][4] : '';

                                    if ($live_exchange_rate != '') {

                                        $exchange_rates[$payment->currency_code] = $live_exchange_rate;
                                        $is_create_payment = 1;
                                    } else if (isset($response_currency['errors'])) {
                                        $error = $this->bp->handleResponseError($response_currency);
                                        if ($error == 'You have sent too many requests. Please wait before sending another request') {
                                            sleep(1);
                                            continue;
                                        } else {
                                            $error = "Unexpected, Brightpearl internal error, please resync again";
                                            if (isset($response_currency['response']) && !is_int($response_currency['response'])) {
                                                $error = $response_currency['response'];
                                            }
                                        }
                                    } else {
                                        $error = "Unexpected, Brightpearl internal error, please resync again";
                                        if (isset($response_currency['response']) && !is_int($response_currency['response'])) {
                                            $error = $response_currency['response'];
                                        }
                                    }
                                } else {
                                    $is_create_payment = 1;
                                }





                                if (($invoice_payment_type == 'NonPOInvoice' || ($invoice_payment_type == 'POInvoice' && $payment->api_order_id == '')) && $payment->currency_code != '' && $payment->transaction_datetime != '' && $payment->transaction_reference != '' && $payment->bank_account != '' && $is_create_payment == 1) {

                                    // For Non PO Invoice -> NO need to associate any purchase order and any purchase order can process here by contact id

                                    $response_currency = $this->bp->GetCurrency($ufound, $payment->currency_code, $invoice_payment_type);
                                    $currency_id = "";
                                    if ($result_currency = json_decode($response_currency->getBody(), true)) {
                                        if (isset($result_currency['response']['results'][0][0])) {
                                            $currency_id = $result_currency['response']['results'][0][0];
                                        }
                                    }

                                    if ($currency_id != '') {

                                        $PostPayment = [];
                                        $PostPayment['header']['contactId'] = $api_customer_id;
                                        $PostPayment['header']['bankAccountNominalCode'] = $payment->bank_account;
                                        $PostPayment['header']['description'] = $payment->transaction_response_text;
                                        $PostPayment['header']['taxDate'] = date('Y-m-d', strtotime($payment->transaction_datetime));
                                        $PostPayment['header']['currencyId'] = $currency_id;
                                        $PostPayment['header']['exchangeRate'] = @$exchange_rates[$payment->currency_code] ? $exchange_rates[$payment->currency_code] : 0; //@$payment->exchange_rate ? $payment->exchange_rate : 0;

                                        $PostPayment['payments'][0]['invoiceRef'] = $payment->transaction_reference;
                                        //$PostPayment['payments'][0]['orderId'] = $payment->api_order_id;
                                        $PostPayment['payments'][0]['value'] = $payment->transaction_amount;

                                        $paymentResponseBP = $this->CreatePOInvoicePayment($userId, $userIntegrationId, $PostPayment, 'NonPOInvoice');

                                        Storage::disk('local')->append('Bhoopendra.txt', "\r\n" . "Date -> " . date('Y-m-d H:i:s') . "userIntegrationId : " . $userIntegrationId . " | paymentResponseBP : " . json_encode($paymentResponseBP, true));

                                        if (isset($paymentResponseBP['response'])) {

                                            $linked_id = $this->mobj->makeInsertGetId('platform_order_transactions', [
                                                'platform_id' => $this->platformId,
                                                'user_integration_id' => $userIntegrationId,
                                                'api_transaction_index_id' => $paymentResponseBP['response'],
                                                'sync_status' => 'Synced',
                                                'linked_id' => $id,
                                            ]);

                                            $this->mobj->makeUpdate('platform_order_transactions', ['linked_id' => $linked_id, 'sync_status' => 'Synced'], ['id' => $id]);

                                            $this->log->syncLog($userId, $userIntegrationId, $UserWorkFlow, $SourcePlatformId, $this->platformId, $object_id, 'success', $id, null);
                                        } else {
                                            $error = $this->bp->handleResponseError($paymentResponseBP);
                                            $this->mobj->makeUpdate('platform_order_transactions', ['sync_status' => 'Failed'], ['id' => $id]);

                                            $this->log->syncLog($userId, $userIntegrationId, $UserWorkFlow, $SourcePlatformId, $this->platformId, $object_id, 'failed', $id, $error);
                                        }
                                    } else {
                                        $error = "payment details are missing";
                                        $this->mobj->makeUpdate('platform_order_transactions', ['sync_status' => 'Failed'], ['id' => $id]);

                                        $this->log->syncLog($userId, $userIntegrationId, $UserWorkFlow, $SourcePlatformId, $this->platformId, $object_id, 'failed', $id, $error);
                                    }
                                } else if ($payment->invoice_sync_status == 'Synced' && $payment->currency_code != '' && $payment->api_order_id != '' && $payment->transaction_datetime != '' && $is_create_payment == 1) {

                                    // For Invoice Payment -> Purchase Order Payment For Invoice ,This Payment only when Invoice got successfull created on BP

                                    $PostPayment = [
                                        "orderId" => $payment->api_order_id,
                                        "paymentMethodCode" => $payment->transaction_method,
                                        'paymentType' => "PAYMENT",
                                        "currencyIsoCode" => $payment->currency_code,
                                        "exchangeRate" => @$exchange_rates[$payment->currency_code] ? $exchange_rates[$payment->currency_code] : 0, //@$payment->exchange_rate ? $payment->exchange_rate : 0,
                                        "amountPaid" => $payment->transaction_amount,
                                        "paymentDate" => date(DATE_ISO8601, strtotime($payment->transaction_datetime)),
                                        "journalRef" => $payment->transaction_reference,
                                        "transactionRef" => $payment->transaction_id,
                                    ];

                                    $paymentResponseBP = $this->CreatePOInvoicePayment($userId, $userIntegrationId, $PostPayment, $invoice_payment_type);
                                    Storage::disk('local')->append('Bhoopendra.txt', "\r\n" . "Date -> " . date('Y-m-d H:i:s') . "userIntegrationId : " . $userIntegrationId . " | paymentResponseBP : " . json_encode($paymentResponseBP, true));

                                    if (isset($paymentResponseBP['response'])) {

                                        $linked_id = $this->mobj->makeInsertGetId('platform_order_transactions', [
                                            'platform_id' => $this->platformId,
                                            'user_integration_id' => $userIntegrationId,
                                            'api_transaction_index_id' => $paymentResponseBP['response'],
                                            'sync_status' => 'Synced',
                                            'linked_id' => $id,
                                        ]);

                                        $this->mobj->makeUpdate('platform_order_transactions', ['linked_id' => $linked_id, 'sync_status' => 'Synced'], ['id' => $id]);

                                        $this->mobj->makeUpdate('platform_order', ['transaction_sync_status' => 'Synced'], ['id' => $payment->platform_order_id]);

                                        $this->log->syncLog($userId, $userIntegrationId, $UserWorkFlow, $SourcePlatformId, $this->platformId, $object_id, 'success', $id, null);
                                    } else {
                                        $error = $this->bp->handleResponseError($paymentResponseBP);
                                        $this->mobj->makeUpdate('platform_order_transactions', ['sync_status' => 'Failed'], ['id' => $id]);

                                        $this->mobj->makeUpdate('platform_order', ['transaction_sync_status' => 'Failed'], ['id' => $payment->platform_order_id]);

                                        $this->log->syncLog($userId, $userIntegrationId, $UserWorkFlow, $SourcePlatformId, $this->platformId, $object_id, 'failed', $id, $error);
                                    }
                                } else {

                                    if ($error == '') {
                                        $error = "payment details are missing";
                                    }
                                    $this->mobj->makeUpdate('platform_order_transactions', ['sync_status' => 'Failed'], ['id' => $id]);

                                    $this->mobj->makeUpdate('platform_order', ['transaction_sync_status' => 'Failed'], ['id' => $payment->platform_order_id]);

                                    $this->log->syncLog($userId, $userIntegrationId, $UserWorkFlow, $SourcePlatformId, $this->platformId, $object_id, 'failed', $id, $error);
                                }
                            } else {
                                $error = "supplier not found";
                                $this->mobj->makeUpdate('platform_order_transactions', ['sync_status' => 'Failed'], ['id' => $id]);

                                $this->mobj->makeUpdate('platform_order', ['transaction_sync_status' => 'Failed'], ['id' => $payment->platform_order_id]);

                                $this->log->syncLog($userId, $userIntegrationId, $UserWorkFlow, $SourcePlatformId, $this->platformId, $object_id, 'failed', $id, $error);
                            }
                        }
                        $return_response = true;
                    }
                }
            }
        } catch (\Exception $e) {
            Log::error($userIntegrationId . "--CreatePurchaseOrderInvoicePayment-->" . $e->getMessage());
            $return_response = $e->getMessage();
        }
        return $return_response;
    }

    public function GetNominalCodeByApiCode($api_code, $userIntegrationId, $WorkFlowID, $platformId)
    {
        $nominal_code = '';
        $source_row_data = DB::table('platform_object_data')->whereIn('user_integration_id', [$userIntegrationId, 0])->where(['api_code' => $api_code, 'platform_id' => $platformId])->select('id')->first();
        if ($source_row_data) { // if $Source_row_data is set
            $return = $this->map->getMappedDataByName($userIntegrationId, $WorkFlowID, "nominal_code", [], "regular", null, "single", "source", [], $source_row_data->id);
            if ($return) {
                $nominal_code = $return;
            }
        }
        return $nominal_code;
    }

    public function UpdateCustomField($ufound, $WorkFlowID, $user_integration_id, $platform_object_id, $OrderID, $api_order_id)
    {
        $response = false;
        // for cross  custom field  mapping (if custom filed map with text filed )
        $objectId = $this->helper->getObjectId('custom_field'); // find object id (cross  custom field  to data mapping )
        $platform_data_mapping_arr = $this->mobj->getResultByConditions('platform_data_mapping', ['user_integration_id' => $user_integration_id, 'platform_object_id' => $objectId], ['id', 'source_row_id', 'destination_row_id', 'custom_data']); // find  integration map data
        $custom_field_arr = array(); // create empty array .
        foreach ($platform_data_mapping_arr as $platform_data_mapping) { // loop for mapping
            $maping_data = $this->mobj->getFirstResultByConditions('platform_fields', ['id' => $platform_data_mapping->destination_row_id], ['custom_field_type', 'name'], [], ['user_integration_id' => [0, $user_integration_id]]); //get filed Details with id and user_integration_id with 0,
            if ($maping_data) {
                if ($platform_data_mapping) {
                    $filedvalues = $platform_data_mapping->custom_data;
                    if ($maping_data->custom_field_type == 'DATE') { // if custom filed type is date that time we need to format date.
                        $filedvalues = date(DATE_ISO8601, strtotime($platform_data_mapping->custom_data));
                    }
                    $custom_field_data = [
                        "op" => "add",
                        "path" => "/" . $maping_data->name,
                        "value" => $filedvalues,
                    ];
                    array_push($custom_field_arr, $custom_field_data); // push data in post array.
                }
            }
        }
        // for regular  custom field  mapping ..(if custom filed map with custom field  )
        $platform_data_mapping_arr = $this->mobj->getResultByConditions('platform_data_mapping', ['user_integration_id' => $user_integration_id, 'platform_object_id' => $platform_object_id], ['id', 'source_row_id', 'destination_row_id']);
        foreach ($platform_data_mapping_arr as $platform_data_mapping) {
            $maping_data = $this->map->getMappedField($user_integration_id, $WorkFlowID, $platform_object_id, $select = ['destination_field_name', 'destination_custom_field_type'], $platform_data_mapping->source_row_id); // get Mapped Field using function.
            if ($maping_data) {
                $filed_values = $this->mobj->getFirstResultByConditions('platform_custom_field_values', ['user_integration_id' => $user_integration_id, 'platform_field_id' => $platform_data_mapping->source_row_id, 'record_id' => $OrderID, 'status' => 1], ['id', 'field_value']);
                if ($filed_values) {
                    $filedvalues = $filed_values->field_value;
                    if ($maping_data['destination_custom_field_type'] == 'DATE') {
                        $filedvalues = date(DATE_ISO8601, strtotime($filed_values->field_value));
                    }
                    $custom_field_data = [
                        "op" => "add",
                        "path" => "/" . $maping_data['destination_field_name'],
                        "value" => $filedvalues,
                    ];
                    array_push($custom_field_arr, $custom_field_data);
                }
            }
        }
        if (count($custom_field_arr)) {
            $response = $this->bp->UpdateCustomField($ufound, $api_order_id, $custom_field_arr);
            $result = json_decode($response->getBody(), true);
            $error = $this->bp->handleResponseError($result);
            if ($error) {
                $response = isset($error) ? $error : "API Error";
            } else {
                $response = $result;
            }
        }

        return $response;
    }

    /* Get Supplier list for product filter*/
    public function GetSuppliers($userId = null, $userIntegrationId = null, $attempt)
    {
        $return_response = false;
        try {

            $ufound = $this->mobj->getPlatformAccountByUserIntegration($userIntegrationId, $this->platformId, ['access_token', 'platform_id', 'id', 'user_id', 'api_domain', 'account_name', 'app_id', 'app_secret']);
            if ($ufound && $this->platformId) {
                if (isset($ufound->platform_id) && $ufound->platform_id == $this->platformId) {
                    //For only BP integration

                    if ($attempt == 1) { // To pull new and updated warehouse from BP

                        $response = $this->bp->GetSupplier($ufound, true);
                        if ($suppliers = json_decode($response->getBody(), true)) {

                            if (!empty($suppliers) && isset($suppliers['response']) && is_array($suppliers['response'])) {
                                $supplierList = [];

                                $objectId = $this->helper->getObjectId("supplier");

                                if (isset($objectId)) {
                                    // update users integration warehouse status to 0.
                                    $this->mobj->makeUpdate('platform_object_data', ['status' => 0], ['user_integration_id' => $userIntegrationId, 'platform_id' => $ufound->platform_id, 'platform_object_id' => $objectId]);

                                    foreach ($suppliers['response']['results'] as $key => $value) {

                                        $supplierList = ['user_id' => $userId, 'platform_id' => $ufound->platform_id, 'user_integration_id' => $userIntegrationId, 'api_id' => $value[0], 'name' => $value[1], 'status' => 1, 'platform_object_id' => $objectId];

                                        $findPayment = $this->mobj->getFirstResultByConditions('platform_object_data', [
                                            //'user_id' => $userId,
                                            'user_integration_id' => $userIntegrationId,
                                            'platform_id' => $ufound->platform_id,
                                            'platform_object_id' => $objectId,
                                            'api_id' => $value[0],
                                        ], ['id']);

                                        if ($findPayment) {
                                            $this->mobj->makeUpdate(
                                                'platform_object_data',
                                                $supplierList,
                                                ['id' => $findPayment->id]
                                            );
                                        } else {
                                            $this->mobj->makeInsert('platform_object_data', $supplierList);
                                        }
                                    }
                                    $return_response = true;
                                }
                            } else {

                                $error = $this->bp->handleResponseError($suppliers);
                                $return_response = isset($error) ? $error : "API Error";
                            }
                        } else {
                            $return_response = "API Error";
                        }
                    }
                }
            }
        } catch (\Exception $e) {
            Log::error($e->getMessage());
            $return_response = $e->getMessage();
        }
        return $return_response;
    }

    /*  Get GoodsoutNote by Order | Goodsout Note Event update | Update tracking number in bp custom field  added by gajendra */
    public function findGoodsoutAndUpdatePrintPackTracking($userId, $userIntegrationId, $PlatformWorkFlowRuleID, $UserWorkFlowRuleID, $SourcePlatformName, $sync_status = "Ready", $RecordID = null)
    {

        $return_response = false;
        try {


            $goodsout_status_update = true;

            $limit = 25;
            $object_id = $this->helper->getObjectId('sales_order');
            $ufound = $this->mobj->getPlatformAccountByUserIntegration($userIntegrationId, $this->platformId, ['access_token', 'platform_id', 'id', 'user_id', 'api_domain', 'account_name', 'app_id', 'app_secret']);

            $SourcePlatformId = $this->helper->getPlatformIdByName($SourcePlatformName);

            $SOurceUfound = $this->mobj->getPlatformAccountByUserIntegration($userIntegrationId, $SourcePlatformId, ['access_token', 'platform_id', 'id', 'user_id', 'api_domain', 'account_name', 'app_id', 'app_secret', 'secret_key', 'marketplace_id']);

            if ($ufound && $this->platformId && $SourcePlatformId && $SOurceUfound) {

                if (isset($ufound->platform_id) && $ufound->platform_id == $this->platformId) {

                    $query = PlatformOrder::with(['getShipmentReadyAndFailed'])->select('id', 'user_id', 'platform_id', 'user_integration_id', 'user_workflow_rule_id',  'platform_customer_id', 'order_type', 'api_order_id', 'order_number', 'sync_status',  'is_voided',  'is_deleted', 'linked_id',  'order_updated_at', 'updated_at', 'warehouse_id', 'attempt');

                    if ($RecordID && $RecordID !== 0) {
                        $query->where('id', $RecordID);
                    } else {
                        $query->where([
                            [
                                'platform_id', '=', $SourcePlatformId
                            ], [
                                'user_integration_id', '=', $userIntegrationId
                            ], [
                                'shipment_status', '=', $sync_status
                            ]
                        ]);
                    }

                    $list = $query->orderBy('updated_at', 'ASC')->take($limit)->get();

                    //If No goodsout Note update found with Ready Status then fetch Fetch data with shipment_status =Failed
                    if (count($list) < 1) {

                        $query->where([
                            [
                                'platform_id', '=', $SourcePlatformId
                            ], [
                                'user_integration_id', '=', $userIntegrationId
                            ], [
                                'shipment_status', '=', 'Failed'
                            ], [
                                'attempt', '<=', 5
                            ],
                        ]);

                        $list = $query->orderBy('updated_at', 'ASC')->take($limit)->get();
                    }



                    if (!empty($list) && count($list) > 0) {

                        foreach ($list as $key => $sourceOrder) {

                            //find bp linked order
                            $find_dest_order = PlatformOrder::where('id', $sourceOrder->linked_id)->where('user_integration_id', $userIntegrationId)
                                ->select('id', 'api_order_id')->first();


                            if ($sourceOrder->linked_id  && $find_dest_order) {

                                //bp order api id
                                $api_order_id = $find_dest_order->api_order_id;

                                //order primary id from source platform order
                                $orderId = $sourceOrder->id;

                                //get data from shipment table
                                $tracking_number = $sourceOrder->getShipmentReadyAndFailed->tracking_info;
                                $tracking_url = $sourceOrder->getShipmentReadyAndFailed->tracking_url;

                                //update Bp custom Field with tracking Number ...need to give mapping for custom field | update custom field new function
                                if ($SourcePlatformName == 'amazonvendor' && $tracking_url) {
                                    $customFieldMappingObj = $this->helper->getObjectId('sales_order');
                                    $this->updateSingleCustomFieldByFieldName($ufound, $userIntegrationId, $customFieldMappingObj, $api_order_id, $tracking_url, 'TRACKING_URL');
                                }

                                $url = "/warehouse-service/order/$api_order_id/goods-note/goods-out/";
                                $response = $this->bp->GetGoodsOutNotes($ufound, $url, NULL);

                                $response_data = json_decode($response->getBody(), true);

                                //debug goodsout Note
                                // dd($response_data,$api_order_id);

                                //Update Goodsout Note Status picked & packed
                                if (isset($response_data) && isset($response_data['response'])) {

                                    if (empty($response_data['response'])) {

                                        //Goods out Note not found order not fullfilled
                                        $this->mobj->makeUpdate('platform_order_shipments', ['sync_status' => 'Failed'], ['id' => $sourceOrder->getShipmentReadyAndFailed->id]);

                                        //update order
                                        $sourceOrder->shipment_status = "Failed";
                                        $sourceOrder->save();

                                        $error_msg = 'Goodsout Note not found | Order Not fullfilled';
                                        $this->log->syncLog($userId, $userIntegrationId, $UserWorkFlowRuleID, $SourcePlatformId, $this->platformId, $object_id, 'failed', $orderId, $error_msg);
                                    } else {

                                        //loop goods Note Ids
                                        foreach ($response_data['response'] as $goodsNoteId => $goodsOutResponse) {

                                            $response = $this->bp->PostGoodsOutNoteEvent($ufound, null, [
                                                "events" => [
                                                    [
                                                        "eventCode" => "PIC",
                                                        "occured" => date(DATE_ISO8601),
                                                        "eventOwnerId" => rand(2, 2),
                                                    ],
                                                    [
                                                        "eventCode" => "PAC",
                                                        "occured" => date(DATE_ISO8601),
                                                        "eventOwnerId" => rand(2, 2),
                                                    ]
                                                ],
                                                //here need to pass gon by api
                                            ], $goodsNoteId);

                                            $eventResponse = json_decode($response->getBody(), true);


                                            //update custom field
                                            if (isset($eventResponse) && empty($eventResponse)) {


                                                //update Bp custom Field with tracking Number ...need to give mapping for custom field | update custom field new function
                                                if ($SourcePlatformName == 'amazonvendor' && $tracking_url) {

                                                    // $customFieldMappingObj = $this->helper->getObjectId('sales_order');
                                                    // $this->updateSingleCustomFieldByFieldName($ufound, $userIntegrationId, $customFieldMappingObj, $api_order_id,$tracking_url,'TRACKING_URL');

                                                    //start send email notification for shipment label url updat in custom field
                                                    $body = 'Hello, <br/>You have received acknowledgement for order number ' . $api_order_id . ' <br/>Please check the below details -<br/>Order status changed in Brightpearl <br/>Goods out Picked Packed <br/><br/>Thank you';
                                                    $subject = 'Goods Note Updated';

                                                    app('App\Http\Controllers\CommonController')->sendEmailNotification($sourceOrder->user_id, $subject, $body);
                                                    //end notification email

                                                }


                                                //update shipment
                                                $this->mobj->makeUpdate('platform_order_shipments', ['sync_status' => 'Synced'], ['id' => $sourceOrder->getShipmentReadyAndFailed->id]);

                                                //update order.
                                                $sourceOrder->shipment_status = "Synced";
                                                $sourceOrder->save();

                                                //change for sync log
                                                $this->log->syncLog($userId, $userIntegrationId, $UserWorkFlowRuleID, $SourcePlatformId, $this->platformId, $object_id, 'success', $orderId, '');
                                            } else if (isset($eventResponse['errors'])) {

                                                //if goodsout note already picked packed got error code WHSB-061
                                                $errorMsgCode = @$eventResponse['errors'][0]['code'];
                                                if ($errorMsgCode == 'WHSB-061') {

                                                    //update shipment
                                                    $this->mobj->makeUpdate('platform_order_shipments', ['sync_status' => 'Synced'], ['id' => $sourceOrder->getShipmentReadyAndFailed->id]);

                                                    //update order.
                                                    $sourceOrder->shipment_status = "Synced";
                                                    $sourceOrder->save();


                                                    $this->log->syncLog($userId, $userIntegrationId, $UserWorkFlowRuleID, $SourcePlatformId, $this->platformId, $object_id, 'success', $orderId, '');
                                                } else {

                                                    //update shipment
                                                    $this->mobj->makeUpdate('platform_order_shipments', ['sync_status' => 'Failed'], ['id' => $sourceOrder->getShipmentReadyAndFailed->id]);

                                                    //update order
                                                    $sourceOrder->shipment_status = "Failed";
                                                    $sourceOrder->save();

                                                    $error = $this->bp->handleResponseError($eventResponse);

                                                    /* Customize BP Errors */
                                                    $GON = $api_order_id . "/" . $sourceOrder->getShipmentReadyAndFailed->shipment_sequence_number;
                                                    $response = app('App\Http\Controllers\Brightpearl\BrightpearlUtility')->MakeCustomError($error, $GON);
                                                    if ($response['status'] == 1) {
                                                        $error = $response['status_text'];
                                                    }

                                                    $this->log->syncLog($userId, $userIntegrationId, $UserWorkFlowRuleID, $SourcePlatformId, $this->platformId, $object_id, 'failed', $orderId, $error);
                                                }
                                            }
                                        }
                                    }
                                } else if (isset($response_data['errors']) || isset($response_data['response'])) {

                                    //update shipment
                                    $this->mobj->makeUpdate('platform_order_shipments', ['sync_status' => 'Failed'], ['id' => $sourceOrder->getShipmentReadyAndFailed->id]);

                                    //update order
                                    $sourceOrder->shipment_status = "Failed";
                                    $sourceOrder->save();

                                    $error = $this->bp->handleResponseError($response_data);
                                    /* Customize BP Errors */
                                    $GON = $api_order_id . "/" . $sourceOrder->getShipmentReadyAndFailed->shipment_sequence_number;
                                    $response = app('App\Http\Controllers\Brightpearl\BrightpearlUtility')->MakeCustomError($error, $GON);
                                    if ($response['status'] == 1) {
                                        $error = $response['status_text'];
                                    }
                                    /* ------------------- */

                                    $this->log->syncLog($userId, $userIntegrationId, $UserWorkFlowRuleID, $SourcePlatformId, $this->platformId, $object_id, 'failed', $orderId, $error);



                                    //update source order for attemp  $sourceOrder->id
                                    PlatformOrder::where('id', $sourceOrder->id)->update(['attempt' => $sourceOrder->attempt + 1]);
                                }
                            }
                        }

                        $return_response = true;
                    }
                }
            }
        } catch (\Exception $e) {

            $return_response = $e->getMessage();
        }
        return $return_response;
    }

    public function updateSingleCustomFieldByFieldName($ufound, $userIntegrationId, $fieldMappingObj, $api_order_id, $filedvalues, $sourceFieldName)
    {
        $response = false;

        //get mapping data & mapped source & destination field name
        $platform_data_mapping = DB::table('platform_data_mapping as pdm')
            ->join('platform_fields as pf', 'pdm.source_row_id', 'pf.id')
            ->join('platform_fields as dest_pf', 'pdm.destination_row_id', 'dest_pf.id')
            ->where(['pdm.user_integration_id' => $userIntegrationId, 'pdm.platform_object_id' => $fieldMappingObj, 'pf.name' => $sourceFieldName, 'pdm.status' => 1])
            ->select('pdm.source_row_id', 'pdm.destination_row_id', 'pdm.custom_data', 'pf.name as sourceFieldName', 'dest_pf.name as destFieldName')
            ->first();

        if ($platform_data_mapping) {

            if ($platform_data_mapping->sourceFieldName && $platform_data_mapping->destFieldName && $platform_data_mapping->sourceFieldName == $sourceFieldName) {

                $custom_field_arr = array(); // create empty array .
                $custom_field_data = [
                    "op" => "add",
                    "path" => "/" . $platform_data_mapping->destFieldName,
                    "value" => $filedvalues,
                ];
                array_push($custom_field_arr, $custom_field_data); // push data in post array.

                if (count($custom_field_arr)) {
                    $response = $this->bp->UpdateCustomField($ufound, $api_order_id, $custom_field_arr);
                    $result = json_decode($response->getBody(), true);
                    $error = $this->bp->handleResponseError($result);
                    if ($error) {
                        $response = isset($error) ? $error : "API Error";
                        Log::error($userIntegrationId . " -> BrightPearlApiController -> updateSingleCustomFieldByFieldName -> " . $response);
                    } else {
                        $response = true;
                    }
                }
            }
        }
        return $response;
    }





    /* Update Brightpearl Inventory in Bulk using MultiMsg*/
    public function SyncInventoryBulk($user_id = '', $user_integration_id = '', $source_platform_name = '', $platform_workflow_rule_id = '', $user_workflow_rule_id = '', $sync_status = "Ready", $record_id = '')
    {
        try {

            $logFileName = 'bulk_inventory_sync_test_log_'.$user_integration_id.'_'.date('Y-m-d').'.txt';
            $returnresponse = true;

            // Section to allow inventory sync daily at once. After the specified time frame sync is not allowed.
            if (!$record_id && isset(Config::get('apisettings.AllowDailySyncOnceInBP')[$source_platform_name])) {
                $platformAllowDailySyncOnce = Config::get('apisettings.AllowDailySyncOnceInBP')[$source_platform_name];
                if ($platformAllowDailySyncOnce['timezone']) {
                    date_default_timezone_set($platformAllowDailySyncOnce['timezone']);
                }

                // Some predefined values
                $startTime = $platformAllowDailySyncOnce['start_time']; // From this time sync has to start
                $endTime = $platformAllowDailySyncOnce['end_time'];  // After this time sync has to stop

                // Get the current date and time
                $currentDateTime = new \DateTime();
                $currentDate = $currentDateTime->format('Y-m-d');

                $allowHours = range($startTime, $endTime);
                $allowSync = false;
                if( in_array(date('H'), $allowHours) ){
                    $syncDateInfo = PlatformUrl::where([ 'user_integration_id'=>$user_integration_id, 'platform_id'=>$this->platformId, 'url_name'=>'daily_inv_sync' ])
                    ->select('id', 'url', 'status')->first();
                    if( $syncDateInfo ){
                        $lastSyncedDate = date('Y-m-d', strtotime($syncDateInfo->url));
                        /** If last synced and current date is the same and sync status is zero then we consider today's sync has been completed.
                         *  So we can skip the flow. Here status 1 indicates sync process is in progress. */
                        if ($currentDate == $lastSyncedDate && $syncDateInfo->status === 0 ) {
                            return true;
                        }

                        // If current date is greater than lastSyncdDate then we allow to sync
                        if ($currentDate != $lastSyncedDate || $syncDateInfo->status === 1) {
                            $allowSync = true;

                            if ($currentDate != $lastSyncedDate || $syncDateInfo->status === 0) {
                                $syncDateInfo->status = 1;
                                $syncDateInfo->url = $currentDateTime;
                                $syncDateInfo->save();
                            }
                        }
                    } else{
                        // Check if the current time is between start time and end time
                        $allowSync = true;

                        $syncDateInfo = new PlatformUrl();
                        $syncDateInfo->user_id = $user_id;
                        $syncDateInfo->user_integration_id = $user_integration_id;
                        $syncDateInfo->platform_id = $this->platformId;
                        $syncDateInfo->url_name = 'daily_inv_sync';
                        $syncDateInfo->status = 1;
                        $syncDateInfo->url = $currentDateTime;
                        $syncDateInfo->save();
                    }
                }

                // Check if sync is allowed or not, if not then exit from the process
                if( !$allowSync ){
                    return true;
                }
            }

            $defInventPriceListMap = false;
            $sel_def_inv_priclist_objId = null;
            /* ---Get Default inventory PriceList Mapping--- */
            $defInvPriceListObj = $this->helper->getObjectId('inventory_pricelist');
            $sel_def_inv_priclist_objId = $this->map->getMappedApiIdByObjectId($user_integration_id, $defInvPriceListObj, 'default', 'id');

            if ($sel_def_inv_priclist_objId) {
                $defInventPriceListMap = true;
            }

            $return = true;
            $defaultLOB = 0; // Define default Line Of Business (LOB)
            $Inventory_arr = [];

            $source_platform_id = $this->helper->getPlatformIdByName($source_platform_name);
            if (isset(Config::get('apisettings.FindLOBToSyncInventoryInBP')[$source_platform_name])) {
                //find default Line Of Business (LOB) from infoplus to sync speacific Line Of Business (LOB) Product's Inventory to Brightpearl
                $defaultLOB = $this->integrationCommonHelper->findDefaultLineOfBusiness($user_integration_id);
            }

            $inventory_object_id = $this->helper->getObjectId('inventory');
            /* Destination Platform Account Credentials */
            $ufound = $this->mobj->getPlatformAccountByUserIntegration($user_integration_id, $this->platformId, ['access_token', 'platform_id', 'id', 'user_id', 'api_domain', 'account_name', 'app_id', 'app_secret']);
            /* ----------------------------------------- */

            if ($ufound) {
                /* Find BP account additinal information for currency */
                $accountInformation = $this->mobj->getFirstResultByConditions('platform_account_addtional_information', ['account_id' => $ufound->id, 'user_integration_id' => $user_integration_id], ['account_currency_code'], ['id' => 'asc']);
                $account_currency_code = isset($accountInformation->account_currency_code) ? $accountInformation->account_currency_code : "";
                /* ------------------------------------------------------ */

                $WarehouseAndLocInfo = $WarehouseMapping = [];
                $inventory_warehouse_object_id = $this->helper->getObjectId('inventory_warehouse');
                $MappedWarehouseArray = $this->map->getManyToOneWarehouseMapping($inventory_warehouse_object_id, $user_integration_id);
                if (is_array($MappedWarehouseArray) && isset($MappedWarehouseArray['mapped_warehouse']) && count($MappedWarehouseArray['mapped_warehouse'])) {
                    $WarehouseMapping = $MappedWarehouseArray['mapped_warehouse'];
                } else {
                    $DefaultWarehouseId = $this->map->getMappedDataByName($user_integration_id, NULL, "inventory_warehouse", ['api_id']);
                    if ($DefaultWarehouseId) {
                        $WarehouseMapping[$DefaultWarehouseId->api_id] = 'all';
                    }
                }
                /*----stop to find inventory warehouse-------*/

                /* -------------------------------------- */
                /* Identify Product Uniqueness $platform_workflow_rule_id */
                $identity = app('App\Http\Controllers\Brightpearl\BrightpearlUtility')->ProductIdentityMapping($user_integration_id, NULL);
                $source_identity = $identity['source_identity']; //Source Identity
                $destination_identity = $identity['destination_identity']; //Destination Identity

                /* Source & Destination Identity not null or empty */
                if ($destination_identity && $source_identity) {

                    //Start get records for sync
                    $process_limit = 100;
                    if (isset(\Config::get('apifetchlimit.SyncBulkInventoryInBP')[$source_platform_name])) {
                        $process_limit = \Config::get('apifetchlimit.SyncBulkInventoryInBP')[$source_platform_name];
                    }

                    if ($record_id) { //If single record found
                        $Inventory_arr = DB::table('platform_product as source_platform_product')
                            ->join('platform_product as destination_platform_product', 'destination_platform_product.' . $destination_identity, '=', 'source_platform_product.' . $source_identity)
                            ->select('source_platform_product.id', 'destination_platform_product.sku', 'destination_platform_product.api_product_id', 'destination_platform_product.id as destination_platform_product_id')
                            ->where(['source_platform_product.user_integration_id' => $user_integration_id, 'destination_platform_product.user_integration_id' => $user_integration_id])
                            ->where(['source_platform_product.platform_id' => $source_platform_id, 'destination_platform_product.platform_id' => $this->platformId])
                            ->where('source_platform_product.id', $record_id)
                            ->where('source_platform_product.is_deleted', 0)
                            ->where('destination_platform_product.is_deleted', 0)
                            ->limit($process_limit)
                            ->distinct()
                            ->get();
                    } else {
                        $query = DB::table('platform_product as source_platform_product')
                            ->join('platform_product as destination_platform_product', 'destination_platform_product.' . $destination_identity, '=', 'source_platform_product.' . $source_identity);
                        if ($defaultLOB) {
                            $query->join('platform_product_detail_attributes as at', 'at.platform_product_id', '=', 'source_platform_product.id')->where('at.lob', $defaultLOB);
                        }

                        $Inventory_arr = $query->where(['source_platform_product.inventory_sync_status' => $sync_status, 'source_platform_product.user_integration_id' => $user_integration_id, 'destination_platform_product.user_integration_id' => $user_integration_id])
                            ->where(['source_platform_product.platform_id' => $source_platform_id, 'destination_platform_product.platform_id' => $this->platformId])->select('source_platform_product.id', 'destination_platform_product.sku', 'destination_platform_product.api_product_id', 'destination_platform_product.id as destination_platform_product_id')
                            ->where('source_platform_product.is_deleted', 0)
                            ->where('destination_platform_product.is_deleted', 0)
                            ->orderBy('source_platform_product.updated_at', 'asc')
                            ->limit($process_limit)
                            ->distinct()
                            ->get();

                        if (!count($Inventory_arr)) { //if Ready not exist then pick Failed inventory.
                            $query = DB::table('platform_product as source_platform_product')
                                ->join('platform_product as destination_platform_product', 'destination_platform_product.' . $destination_identity, '=', 'source_platform_product.' . $source_identity);
                            if ($defaultLOB) {
                                $query->join('platform_product_detail_attributes as at', 'at.platform_product_id', '=', 'source_platform_product.id')->where('at.lob', $defaultLOB);
                            }
                            $Inventory_arr = $query->select('source_platform_product.id', 'destination_platform_product.sku', 'destination_platform_product.api_product_id', 'destination_platform_product.id as destination_platform_product_id')
                                ->where(['source_platform_product.inventory_sync_status' => 'Failed', 'source_platform_product.user_integration_id' => $user_integration_id, 'destination_platform_product.user_integration_id' => $user_integration_id])
                                ->where(['source_platform_product.platform_id' => $source_platform_id, 'destination_platform_product.platform_id' => $this->platformId])
                                ->where('source_platform_product.is_deleted', 0)
                                ->where('destination_platform_product.is_deleted', 0)
                                ->orderBy('source_platform_product.updated_at', 'asc')
                                ->limit($process_limit)
                                ->distinct()
                                ->get();
                        }
                    }

                    //end get records for sync
                    if ($Inventory_arr && count($Inventory_arr) > 0) {

                        //Log total data get for process...
                        \Storage::disk('local')->append($logFileName, 'start----------------000------Total snapshot data get for sync : ' . count($Inventory_arr) . ' call time : '
                        . date('Y-m-d H:i:s') . ' user_integration_id : ' . $user_integration_id . '------00000000----' . PHP_EOL);

                        $Inventory_arr = json_decode($Inventory_arr, true);

                        //loop inventory array & update status processing $Inventory['id']
                        $processing_inventories = [];
                        foreach($Inventory_arr as $inv_row) {
                            array_push($processing_inventories, $inv_row['id']);
                        }
                        if(count($processing_inventories) > 0){
                            PlatformProduct::whereIn('id',$processing_inventories)->update(['inventory_sync_status'=>'Processing']);
                        }
                        //end

                        //Break 400 product in 200 Chunk for get inventory from bp
                        $chunk_limit_for_break_bulkdata = 200;
                        $Inventory_arr_chunk_data = array_chunk($Inventory_arr, $chunk_limit_for_break_bulkdata);

                        //Invenory get chunk log
                        \Storage::disk('local')->append($logFileName, '1st break for sync call time : ' . date('Y-m-d H:i:s') . ' user_integration_id : ' . $user_integration_id . ' total chunk devided (' . $chunk_limit_for_break_bulkdata . ') : ' . count($Inventory_arr_chunk_data) . PHP_EOL);

                        //start process 200 chunk data
                        foreach ($Inventory_arr_chunk_data as $Inventory_arr_chunk_two_hundred) {

                            //log 200 chunk process start time
                            $time = time();

                            //Loop 200 product for get brightpearl inventory
                            $list_products_for_get_inv = [];

                            //list product ids for update once
                            $list_products_pids_for_get_inv = [];

                            //define array for get price list data once for all
                            $list_dest_products_pids_for_get_pricelist = [];

                            foreach ($Inventory_arr_chunk_two_hundred as $Inventory) {

                                array_push($list_products_for_get_inv, $Inventory['api_product_id']);
                                array_push($list_products_pids_for_get_inv, $Inventory['id']);
                                //push for get price list in bulk
                                array_push($list_dest_products_pids_for_get_pricelist, $Inventory['destination_platform_product_id']);
                            }
                            $BpGetInventory = [];
                            if ($list_products_for_get_inv && $list_products_pids_for_get_inv) {
                                $list_products_for_get_inv = array_unique($list_products_for_get_inv);
                                sort($list_products_for_get_inv);

                                $getinventoryurl = implode(",", $list_products_for_get_inv) . '?includeOptional=breakDownByLocation';
                                $response = $this->bp->GetInventory($ufound, $getinventoryurl, 0);

                                // \Log::info('bulk_inventory_sync  response : ' . $response->getBody());

                                $BpGetInventory = json_decode($response->getBody(), true);

                                if (isset($BpGetInventory['errors'][0]['message'])) {

                                    $return = $BpGetInventory['errors'][0]['message'];
                                    if (in_array($source_platform_name, Config::get('apisettings.UpdateInventoryStatusIgnored')) && ($BpGetInventory['errors'][0]['message'] == 'This is a non stock tracked product.' || $BpGetInventory['errors'][0]['message'] == 'These are non stock tracked products.') ) {

                                        $return = true;
                                        PlatformProduct::whereIn('id', $list_products_pids_for_get_inv)->update(['inventory_sync_status' => 'Ignore']);

                                        foreach ($list_products_pids_for_get_inv as $Inventory_pid) {
                                            $this->log->syncLog($user_id, $user_integration_id, $user_workflow_rule_id, $source_platform_id, $this->platformId, $inventory_object_id, 'failed', $Inventory_pid, $BpGetInventory['errors'][0]['message']);
                                        }
                                    } else {

                                        PlatformProduct::whereIn('id', $list_products_pids_for_get_inv)->update(['inventory_sync_status' => 'Failed']);

                                        foreach ($list_products_pids_for_get_inv as $Inventory_pid) {
                                            $this->log->syncLog($user_id, $user_integration_id, $user_workflow_rule_id, $source_platform_id, $this->platformId, $inventory_object_id, 'failed', $Inventory_pid, $BpGetInventory['errors'][0]['message']);
                                        }
                                    }
                                } else if (is_array($BpGetInventory) && count($BpGetInventory) === 0) {
                                    // Item is non-tracked (Manage inventory levels is turned off in Brightpeal)
                                    PlatformProduct::whereIn('id', $list_products_pids_for_get_inv)->update(['inventory_sync_status' => 'Failed']);

                                    foreach ($list_products_pids_for_get_inv as $Inventory_pid) {
                                        $this->log->syncLog($user_id, $user_integration_id, $user_workflow_rule_id, $source_platform_id, $this->platformId, $inventory_object_id, 'failed', $Inventory_pid, 'Non-tracked item');
                                    }
                                }
                            }
                            //end get inventory for 200 product


                            //get priceList for selected bp product ids | //NEW UPDATE ON 09-06-2023
                            $prodPriceListData = [];
                            if ($list_dest_products_pids_for_get_pricelist && $defInventPriceListMap && $sel_def_inv_priclist_objId) {
                                $list_price_list_data = DB::table('platform_porduct_price_list')->whereIn('platform_product_id', $list_dest_products_pids_for_get_pricelist)
                                    ->where('platform_object_data_id', $sel_def_inv_priclist_objId)->select('platform_product_id', 'price', 'api_currency_code')->get();
                                if ($list_price_list_data && count($list_price_list_data) > 0) {
                                    foreach ($list_price_list_data as $price_list_row) {
                                        $prodPriceListData[$price_list_row->platform_product_id]['price'] = $price_list_row->price;
                                        $prodPriceListData[$price_list_row->platform_product_id]['api_currency_code'] = $price_list_row->api_currency_code;
                                    }
                                }
                            }
                            //end


                            //Break 9 product in sub Chunk for multiMsg Api call... prepare multiMsg data & Api call
                            $chunk_data_for_api_call_limit = 9;
                            $Inventory_arr_chunk_data_for_correction = array_chunk($Inventory_arr_chunk_two_hundred, $chunk_data_for_api_call_limit);

                            //correction chunk log
                            \Storage::disk('local')->append($logFileName, '2nd Break Total sub chunk devided for api Print time : ' . $time . ' (' . $chunk_data_for_api_call_limit . ') time: ' . date('Y-m-d H:i:s') . ' total product : ' . count($Inventory_arr_chunk_data_for_correction) . ' user_integration_id : ' . $user_integration_id . PHP_EOL);


                            $final_updated_product_pids = [];
                            $final_updated_inventory_pids = [];
                            $multiMsg_postData = [];
                            $picked_api_product_ids = [];
                            //this variable will be used for update inventory sync status when single adjustment run not multiMsg
                            $InventoryWarehouseId_for_single_call = null;

                            //new array for avoid db call update in single call for each 200 chunk
                            $sync_product_ids_having_no_api_call = [];
                            $sync_inventory_ids_having_no_api_call = [];

                            //loop of 9 sub chunk
                            foreach ($Inventory_arr_chunk_data_for_correction as $Inventory_arr_for_correction) {

                                //Loop fetched product for correction data prepare... this is sub chunk product inventory arrray.
                                foreach ($Inventory_arr_for_correction as $Inventory) {

                                    //convert array to std object to avoid code changes
                                    $Inventory = (object)$Inventory;

                                    foreach ($WarehouseMapping as $InventoryWarehouseId => $invMappedWhIds) {

                                        //get not synced inventories of product
                                        $query_inv_row = PlatformProductInventory::where(['user_integration_id' => $user_integration_id, 'platform_product_id' => $Inventory->id])
                                            ->whereIn('sync_status', ['Ready', 'Failed']);
                                        if ($invMappedWhIds != 'all') {
                                            $query_inv_row->whereIn('api_warehouse_id', $invMappedWhIds);
                                        }
                                        $product_inventory_arr =  $query_inv_row->select(DB::Raw("GROUP_CONCAT(id) AS rowIds"), DB::raw("SUM(quantity) AS quantity"))
                                            ->groupBy('platform_product_id')->get();

                                        if (count($product_inventory_arr)) {

                                            if (!isset($WarehouseAndLocInfo[$InventoryWarehouseId])) {
                                                $defaultInvWhLoc = $this->GetWarehouseDefaultLocation($user_integration_id, $InventoryWarehouseId);
                                                if ($defaultInvWhLoc) {
                                                    $WarehouseAndLocInfo[$InventoryWarehouseId] = $defaultInvWhLoc;
                                                }
                                            }

                                            //if brightpearl Get Inventory api call done & have data in BpGetInventory
                                            if (isset($BpGetInventory['response']) && is_array($BpGetInventory['response'])) {

                                                //Loop sku level inventories of source product
                                                foreach ($product_inventory_arr as $product_inventory) {

                                                    $arrInvRowIdSet = explode(',', $product_inventory->rowIds); // extract platform product inventory id set

                                                    //NEW UPDATE ON 09-06-2023
                                                    $priceListValue = 0;
                                                    if (isset($prodPriceListData) && isset($prodPriceListData[$Inventory->destination_platform_product_id])) {
                                                        $priceListValue = $prodPriceListData[$Inventory->destination_platform_product_id]['price'];
                                                        $account_currency_code = $prodPriceListData[$Inventory->destination_platform_product_id]['api_currency_code'];
                                                    }

                                                    //Set default update qty
                                                    $update_quantity = 0;
                                                    if (isset($WarehouseAndLocInfo[$InventoryWarehouseId])) {

                                                        $defaultLocation = $WarehouseAndLocInfo[$InventoryWarehouseId]; // Warehouse default loation

                                                        $bp_inventory = $BpGetInventory['response'];

                                                        // if inventory get for selected product.. & also default inventory warehouse key exists
                                                        if (isset($bp_inventory) && isset($bp_inventory[$Inventory->api_product_id])) {

                                                            $Inv_arr = $bp_inventory[$Inventory->api_product_id];

                                                            $quantity = 0;
                                                            $reason = '';

                                                            if (count($Inv_arr['warehouses']) > 0 && isset($Inv_arr['warehouses'][$InventoryWarehouseId]) && isset($Inv_arr['warehouses'][$InventoryWarehouseId]['byLocation']) && isset($Inv_arr['warehouses'][$InventoryWarehouseId]['byLocation'][$defaultLocation])) {

                                                                //inventory for default warehouse & default location
                                                                $byLocation_data = $Inv_arr['warehouses'][$InventoryWarehouseId]['byLocation'][$defaultLocation];

                                                                //Use this conditionl is set in config
                                                                if (isset(\Config::get('apisettings.useInStockForInventoryCorrection')[$source_platform_name])) {
                                                                    $quantity = $byLocation_data['inStock'];
                                                                } else {
                                                                    $quantity = $byLocation_data['onHand'];
                                                                }


                                                                $finalQtyArray = $this->CalculatInventoryQty($quantity, $product_inventory->quantity);
                                                                if ($finalQtyArray) {
                                                                    $update_quantity = $finalQtyArray['update_qty'];
                                                                    $reason = $finalQtyArray['reason'];
                                                                } else {
                                                                    $update_quantity = 0;
                                                                    $reason = "";
                                                                }


                                                                if ($update_quantity != 0) {

                                                                    //check if api product id already exist in multimsg post data then ignore
                                                                    if (isset($picked_api_product_ids) && in_array($Inventory->api_product_id, $picked_api_product_ids)) {
                                                                        continue;
                                                                    }

                                                                    $InventoryWarehouseId_for_single_call = $InventoryWarehouseId;

                                                                    //add in final_updated_product_pids to update status after api call
                                                                    array_push($final_updated_product_pids, $Inventory->id);
                                                                    //push inventory tab pid
                                                                    //array_push($final_updated_inventory_pids, $product_inventory->id);
                                                                    $final_updated_inventory_pids = array_merge($final_updated_inventory_pids, $arrInvRowIdSet);

                                                                    $curl_post_data['corrections'] = [];

                                                                    $curl_post_data['corrections'][] = array("locationId" => $defaultLocation, "productId" => $Inventory->api_product_id, "reason" => $reason, "quantity" => $update_quantity, "cost" => ['currency' => $account_currency_code, 'value' => $priceListValue]);

                                                                    $post_url = "/warehouse-service/warehouse/{$InventoryWarehouseId}/stock-correction";
                                                                    $multiMsg_postData[] =
                                                                        [
                                                                            'label' => "Adjustment-" . $Inventory->id . "-" . $product_inventory->rowIds,
                                                                            'uri' => $post_url,
                                                                            'httpMethod' => 'POST',
                                                                            'body' => $curl_post_data
                                                                        ];

                                                                    //push bp api product ids to avoid duplicate
                                                                    array_push($picked_api_product_ids, $Inventory->api_product_id);

                                                                    //Log api post data update status
                                                                    \Storage::disk('local')->append($logFileName, 'Print Time :' . $time . ' MultiMsg post date updated on: ' . date('Y-m-d H:i:s') . ' platform_product Id : ' . $Inventory->id . PHP_EOL);
                                                                } else {

                                                                    //push in array instead db call
                                                                    array_push($sync_product_ids_having_no_api_call, $Inventory->id);
                                                                    $sync_inventory_ids_having_no_api_call = array_merge($sync_inventory_ids_having_no_api_call, $arrInvRowIdSet);
                                                                    //array_push($sync_inventory_ids_having_no_api_call,$product_inventory->id);

                                                                    // PlatformProductInventory::where('id', $product_inventory->id)->update(['sync_status' => 'Synced']);
                                                                    // $this->mobj->makeUpdate('platform_product', ['inventory_sync_status' => 'Synced'], ['id' => $Inventory->id]);

                                                                    // $this->log->syncLog($user_id, $user_integration_id, $user_workflow_rule_id, $source_platform_id, $this->platformId, $inventory_object_id, 'success', $Inventory->id, '');

                                                                    //No api call case
                                                                    \Storage::disk('local')->append($logFileName, 'Print Time :' . $time . ' Ignore No need to api call Inventory Stock is same time: ' . date('Y-m-d H:i:s') . ' platform_product Id : ' . $Inventory->id . ' BpQuantity :' . $quantity . ' Inventory Qty : ' . $product_inventory->quantity . ' update_quantity : ' . $update_quantity . PHP_EOL);
                                                                }
                                                            } else {

                                                                //when inventory is 0 brightpearl does not response warehouse...name in that case we condition inv as 0
                                                                $quantity = 0;

                                                                $finalQtyArray = $this->CalculatInventoryQty($quantity, $product_inventory->quantity);
                                                                if ($finalQtyArray) {
                                                                    $update_quantity = $finalQtyArray['update_qty'];
                                                                    $reason = $finalQtyArray['reason'];
                                                                } else {
                                                                    $update_quantity = 0;
                                                                    $reason = "";
                                                                }

                                                                if ($update_quantity != 0) {

                                                                    //check if api product id already exist in multimsg post data then ignore
                                                                    if (isset($picked_api_product_ids) && in_array($Inventory->api_product_id, $picked_api_product_ids)) {
                                                                        continue;
                                                                    }

                                                                    $InventoryWarehouseId_for_single_call = $InventoryWarehouseId;

                                                                    //add in final_updated_product_pids to update status after api call
                                                                    array_push($final_updated_product_pids, $Inventory->id);

                                                                    //push inventory tab pid
                                                                    // array_push($final_updated_inventory_pids, $product_inventory->id);
                                                                    $final_updated_inventory_pids = array_merge($final_updated_inventory_pids, $arrInvRowIdSet);

                                                                    $curl_post_data['corrections'] = [];

                                                                    $curl_post_data['corrections'][] = array("locationId" => $defaultLocation, "productId" => $Inventory->api_product_id, "reason" => $reason, "quantity" => $update_quantity, "cost" => ['currency' => $account_currency_code, 'value' => $priceListValue]);

                                                                    $post_url = "/warehouse-service/warehouse/{$InventoryWarehouseId}/stock-correction";
                                                                    $multiMsg_postData[] =
                                                                        [
                                                                            'label' => "Adjustment-" . $Inventory->id . "-" . $product_inventory->rowIds,
                                                                            'uri' => $post_url,
                                                                            'httpMethod' => 'POST',
                                                                            'body' => $curl_post_data
                                                                        ];

                                                                    //push bp api product ids to avoid duplicate
                                                                    array_push($picked_api_product_ids, $Inventory->api_product_id);

                                                                    //Log api post data update status
                                                                    \Storage::disk('local')->append($logFileName, 'Print Time :' . $time . ' MultiMsg post date updated on: ' . date('Y-m-d H:i:s') . ' platform_product Id : ' . $Inventory->id . PHP_EOL);
                                                                } else {

                                                                    //push in array instead db call
                                                                    array_push($sync_product_ids_having_no_api_call, $Inventory->id);
                                                                    //array_push($sync_inventory_ids_having_no_api_call,$product_inventory->id);
                                                                    $sync_inventory_ids_having_no_api_call = array_merge($sync_inventory_ids_having_no_api_call, $arrInvRowIdSet);

                                                                    // PlatformProductInventory::where('id', $product_inventory->id)->update(['sync_status' => 'Synced']);
                                                                    // $this->mobj->makeUpdate('platform_product', ['inventory_sync_status' => 'Synced'], ['id' => $Inventory->id]);

                                                                    // $this->log->syncLog($user_id, $user_integration_id, $user_workflow_rule_id, $source_platform_id, $this->platformId, $inventory_object_id, 'success', $Inventory->id, '');

                                                                    //No api call case
                                                                    \Storage::disk('local')->append($logFileName, 'Print Time :' . $time . ' Ignore No need to api call Inventory Stock is same time: ' . date('Y-m-d H:i:s') . ' platform_product Id : ' . $Inventory->id . ' BpQuantity :' . $quantity . ' Inventory Qty : ' . $product_inventory->quantity . ' update_quantity : ' . $update_quantity . PHP_EOL);
                                                                }
                                                            }
                                                        } else {

                                                            //No api call case
                                                            \Storage::disk('local')->append($logFileName, 'No need to api call time: ' . date('Y-m-d H:i:s') . ' platform_product Id : ' . $Inventory->id . PHP_EOL);

                                                            $product_synced_error = 'Inventory not fetched for product ' . $Inventory->api_product_id . ' from brightpearl inventory api.';

                                                            $sync_status = "Failed";

                                                            PlatformProductInventory::whereIn('id', $arrInvRowIdSet)->update(['sync_status' => $sync_status]);
                                                        }
                                                    } else {

                                                        //No api call case
                                                        \Storage::disk('local')->append($logFileName, 'No need to api call time: ' . date('Y-m-d H:i:s') . ' platform_product Id : ' . $Inventory->id . PHP_EOL);

                                                        $product_synced_error = 'Default warehouse/location not found for selected inventory warehouse.';
                                                        $returnresponse = $product_synced_error;
                                                        $sync_status = "Failed";

                                                        PlatformProductInventory::whereIn('id', $arrInvRowIdSet)->update(['sync_status' => $sync_status]);
                                                        PlatformProduct::where('id', $Inventory->id)->update(['inventory_sync_status' => $sync_status]);

                                                        $this->log->syncLog($user_id, $user_integration_id, $user_workflow_rule_id, $source_platform_id, $this->platformId, $inventory_object_id, "failed", $Inventory->id, $product_synced_error);

                                                        if ($record_id) {
                                                            return $returnresponse;
                                                        }
                                                        continue;
                                                    }
                                                }
                                            }
                                        } else {

                                            //push in array instead db call
                                            array_push($sync_product_ids_having_no_api_call, $Inventory->id);

                                            // $this->mobj->makeUpdate('platform_product', ['inventory_sync_status' => 'Synced'], ['id' => $Inventory->id]);
                                            // $this->log->syncLog($user_id, $user_integration_id, $user_workflow_rule_id, $source_platform_id, $this->platformId, $inventory_object_id, 'success', $Inventory->id, 'Inventory synced!');

                                            //No api call case..when no Ready inventory found in product inventory...
                                            \Storage::disk('local')->append($logFileName, 'No need to api call time: ' . date('Y-m-d H:i:s') . ' platform_product Id : ' . $Inventory->id . PHP_EOL);
                                        }
                                    }
                                    $final_updated_inventory_pids = array_filter(array_unique($final_updated_inventory_pids));
                                    $final_updated_product_pids = array_filter(array_unique($final_updated_product_pids));
                                    //check if count($multiMsg_postData) == 9 (for current selected 9 sub chunk data) then call multiMsg & clear data
                                    if (count($multiMsg_postData) == 9) {
                                        //Print MultiMsg Dat
                                        \Storage::disk('local')->append($logFileName, 'api Print time : ' . $time . ' call time : ' . date('Y-m-d H:i:s') . ' multiMsgData Before Api call : ' . json_encode($multiMsg_postData) . PHP_EOL . PHP_EOL);

                                        $this->callAdjustmentForBulkInventorySync($user_id, $user_integration_id, $user_workflow_rule_id, $source_platform_id, $ufound, $inventory_object_id, $multiMsg_postData, $curl_post_data, $InventoryWarehouseId_for_single_call, $final_updated_inventory_pids, $final_updated_product_pids, $logFileName);

                                        //clear data for another call
                                        $final_updated_product_pids = [];
                                        $final_updated_inventory_pids = [];
                                        $multiMsg_postData = [];
                                        $curl_post_data = [];
                                        $picked_api_product_ids = [];
                                    }
                                }
                            }

                            //Backup call if some multiMsg_postData data remain to sync
                            if (isset($multiMsg_postData) && count($multiMsg_postData) > 0) {


                                \Storage::disk('local')->append($logFileName, 'Print time : ' . $time . ' multiMsgData Before Api call for 2nd_Remaining Data | api call time : ' . date('Y-m-d H:i:s') . ' post data : ' . json_encode($multiMsg_postData) . PHP_EOL . PHP_EOL);

                                $this->callAdjustmentForBulkInventorySync($user_id, $user_integration_id, $user_workflow_rule_id, $source_platform_id, $ufound, $inventory_object_id, $multiMsg_postData, $curl_post_data, $InventoryWarehouseId_for_single_call, $final_updated_inventory_pids, $final_updated_product_pids, $logFileName);

                                //clear data for another call
                                $final_updated_product_pids = [];
                                $final_updated_inventory_pids = [];
                                $multiMsg_postData = [];
                                $curl_post_data = [];
                                $picked_api_product_ids = [];
                            }
                            //end chunk product in 9 & correction via multiMsg



                            //update product & inventory tables on single call for 200 chunk data
                            if ($sync_product_ids_having_no_api_call) {
                                PlatformProduct::whereIn('id', $sync_product_ids_having_no_api_call)->update(['inventory_sync_status' => 'Synced']);
                            }
                            if ($sync_inventory_ids_having_no_api_call) {
                                $sync_inventory_ids_having_no_api_call = array_filter(array_unique($sync_inventory_ids_having_no_api_call));
                                PlatformProductInventory::whereIn('id', $sync_inventory_ids_having_no_api_call)->update(['sync_status' => 'Synced']);
                            }
                            //end

                        }
                        //end main chunk 200


                    } else if (!$record_id && isset(Config::get('apisettings.AllowDailySyncOnceInBP')[$source_platform_name]) && $syncDateInfo) {
                        // Set status status as 0 if there is no pending data left
                        $syncDateInfo->status = 0;
                        $syncDateInfo->save();
                    }
                }
            }

        } catch (\Exception $e) {
            Log::error($user_integration_id . " -> BrightPearlApiController -> SyncInventoryBulk -> " . $e->getLine() . " -> " . $e->getMessage());
            $return = $e->getMessage();
        }
        return $returnresponse;
    }

    //call Adjustment
    public function callAdjustmentForBulkInventorySync($user_id, $user_integration_id, $user_workflow_rule_id, $source_platform_id, $ufound, $inventory_object_id, $multiMsg_postData, $curl_post_data, $InventoryWarehouseId_for_single_call, $final_updated_inventory_pids, $final_updated_product_pids, $logFileName)
    {

        $multiMsgLogFileName = 'inventory_sync_response_response_log_' . date('Y-m-d') . '.txt';

        $api_call = time();

        //Call Api & handle Response.. MultiMessage
        if (isset($multiMsg_postData) && count($multiMsg_postData) > 0) {

            //use regular api call for inventory sync
            if (count($multiMsg_postData) == 1) {

                //in this case need to manage InventoryWarehouseId to call single stock correction api
                $response = $this->bp->UpdateInventory($ufound, $InventoryWarehouseId_for_single_call, $curl_post_data);
                $Inventory_data = json_decode($response->getBody(), true);

                \Storage::disk('local')->append($multiMsgLogFileName, 'Single Inventory Sync Log postdata : ' . json_encode($curl_post_data) . ' Response' . json_encode($response)
                    . PHP_EOL . PHP_EOL);

                if (isset($Inventory_data['response'])) {

                    PlatformProductInventory::whereIn('id', $final_updated_inventory_pids)->update(['sync_status' => 'Synced']);
                    PlatformProduct::whereIn('id', $final_updated_product_pids)->update(['inventory_sync_status' => "Synced"]);

                    if ($final_updated_product_pids) {
                        $this->log->syncLog($user_id, $user_integration_id, $user_workflow_rule_id, $source_platform_id, $this->platformId, $inventory_object_id, "success", $final_updated_product_pids[0], 'Inventory synced successfully!');
                    }
                } elseif (isset($Inventory_data['errors'])) {

                    if (isset($Inventory_data['errors']['message'])) {
                        $product_synced_error = $Inventory_data['errors']['message'];
                    } else if (isset($Inventory_data['errors'][0]['message'])) {
                        $product_synced_error = $Inventory_data['errors'][0]['message'];
                    }

                    if (is_array($product_synced_error)) {
                        $product_synced_error = json_encode($product_synced_error);
                    }

                    $sync_status = 'Failed';
                    $sync_log_status = 'failed';
                    //Ignore if not enought on hand error
                    $search = "Not enough on-hand availability";
                    if (strpos($product_synced_error, $search) !== false) {
                        $sync_log_status = 'success';
                        $sync_status = 'Ignore';
                    }
                    //end ignore logic


                    PlatformProductInventory::whereIn('id', $final_updated_inventory_pids)->update(['sync_status' => $sync_status]);
                    PlatformProduct::whereIn('id', $final_updated_product_pids)->update(['inventory_sync_status' => $sync_status]);

                    if ($final_updated_product_pids) {
                        $this->log->syncLog($user_id, $user_integration_id, $user_workflow_rule_id, $source_platform_id, $this->platformId, $inventory_object_id, $sync_log_status, $final_updated_product_pids[0], $product_synced_error);
                    }

                    //Log error data
                    \Storage::disk('local')->append($logFileName, 'Adjustment call Error ' . date('Y-m-d H:i:s') . ' Response : ' . json_encode($Inventory_data['errors']) . ' post Data :' . json_encode($curl_post_data) . ' productIds : ' . json_encode($final_updated_product_pids) . ' error msg :' . $product_synced_error . PHP_EOL . PHP_EOL);

                    return $product_synced_error;
                }
            } else {

                //multiMsg Api Call
                $payload = [
                    "processingMode" => "SEQUENTIAL",
                    "onFail" => "CONTINUE",
                    "messages" => $multiMsg_postData
                ];

                //use multiMsg for inventory correction
                $response = $this->bp->MultiMessage($ufound, $payload);
                $multiMessageResponse  = json_decode($response->getBody(), true);

                \Storage::disk('local')->append($multiMsgLogFileName, 'MultiMsg Log postdata : ' . json_encode($payload) . ' Response' . json_encode($response)
                    . PHP_EOL . PHP_EOL);

                if (isset($multiMessageResponse['response']['processedMessages'])) {

                    $sync_product_ids_having_success_api_call = [];
                    $sync_inventory_ids_having_success_api_call = [];

                    foreach ($multiMessageResponse['response']['processedMessages'] as $responseData) {

                        $labelArray = explode('-', $responseData['label']);

                        $source_product_pid = $labelArray[1];
                        $plt_inventory_pid = $labelArray[2];

                        if ($responseData['statusCode'] == 200) {

                            //push 9 multimsg success reponse product & inventory ids in array
                            array_push($sync_product_ids_having_success_api_call, $source_product_pid);
                            //array_push($sync_inventory_ids_having_success_api_call, $plt_inventory_pid);
                            $sync_inventory_ids_having_success_api_call = array_merge($sync_inventory_ids_having_success_api_call, explode(',', $plt_inventory_pid));

                            // PlatformProductInventory::where('id', $plt_inventory_pid)->update(['sync_status' => 'Synced']);
                            // PlatformProduct::where('id', $source_product_pid)->update(['inventory_sync_status' => "Synced"]);

                            $this->log->syncLog($user_id, $user_integration_id, $user_workflow_rule_id, $source_platform_id, $this->platformId, $inventory_object_id, "success", $source_product_pid, 'Inventory synced successfully!');
                        } else {

                            $contentBody = json_decode($responseData['body']['content'], true);
                            if (isset($contentBody['error']) || (isset($contentBody['errors']) && is_array($contentBody['errors']))) {
                                $sync_error = isset($contentBody['errors'][0]) ? $contentBody['errors'][0]['message'] : 'Inventory correction failed';
                            } elseif (isset($contentBody['response'])) {
                                $sync_error = $contentBody['message'];
                            }

                            $sync_status = 'Failed';
                            $sync_log_status = 'failed';
                            //Ignore if not enought on hand error
                            $search = "Not enough on-hand availability";
                            if (strpos($sync_error, $search) !== false) {
                                $sync_log_status = 'success';
                                $sync_status = 'Ignore';
                            }
                            //end ignore logic


                            PlatformProductInventory::where('id', $plt_inventory_pid)->update(['sync_status' => $sync_status]);
                            PlatformProduct::where('id', $source_product_pid)->update(['inventory_sync_status' => $sync_status]);

                            $this->log->syncLog($user_id, $user_integration_id, $user_workflow_rule_id, $source_platform_id, $this->platformId, $inventory_object_id, $sync_log_status, $source_product_pid, $sync_error);

                            //Log error data
                            \Storage::disk('local')->append($logFileName, 'MultiMsg call Error ' . date('Y-m-d H:i:s') . ' post Data :' . json_encode($multiMsg_postData) . ' productIds : ' . json_encode($final_updated_product_pids) . ' error msg :' . $sync_error . ' labelArray :' . json_encode($labelArray)
                                . PHP_EOL . PHP_EOL);
                        }
                    }

                    //update product & inventory tables on single call for 9 multimsg product & inventory ids
                    if ($sync_product_ids_having_success_api_call) {
                        PlatformProduct::whereIn('id', $sync_product_ids_having_success_api_call)->update(['inventory_sync_status' => 'Synced']);
                    }
                    if ($sync_inventory_ids_having_success_api_call) {
                        PlatformProductInventory::whereIn('id', $sync_inventory_ids_having_success_api_call)->update(['sync_status' => 'Synced']);
                    }
                    //end

                    //log multimsg success
                    \Storage::disk('local')->append($logFileName, 'MultiMsg response log  print_time : ' . $api_call . ' call time' . date('Y-m-d H:i:s'));
                } elseif (isset($multiMessageResponse['errors'][0]['message'])) {

                    $error_message = $multiMessageResponse['errors'][0]['message'];

                    //Log error data
                    \Storage::disk('local')->append($logFileName, 'MultiMsg call Error ' . date('Y-m-d H:i:s') . ' post Data :' . json_encode($multiMsg_postData) . ' productIds : ' . json_encode($final_updated_product_pids) . ' error msg :' . $error_message . PHP_EOL . PHP_EOL);

                    return $error_message;
                } elseif (isset($multiMessageResponse['response'])) {

                    $error_message = $multiMessageResponse['response'];

                    //Log error data
                    \Storage::disk('local')->append($logFileName, 'MultiMsg call Error ' . date('Y-m-d H:i:s') . ' post Data :' . json_encode($multiMsg_postData) . ' productIds : ' . json_encode($final_updated_product_pids) . ' error msg :' . $error_message . PHP_EOL . PHP_EOL);

                    return $error_message;
                }
            }
        }
    }

    //Mark Inventory Sync Ignore when product not exists in both platform
    public function updateInventorySyncStatus($user_id = '', $user_integration_id = '', $source_platform_name = '', $sync_status = "Ready")
    {

        $defaultLOB = 0; // Define default Line Of Business (LOB)
        if (isset(Config::get('apisettings.FindLOBToSyncInventoryInBP')[$source_platform_name])) {
            //find default Line Of Business (LOB) from infoplus to sync speacific Line Of Business (LOB) Product's Inventory to Brightpearl
            $defaultLOB = $this->integrationCommonHelper->findDefaultLineOfBusiness($user_integration_id);
        }

        $source_platform_id = $this->helper->getPlatformIdByName($source_platform_name);

        /* Identify Product Uniqueness $platform_workflow_rule_id */
        $identity = app('App\Http\Controllers\Brightpearl\BrightpearlUtility')->ProductIdentityMapping($user_integration_id, NULL);
        $source_identity = $identity['source_identity']; //Source Identity
        $destination_identity = $identity['destination_identity']; //Destination Identity

        $query = DB::table('platform_product as source_platform_product')
            ->join('platform_product as destination_platform_product', 'destination_platform_product.' . $destination_identity, '=', 'source_platform_product.' . $source_identity);

        if ($defaultLOB) {
            $query->join('platform_product_detail_attributes as at', 'at.platform_product_id', '=', 'source_platform_product.id')->where('at.lob', $defaultLOB);
        }

        $query->where(['source_platform_product.inventory_sync_status' => $sync_status, 'source_platform_product.user_integration_id' => $user_integration_id, 'destination_platform_product.user_integration_id' => $user_integration_id])
            ->where(['source_platform_product.platform_id' => $source_platform_id, 'destination_platform_product.platform_id' => $this->platformId])
            ->where('source_platform_product.is_deleted', 0)
            ->where('destination_platform_product.is_deleted', 0);


        $count_product_ready_inventory = $query->count();


        //Means no product found for inventory sync...
        if ($count_product_ready_inventory  < 1) {
            $count_ready_product = PlatformProduct::where(['user_integration_id' => $user_integration_id, 'inventory_sync_status' => 'Ready', 'platform_id' => $source_platform_id])->count();

            if ($count_ready_product) {
                $count_ready_product = PlatformProduct::where(['user_integration_id' => $user_integration_id, 'inventory_sync_status' => $sync_status, 'platform_id' => $source_platform_id])->update(['inventory_sync_status' => 'Ignore']);
            }
        }

        return true;
    }


    /* Execute  Method */
    public function ExecuteBrightpearl($method = '', $event = '', $destination_platform_id = '', $user_id = '', $user_integration_id = '', $is_initial_sync = 0, $user_workflow_rule_id = '', $source_platform_id = '', $platform_workflow_rule_id = '', $record_id = null)
    {
        // Log::Info( "ExecuteBrightpearl = method: ".$method." - event: ".$event." - destination_platform_id: ".$destination_platform_id." - user_id: ".$user_id." - user_integration_id: ".$user_integration_id." - is_initial_sync: ".$is_initial_sync." - user_workflow_rule_id: ".$user_workflow_rule_id." - source_platform_id: ".$source_platform_id." - platform_workflow_rule_id: ".$platform_workflow_rule_id." - record_id: ".$record_id );
        $response = true;
        if ($method == 'GET' && $event == 'WAREHOUSE') {
            $response = $this->GetWarehouse($user_id, $user_integration_id, 1);
            //Log::channel('webhook')->info("GetWarehouse -" . $user_id . " Integration " . $user_integration_id . " Response: " . $response . " Created Date : " . date('Y-m-d H:i:s'));
        } else if ($method == 'GET' && $event == 'LEADSOURCE') {
            $response = $this->GetLeadSources($user_id, $user_integration_id, 1);
            //Log::channel('webhook')->info("LEADSOURCE -" . $user_id . " Integration " . $user_integration_id . " Response: " . $response . " Created Date : " . date('Y-m-d H:i:s'));
        } else if ($method == 'GET' && $event == 'PROJECT') {
            $response = $this->GetProjects($user_id, $user_integration_id, 1);
            //Log::channel('webhook')->info("GetProjects -" . $user_id . " Integration " . $user_integration_id . " Response: " . $response . " Created Date : " . date('Y-m-d H:i:s'));
        } else if ($method == 'GET' && $event == 'TAXCODE') {
            $response = $this->GetTaxCodes($user_id, $user_integration_id, 1);
            //Log::channel('webhook')->info("TAXCODE -" . $user_id . " Integration " . $user_integration_id . " Response: " . $response . " Created Date : " . date('Y-m-d H:i:s'));
        } else if ($method == 'GET' && $event == 'PRICELIST') {
            $response = $this->GetPriceList($user_id, $user_integration_id, 1);
            // Log::channel('webhook')->info("GetPriceList -" . $user_id . " Integration " . $user_integration_id . " Response: " . $response . " Created Date : " . date('Y-m-d H:i:s'));
        } else if ($method == 'GET' && $event == 'CHANNEL') {
            $response = $this->GetChannels($user_id, $user_integration_id, 1);
            // Log::channel('webhook')->info("GetChannels -" . $user_id . " Integration " . $user_integration_id . " Response: " . $response . " Created Date : " . date('Y-m-d H:i:s'));
        } else if ($method == 'GET' && $event == 'SHIPPINGMETHOD') {
            $response = $this->GetShippingMethods($user_id, $user_integration_id, 1);
            // Log::channel('webhook')->info("GetShippingMethods -" . $user_id . " Integration " . $user_integration_id . " Response: " . $response . " Created Date : " . date('Y-m-d H:i:s'));
        } else if ($method == 'GET' && $event == 'PAYMENTMETHOD') {
            $response = $this->GetPaymentMethods($user_id, $user_integration_id, 1);
            //Log::channel('webhook')->info("GetPaymentMethods -" . $user_id . " Integration " . $user_integration_id . " Response: " . $response . " Created Date : " . date('Y-m-d H:i:s'));
        } else if ($method == 'GET' && $event == 'ORDERSTATUS') {
            $response = $this->GetOrderStatus($user_id, $user_integration_id, 1);
            // Log::channel('webhook')->info("GetOrderStatus -" . $user_id . " Integration " . $user_integration_id . " Response: " . $response . " Created Date : " . date('Y-m-d H:i:s'));
        } else if ($method == 'GET' && $event == 'CATEGORY') {
            $response = $this->GetCategories($user_id, $user_integration_id, $is_initial_sync);
            // Log::channel('webhook')->info("GetCategories -" . $user_id . " Integration " . $user_integration_id . " Response: " . $response . " Created Date : " . date('Y-m-d H:i:s'));
        } else if ($method == 'GET' && $event == 'CUSTOMERURL') {
            //To get customer urls at intial sync=1
            $response = $this->GetCustomers($user_id, $user_integration_id, 1, $is_initial_sync);
        } else if ($method == 'GET' && $event == 'PRODUCTURL') {
            //To get product urls at intial sync=1 and also create product webhooks
            $response = $this->GetProducts($user_id, $user_integration_id, 1, $is_initial_sync);
            // Log::channel('webhook')->info("GetProducts for intial -" . $user_id . " Integration " . $user_integration_id . "Intial value=" . $is_initial_sync . " Response: " . $response . " Created Date : " . date('Y-m-d H:i:s'));
        } else if ($method == 'GET' && $event == 'PRODUCT') {
            if ($is_initial_sync) {
                //To get all products by product url at intial sync=1 || please notice value 2
                $response = $this->GetProducts($user_id, $user_integration_id, 2, $is_initial_sync, $destination_platform_id, $source_platform_id);
                // Log::channel('webhook')->info("GetProducts for get all in one time -" . $user_id . " Integration " . $user_integration_id . "Intial value=" . $is_initial_sync . " Response: " . $response . " Created Date : " . date('Y-m-d H:i:s'));
            } else {
                //To get process products which is comes from webhooks when intial sync=0 || please notice value 4
                $response = $this->GetProducts($user_id, $user_integration_id, 4, $is_initial_sync, $destination_platform_id, $source_platform_id);
                // Log::channel('webhook')->info("GetProducts for webhooks process -" . $user_id . " Integration " . $user_integration_id . "Intial value=" . $is_initial_sync . " Response: " . $response . " Created Date : " . date('Y-m-d H:i:s'));
            }
        } else if ($method == 'GET' && $event == 'PRODUCTBACKUP') {
            if ($is_initial_sync) {
                $response = true;
            } else {
                //To get process products which is comes from webhooks when intial sync=0 || please notice value 3
                $response = $this->GetProducts($user_id, $user_integration_id, 3, $is_initial_sync, $destination_platform_id, $source_platform_id);
                // Log::channel('webhook')->info("GetProducts for webhooks process -" . $user_id . " Integration " . $user_integration_id . "Intial value=" . $is_initial_sync . " Response: " . $response . " Created Date : " . date('Y-m-d H:i:s'));
            }
        } else if ($method == 'GET' && $event == 'PRODUCTOPTIONS') {
            if ($is_initial_sync) {
                //To get all products by product url at intial sync=1 || please notice value 2
                $response = $this->GetProductOptions($user_id, $user_integration_id, 1, $is_initial_sync);
                // Log::channel('webhook')->info("GetProductOptions -" . $user_id . " Integration " . $user_integration_id . "Intial value=" . $is_initial_sync . " Response: " . $response . " Created Date : " . date('Y-m-d H:i:s'));
            }
        } else if ($method == 'GET' && $event == 'CUSTOMER') {

            if ($is_initial_sync) {
                //To get all customers by customer url at intial sync=1
                $response = $this->GetCustomers($user_id, $user_integration_id, 2, $is_initial_sync);
            } else {
                //To get customers if new or updates customers when intial sync=0 || please notice value 3
                $response = $this->GetCustomers($user_id, $user_integration_id, 3, $is_initial_sync);
            }
        } else if ($method == 'GET' && $event == 'VENDOR') {

            //To get supplier/vendor if new or updates customers when intial sync=0 || please notice value 3
            $response = $this->GetCustomers($user_id, $user_integration_id, 3, 0, 1);
        } else if ($method == 'GET' && $event == 'ACCOUNTEXTRAINFO') {
            // //To get BP product default configuration
            $response = $this->GetAccountAdditionInformation($user_id, $user_integration_id, 1);
            // Log::channel('webhook')->info("GetAccountAdditionInformation -" . $user_id . " Integration " . $user_integration_id . " Response: " . $response . " Created Date : " . date('Y-m-d H:i:s'));
        } else if ($method == 'GET' && $event == 'SHIPMENT') {
            //To get created goods-out-note.modified.shipped webhook and process goods out note ids
            $response = $this->GetShipment($user_id, $user_integration_id, ['shipment'], 1, $is_initial_sync, "Pending", false, $event, $destination_platform_id);
            // Log::channel('webhook')->info("GetShipment -" . $user_id . " Integration " . $user_integration_id . "Intial value=" . $is_initial_sync . " Response: " . $response . " Created Date : " . date('Y-m-d H:i:s'));
        } else if ($method == 'GET' && $event == 'SHIPMENTONCREATE') {
            //ready => partial ready
            //To get created goods-out-note.created webhook and process goods out note ids
            $response = $this->GetShipment($user_id, $user_integration_id, ['good_out_note_created'], 1, $is_initial_sync, "Pending", false, $event, $destination_platform_id);
            // Log::channel('webhook')->info("GetShipment -" . $user_id . " Integration " . $user_integration_id . "Intial value=" . $is_initial_sync . " Response: " . $response . " Created Date : " . date('Y-m-d H:i:s'));
        } else if ($method == 'GET' && $event == 'TRANSFEREDGOODSOUTNOTE') {
            //To get created goods-out-note.modified.shipped webhook and process goods out note ids
            //It is used for getting netsuite transfer order
            $response = $this->GetShipment($user_id, $user_integration_id, ['shipment'], 1, $is_initial_sync, "Pending", true, $event, $destination_platform_id);
            //Log::channel('webhook')->info("GetShipment -" . $user_id . " Integration " . $user_integration_id ."Source Shipment_ID= ".$source_platform_id." Intial value=" . $is_initial_sync . " Response: " . $response . " Created Date : " . date('Y-m-d H:i:s'));

        } else if ($method == 'GET' && $event == 'TRANSFEREDGOODSOUTNOTECREATED') {
            //To get created goods-out-note.created for transfer order and process goods out note ids
            //$response = $this->GetSOGoodOutNoteCreated($user_id, $user_integration_id, $destination_platform_id, ['good_out_note_created'], 1, $is_initial_sync, "Pending", true, $user_workflow_rule_id, $platform_workflow_rule_id); //use backup method
            $response = $this->GetSOGoodOutNoteCreated($user_id, $user_integration_id, $destination_platform_id, [], 1, $is_initial_sync, "Pending", true, $user_workflow_rule_id, $platform_workflow_rule_id);
            Log::channel('webhook')->info("TRANSFEREDGOODSOUTNOTECREATED -" . $user_id . " Integration " . $user_integration_id . "Source Shipment_ID= " . $source_platform_id . " Intial value=" . $is_initial_sync . " Response: " . $response . " Created Date : " . date('Y-m-d H:i:s'));
        } else if ($method == 'GET' && $event == 'GOODSOUTNOTECREATED') {
            //To get created goods-out-note.created webhook and process goods out note ids
            //$response = $this->GetSOGoodOutNoteCreated($user_id, $user_integration_id, $destination_platform_id, ['good_out_note_created', 'good_out_note_deleted'], 1, $is_initial_sync, "Pending", false, $user_workflow_rule_id, $platform_workflow_rule_id); //use backup method
            $response = $this->GetSOGoodOutNoteCreated($user_id, $user_integration_id, $destination_platform_id, ['good_out_note_deleted'], 1, $is_initial_sync, "Pending", false, $user_workflow_rule_id, $platform_workflow_rule_id);
            //Log::channel('webhook')->info("GOODSOUTNOTECREATED -" . $user_id . " Integration " . $user_integration_id . "Intial value=" . $is_initial_sync . " Response: " . $response . " Created Date : " . date('Y-m-d H:i:s'));
        } else if ($method == 'GET' && $event == 'GOODSOUTNOTECREATEDBACKUP') {
            //This method is allow to get backup of goods out note ids || here attempt=3
            $response = $this->GetSOGoodOutNoteCreated($user_id, $user_integration_id, $destination_platform_id, [], 3, $is_initial_sync, "", false, $user_workflow_rule_id, $platform_workflow_rule_id);
        } else if ($method == 'GET' && $event == 'GOODSOUTNOTEFORTRANSFERORDER') {
            //This method is allow to get backup of goods out note ids || here attempt=3
            $response = $this->GetSOGoodOutNoteCreated($user_id, $user_integration_id, $destination_platform_id, [], 3, $is_initial_sync, "", true, $user_workflow_rule_id, $platform_workflow_rule_id);
            // Log::channel('webhook')->info("GOODSOUTNOTEFORTRANSFERORDER -" . $user_id . " Integration " . $user_integration_id . "Intial value=" . $is_initial_sync . " Response: " . $response . " Created Date : " . date('Y-m-d H:i:s'));
        } else if ($method == 'MUTATE' && $event == 'TRACKINGINFO') {
            //To get created goods-out-note.created webhook and process goods out note ids
            $sync_status = 'Ready';
            $response = $this->SyncTrackingInformation($user_id, $user_integration_id, $platform_workflow_rule_id, $user_workflow_rule_id, $source_platform_id, $sync_status, $record_id);
            Log::channel('webhook')->info("TRACKINGINFO_bp_to_source -" . $user_id . " Integration " . $user_integration_id . "Intial value=" . $is_initial_sync . " Response: " . $response . " Created Date : " . date('Y-m-d H:i:s'));
        } else if ($method == 'MUTATE' && $event == 'SALESORDER') {
            $sync_status = 'Ready';
            $response = $this->SyncOrderInBP($user_id, $user_integration_id, $platform_workflow_rule_id, $user_workflow_rule_id, $source_platform_id, $sync_status, $record_id, $destination_platform_id);
        } else if ($method == 'GET' && $event == 'INVENTORY') {
            // To get latest inventory and create webhook when intial sync=1 for inventory
            $response = $this->GetPendingInventory($user_id, $user_integration_id, $is_initial_sync, 0, $source_platform_id, $destination_platform_id);
        } else if ($method == 'GET' && $event == 'INVENTORYBACKUP') {
            // Backup call to get latest inventory when intial sync=1 for inventory
            $response = $this->GetPendingInventory($user_id, $user_integration_id, $is_initial_sync, 1, $source_platform_id, $destination_platform_id);
        } else if ($method == 'GET' && $event == 'SETINVENTORYSTATUS') {
            // To webhook list and set inventory status pending
            $response = $this->SetPendingInventoryStatus($user_id, $user_integration_id, $is_initial_sync);
        } else if ($method == 'GET' && $event == 'INVOICE') {
            //invoices will be updated only using webhooks, intial sync is flag is just for one time webhook creation.
            $response = $this->GetPendingInvoice($user_id, $user_integration_id, $is_initial_sync);
        } else if ($method == 'GET' && $event == 'PURCHASEORDER') {
            $response = $this->SearchOrdersByType($user_id, $user_integration_id, $platform_workflow_rule_id, $user_workflow_rule_id, $is_initial_sync, 'purchase_orders', 0, $destination_platform_id);
        } else if ($method == 'GET' && $event == 'SALESORDER') {
            $response = $this->SearchOrdersByType($user_id, $user_integration_id, $platform_workflow_rule_id, $user_workflow_rule_id, $is_initial_sync, 'sales_orders', 0, $destination_platform_id, $source_platform_id);
        } else if ($method == 'GET' && $event == 'SALESCREDIT') {
            $response = $this->SearchOrdersByType($user_id, $user_integration_id, $platform_workflow_rule_id, $user_workflow_rule_id, $is_initial_sync, 'sales_credit');
        } else if ($method == 'GET' && $event == 'SALESCREDITURL') {
            $response = $this->GetOrdersByType($user_id, $user_integration_id, $platform_workflow_rule_id, $user_workflow_rule_id, $destination_platform_id, $is_initial_sync, 'sales_credit');
        } else if ($method == 'MUTATE' && $event == 'REFUND') {
            $sync_status = 'Ready';
            $response = $this->SyncRefundOrderInBP($user_id, $user_integration_id, $platform_workflow_rule_id, $user_workflow_rule_id, $source_platform_id, $sync_status, $record_id);
        } else if ($method == 'GET' && $event == 'PURCHASEORDERURL') {
            $response = $this->GetOrdersByType($user_id, $user_integration_id, $platform_workflow_rule_id, $user_workflow_rule_id, $destination_platform_id, $is_initial_sync);
        } else if ($method == 'GET' && $event == 'SALESORDERURL') {
            $response = $this->GetOrdersByType($user_id, $user_integration_id, $platform_workflow_rule_id, $user_workflow_rule_id, $destination_platform_id, $is_initial_sync, 'sales_orders');
        } else if ($method == 'GET' && $event == 'GOODSINNOTEURL') {
            // Log::Info( "ExecuteBrightpearl = method: ".$method." - event: ".$event );
            //To get product urls at intial sync=1 and also create product webhooks
            $response = $this->GetPOGoodsInNotes($user_id, $user_integration_id, $user_workflow_rule_id, ['goodsinnote'], 1, $is_initial_sync, $source_platform_id, "Pending");
            // Log::channel('webhook')->info("GetProducts for intial -" . $user_id . " Integration " . $user_integration_id . "Intial value=" . $is_initial_sync . " Response: " . $response . " Created Date : " . date('Y-m-d H:i:s'));
        } else if ($method == 'GET' && $event == 'GOODSINNOTE') {
            // Log::Info( "ExecuteBrightpearl = method: ".$method." - event: ".$event );
            if ($is_initial_sync) {
                //To get all goods in note by url at intial sync=1 || please notice value 2
                $response = $this->GetPOGoodsInNotes($user_id, $user_integration_id, $user_workflow_rule_id, ['goodsinnote'], 2, $is_initial_sync, $source_platform_id, "Pending");
                Log::channel('webhook')->info("GetProducts for get all in one time -" . $user_id . " Integration " . $user_integration_id . "Intial value=" . $is_initial_sync . " Response: " . $response . " Created Date : " . date('Y-m-d H:i:s'));
            } else {
                //To get process goods in note which is comes from webhooks when intial sync=0 || please notice value 4
                $response = $this->GetPOGoodsInNotes($user_id, $user_integration_id, $user_workflow_rule_id, ['goodsinnote'], 3, $is_initial_sync, $source_platform_id, "Pending");
                Log::channel('webhook')->info("GetProducts for webhooks process -" . $user_id . " Integration " . $user_integration_id . "Intial value=" . $is_initial_sync . " Response: " . $response . " Created Date : " . date('Y-m-d H:i:s'));
            }
        } else if ($method == 'GET' && $event == 'GOODSINNOTEBACKUP') {
            // Log::Info( "ExecuteBrightpearl = method: ".$method." - event: ".$event );
            if (!$is_initial_sync) {
                //To get all goods in note by url at intial sync=1 || please notice value 2
                $response = $this->GetPOGoodsInNotes($user_id, $user_integration_id, $user_workflow_rule_id, ['goodsinnote'], 2, $is_initial_sync, $source_platform_id, "Pending");
                Log::channel('webhook')->info("GetProducts for get all in one time GOODSINNOTEBACKUP-" . $user_id . " Integration " . $user_integration_id . "Intial value=" . $is_initial_sync . " Response: " . $response . " Created Date : " . date('Y-m-d H:i:s'));
            }
        } else if ($method == 'GET' && $event == 'CUSTOMFIELDSLIST') {
            $response = $this->GetCustomFieldsList($user_id, $user_integration_id);
        } else if ($method == 'MUTATE' && $event == 'ACCEPTPURCHASEORDER') {
            $sync_status = 'Ready';
            $order_type = 'PO';
            $response = $this->UpdateOrderStatusAndNotes($user_id, $user_integration_id, $platform_workflow_rule_id, $user_workflow_rule_id, $source_platform_id, $order_type, $sync_status, $record_id);
        } else if ($method == 'MUTATE' && $event == 'INVENTORY') {
            $sync_status = "Ready";
            if (env('APP_ENV') == "stag" && $user_integration_id != '634') {
                $response = $this->SyncInventory1($user_id, $user_integration_id, $source_platform_id, $platform_workflow_rule_id, $user_workflow_rule_id, $sync_status, $record_id);
            } else {
                $response = $this->SyncInventory($user_id, $user_integration_id, $source_platform_id, $platform_workflow_rule_id, $user_workflow_rule_id, $sync_status, $record_id);
            }
        } else if ($method == 'GET' && $event == 'TRANSFERORDER') {
            $response = $this->SearchOrdersByType($user_id, $user_integration_id, $platform_workflow_rule_id, $user_workflow_rule_id, $is_initial_sync, 'transfer_orders');
        } else if ($method == 'GET' && $event == 'INVOICEORDER') {
            $response = $this->SearchOrdersByType($user_id, $user_integration_id, $platform_workflow_rule_id, $user_workflow_rule_id, $is_initial_sync, 'invoice_orders');
        } else if ($method == 'GET' && $event == 'TRANSFERORDERURL') {
            $response = $this->GetOrdersByType($user_id, $user_integration_id, $platform_workflow_rule_id, $user_workflow_rule_id, $destination_platform_id, $is_initial_sync, 'transfer_orders');
        } else if ($method == 'GET' && $event == 'INVOICEORDERURL') {
            $response = $this->GetOrdersByType($user_id, $user_integration_id, $platform_workflow_rule_id, $user_workflow_rule_id, $destination_platform_id, $is_initial_sync, 'invoice_orders');
        } else if ($method == 'GET' && $event == 'SALESORDERCUSTOMFIELDS') { // CUSTOM FIELDS
            $result = $this->GetCustomFieldsList($user_id, $user_integration_id, 'sales_order');
        } else if ($method == 'GET' && $event == 'CUSTOMERCUSTOMFIELDS') {
            $result = $this->GetCustomFieldsList($user_id, $user_integration_id, 'customer');
        } else if ($method == 'GET' && $event == 'PRODUCTCUSTOMFIELDS') {
            $result = $this->GetCustomFieldsList($user_id, $user_integration_id, 'product');
        } else if ($method == 'MUTATE' && $event == 'PURCHASEORDERINVOICE') {
            $sync_status = 'Ready';
            $response = $this->CreatePurchaseOrderInvoice($user_id, $user_integration_id, $platform_workflow_rule_id, $user_workflow_rule_id, $source_platform_id, $sync_status, $record_id);
        } else if ($method == 'MUTATE' && $event == 'SHIPMENT') {
            $response = app('App\Http\Controllers\Brightpearl\BrightPearlApiSubController')->CreateOrderShipment($user_id, $user_integration_id, $source_platform_id, $platform_workflow_rule_id, $user_workflow_rule_id, $record_id);
        } else if ($method == 'GET' && $event == 'INVENTORYTRAIL') {
            $response = app('App\Http\Controllers\Brightpearl\BrightPearlApiSubController')->GetInventoryTrail($user_id, $user_integration_id, $source_platform_id, $platform_workflow_rule_id, $user_workflow_rule_id, $record_id);
        } else if ($method == 'GET' && $event == 'CHECKORDERSTATUS') {
            $response = app('App\Http\Controllers\Brightpearl\BrightPearlApiSubController')->GetCheckOrderStatus($user_id, $user_integration_id, "Pending", $is_initial_sync);
            //  Log::channel('webhook')->info("GetCheckOrderStatus -" . $user_id . " Integration " . $user_integration_id . " Response: " . $response . " Created Date : " . date('Y-m-d H:i:s'));
        } else if ($method == 'MUTATE' && $event == 'PURCHASEINVOICEPAYMENT') {
            $response = $this->CreatePurchaseOrderInvoicePayment($user_id, $user_integration_id, $source_platform_id, $platform_workflow_rule_id, $user_workflow_rule_id, 'POInvoice', $sync_status = 'Ready', $record_id);
        } else if ($method == 'MUTATE' && $event == 'NONPURCHASEINVOICEPAYMENT') {
            $response = $this->CreatePurchaseOrderInvoicePayment($user_id, $user_integration_id, $source_platform_id, $platform_workflow_rule_id, $user_workflow_rule_id, 'NonPOInvoice', 'Ready', $record_id);
        } else if ($method == 'MUTATE' && $event == 'GOODSINNOTE') {
            // Log::Info( "ExecuteBrightpearl = method: ".$method." - event: ".$event );
            $response = app('App\Http\Controllers\Brightpearl\BrightPearlApiSubController')->CreatePOGoodsInNote($user_id, $user_integration_id, $platform_workflow_rule_id, $user_workflow_rule_id, $source_platform_id, "Ready", $record_id);
            // Log::channel('webhook')->info("CreatePOGoodsInNote -" . $user_id . " Integration " . $user_integration_id . " Response: " . $response . " Created Date : " . date('Y-m-d H:i:s'));
        } else if ($method == 'GET' && $event == 'PURCHASEORDERANDUPDATE') {
            $response = $this->SearchOrdersByType($user_id, $user_integration_id, $platform_workflow_rule_id, $user_workflow_rule_id, $is_initial_sync, 'purchase_orders', 1);
        } else if ($method == 'GET' && $event == 'PURCHASEORDERANDUPDATEURL') {
            $response = $this->GetOrdersByType($user_id, $user_integration_id, $platform_workflow_rule_id, $user_workflow_rule_id, $destination_platform_id, $is_initial_sync, 'purchase_orders', 1);
        } else if ($method == 'GET' && $event == 'SALESORDERANDUPDATE') {
            $response = $this->SearchOrdersByType($user_id, $user_integration_id, $platform_workflow_rule_id, $user_workflow_rule_id, $is_initial_sync, 'sales_orders', 1);
        } else if ($method == 'GET' && $event == 'SALESORDERANDUPDATEURL') {
            $response = $this->GetOrdersByType($user_id, $user_integration_id, $platform_workflow_rule_id, $user_workflow_rule_id, $destination_platform_id, $is_initial_sync, 'sales_orders', 1);
        } else if ($method == 'GET' && $event == 'SUPPLIERS') {
            $response = $this->GetSuppliers($user_id, $user_integration_id, 1);
        } else if ($method == 'GET' && $event == 'WAREHOUSEADDRESS') {
            $response = app('App\Http\Controllers\Brightpearl\BrightPearlApiSubController')->createWarehouseAddress($user_id, $user_integration_id, 1);
        } else if ($method == 'MUTATE' && $event == 'PRODUCT') {
            $response = app('App\Http\Controllers\Brightpearl\BrightPearlApiSubController')->CreateOrUpdateProducts($user_id, $user_integration_id, $source_platform_id, $platform_workflow_rule_id, $user_workflow_rule_id, $record_id);
        } else if ($method == 'GET' && $event == 'BRANDS') {
            $response = app('App\Http\Controllers\Brightpearl\BrightPearlApiSubController')->GetBrands($user_id, $user_integration_id);
        } else if ($method == 'GET' && $event == 'SALEORDERACKNOWLEDGEURL') {
            $response = $this->GetOrdersByType($user_id, $user_integration_id, $platform_workflow_rule_id, $user_workflow_rule_id, $destination_platform_id, $is_initial_sync, 'sales_order', 1);
        } else if ($method == 'MUTATE' && $event == 'CUSTOMER') {
            $response = app('App\Http\Controllers\Brightpearl\BrightPearlApiSubController')->syncCustomerToBP($user_id, $user_integration_id, $platform_workflow_rule_id, $user_workflow_rule_id, $source_platform_id, 'Ready', $record_id);
        } else if ($method == 'GET' && $event == 'WAREHOUSELOCATION') {
            $response = app('App\Http\Controllers\Brightpearl\BrightPearlApiSubController')->getWarehouseLocation($user_id, $user_integration_id);
        } else if ($method == 'GET' && $event == 'TAGS') {
            $response = app('App\Http\Controllers\Brightpearl\BrightPearlApiSubController')->GetTags($user_id, $user_integration_id);
        } else if ($method == 'MUTATE' && $event == 'UPDATEORDERSTATUSANDGOODSOUTNOTE') {
            // Log::Info( "ExecuteBrightpearl = method: ".$method." - event: ".$event );
            $response = app('App\Http\Controllers\Brightpearl\BrightpearlApiSubDivController')->UpdateOrderStatusAndGoodOutNotes($user_id, $user_integration_id, $platform_workflow_rule_id, $user_workflow_rule_id, $source_platform_id, "SO", "Ready", $record_id);
        } else if ($method == 'MUTATE' && $event == 'UPDATESALECREDITORDERSTATUS') {
            $sync_status = "Ready";
            $order_type = "SC";
            $response = app('App\Http\Controllers\Brightpearl\BrightpearlApiSubDivController')->UpdatesSalesCreditOrderStatus($user_id, $user_integration_id, $platform_workflow_rule_id, $user_workflow_rule_id, $source_platform_id, $order_type, $sync_status, $record_id, true);
        } else if ($method == 'MUTATE' && $event == 'RECEIVEEXTERNALTRANSFER') {
            $sync_status = "Ready";
            $response = app('App\Http\Controllers\Brightpearl\BrightpearlApiSubDivController')->ReceiveExternalTransfer($user_id, $user_integration_id, $user_workflow_rule_id, $source_platform_id, $sync_status, $record_id);
        } else if ($method == 'MUTATE' && $event == 'REFUNDPAYMENT') {
            $response = app('App\Http\Controllers\Brightpearl\BrightPearlApiSubController')->CreateInvoiceOnSalesCreditOrders($user_id, $user_integration_id, $user_workflow_rule_id, $source_platform_id, $record_id);
        } else if ($method == 'MUTATE' && $event == 'UPDATESALEORDERROWTAX') {
            $response = app('App\Http\Controllers\Brightpearl\BrightPearlApiSubController')->UpdateSalesOrderRowTaxAmounts($user_id, $user_integration_id, $platform_workflow_rule_id, $user_workflow_rule_id, $source_platform_id, $record_id);
        } else if ($method == 'GET' && $event == 'SALESORDERINVOICE') {
            $response = $this->SearchOrdersByType($user_id, $user_integration_id, $platform_workflow_rule_id, $user_workflow_rule_id, $is_initial_sync, 'sales_order_invoices');
        } else if ($method == 'GET' && $event == 'SALESORDERINVOICEURL') {
            $response = $this->GetOrdersByType($user_id, $user_integration_id, $platform_workflow_rule_id, $user_workflow_rule_id, $destination_platform_id, $is_initial_sync, 'sales_order_invoices');
        } else if ($method == 'GET' && $event == 'SALESCREDITINVOICE') {
            $response = $this->SearchOrdersByType($user_id, $user_integration_id, $platform_workflow_rule_id, $user_workflow_rule_id, $is_initial_sync, 'sales_credit_invoices');
        } else if ($method == 'GET' && $event == 'SALESCREDITINVOICEURL') {
            $response = $this->GetOrdersByType($user_id, $user_integration_id, $platform_workflow_rule_id, $user_workflow_rule_id, $destination_platform_id, $is_initial_sync, 'sales_credit_invoices');
        } else if ($method == 'GET' && $event == 'SALESORDERMODIFIEDORDERSTATUS') {
            //To created order.modified.order-status webhook and process order
            $response = $this->GetSalesOrderModifiedByOrderStatus($user_id, $user_integration_id, $is_initial_sync);
        } else if ($method == 'MUTATE' && $event == 'SHIPMENTPICKPACKNOTIFY') {
            $response = $this->findGoodsoutAndUpdatePrintPackTracking($user_id, $user_integration_id, $platform_workflow_rule_id, $user_workflow_rule_id, $source_platform_id, "Ready", $record_id);
        } else if ($method == 'MUTATE' && $event == 'CHANGESALESORDERSTATUS') {
            $response = app('App\Http\Controllers\Brightpearl\BrightpearlApiSubDivController')->UpdateSalesOrderStatus($user_id, $user_integration_id, $platform_workflow_rule_id, $user_workflow_rule_id, $source_platform_id, $record_id);
        } else if ($method == 'MUTATE' && $event == 'INVENTORYADJUSTMENT') {
            $sync_status = "Ready";
            $response = app('App\Http\Controllers\Brightpearl\BrightPearlApiSubController')->AdjustInventory($user_id, $user_integration_id, $source_platform_id, $platform_workflow_rule_id, $user_workflow_rule_id, $sync_status, $record_id);
        } else if ($method == 'MUTATE' && $event == 'BULKINVENTORY') {
            $sync_status = "Ready";
            $response = $this->SyncInventoryBulk($user_id, $user_integration_id, $source_platform_id, $platform_workflow_rule_id, $user_workflow_rule_id, $sync_status, $record_id);
        } else if ($method == 'MUTATE' && $event == 'MARKUNMATCHEDPRODINVENTORYIGNORE') {
            $sync_status = "Ready";
            $response = $this->updateInventorySyncStatus($user_id, $user_integration_id, $source_platform_id, $sync_status);
        } else if ($method == 'MUTATE' && $event == 'DELETEGOODSOUTNOTE') {
            $response = app('App\Http\Controllers\Brightpearl\BrightPearlApiSubController')->deleteGoodsoutNote($is_initial_sync, $user_id, $user_integration_id, $source_platform_id, $user_workflow_rule_id, $record_id);
        } else if ($method == 'MUTATE' && $event == 'CUSTOMSALESORDERANDCREDITSWITHRECEIVEDGOODS') {
            $response = app('App\Http\Controllers\Brightpearl\BrightpearlCustomProcessController')->CustomSalesOrderAndCreditsWithReceivedGoods($user_id, $user_integration_id, $platform_workflow_rule_id, $user_workflow_rule_id, $source_platform_id, "Ready", $record_id, 'SO');
        } else if ($method == 'MUTATE' && $event == 'WRITEOFFORDERINVENTORY') {
            $response = app('App\Http\Controllers\Brightpearl\BrightpearlCustomProcessController')->UpdateWriteoffOrderInventory($user_id, $user_integration_id, $platform_workflow_rule_id, $user_workflow_rule_id, $source_platform_id, "Ready", $record_id, 'SC');
        }

        return $response;
    }
}
